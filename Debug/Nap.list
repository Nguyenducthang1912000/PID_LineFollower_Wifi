
Nap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad44  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800aee8  0800aee8  0001aee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b578  0800b578  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b578  0800b578  0001b578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b580  0800b580  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b580  0800b580  0001b580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b584  0800b584  0001b584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800b588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200001f4  0800b77c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  0800b77c  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f61  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f7c  00000000  00000000  00038185  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001320  00000000  00000000  0003b108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e0  00000000  00000000  0003c428  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018e8e  00000000  00000000  0003d608  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000101e5  00000000  00000000  00056496  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094556  00000000  00000000  0006667b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fabd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e54  00000000  00000000  000fac4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aecc 	.word	0x0800aecc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800aecc 	.word	0x0800aecc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <Menu_system_control>:
uint8_t line = 1;
extern int16_t Left, Right;
extern uint16_t Sensor_Threshold[6];
extern uint16_t Sensor_ADC_Value[6];

void Menu_system_control(uint8_t Menu_type, uint8_t line) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
	switch (Menu_type) {
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d82b      	bhi.n	8001006 <Menu_system_control+0x6e>
 8000fae:	a201      	add	r2, pc, #4	; (adr r2, 8000fb4 <Menu_system_control+0x1c>)
 8000fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb4:	08000fd1 	.word	0x08000fd1
 8000fb8:	08000fd7 	.word	0x08000fd7
 8000fbc:	08000fe1 	.word	0x08000fe1
 8000fc0:	08000fe7 	.word	0x08000fe7
 8000fc4:	08000ff1 	.word	0x08000ff1
 8000fc8:	08000ffb 	.word	0x08000ffb
 8000fcc:	08001001 	.word	0x08001001
	case 0:
		Running();
 8000fd0:	f000 fbe0 	bl	8001794 <Running>
		break;
 8000fd4:	e017      	b.n	8001006 <Menu_system_control+0x6e>
	case Main_menu:
		Mainmenu(line);
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 f819 	bl	8001010 <Mainmenu>
		break;
 8000fde:	e012      	b.n	8001006 <Menu_system_control+0x6e>
	case Color_Processing:
		Color_Studying_process();
 8000fe0:	f000 fac8 	bl	8001574 <Color_Studying_process>
		break;
 8000fe4:	e00f      	b.n	8001006 <Menu_system_control+0x6e>
	case PID_Menu:
		PID_menu(line);
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f8ff 	bl	80011ec <PID_menu>
		break;
 8000fee:	e00a      	b.n	8001006 <Menu_system_control+0x6e>
	case Engine_menu:
		Speed_menu(line);
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fa30 	bl	8001458 <Speed_menu>
		break;
 8000ff8:	e005      	b.n	8001006 <Menu_system_control+0x6e>
	case LineDetect_Show:
		LineDetect_show();
 8000ffa:	f000 fb07 	bl	800160c <LineDetect_show>
		break;
 8000ffe:	e002      	b.n	8001006 <Menu_system_control+0x6e>
	case Wifi_connect:
		Wifi_Connect_establish();
 8001000:	f000 fc36 	bl	8001870 <Wifi_Connect_establish>
		break;
 8001004:	bf00      	nop
	}
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop

08001010 <Mainmenu>:
void Mainmenu(uint8_t line) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	switch (line) {
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	3b01      	subs	r3, #1
 800101e:	2b06      	cmp	r3, #6
 8001020:	f200 80c1 	bhi.w	80011a6 <Mainmenu+0x196>
 8001024:	a201      	add	r2, pc, #4	; (adr r2, 800102c <Mainmenu+0x1c>)
 8001026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102a:	bf00      	nop
 800102c:	08001049 	.word	0x08001049
 8001030:	0800107b 	.word	0x0800107b
 8001034:	080010ad 	.word	0x080010ad
 8001038:	080010df 	.word	0x080010df
 800103c:	08001111 	.word	0x08001111
 8001040:	08001143 	.word	0x08001143
 8001044:	08001175 	.word	0x08001175
	case 1:
		lcd_send_cmd(0x80 | 0x00);
 8001048:	2080      	movs	r0, #128	; 0x80
 800104a:	f000 fe63 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(">Car Run            ");
 800104e:	4858      	ldr	r0, [pc, #352]	; (80011b0 <Mainmenu+0x1a0>)
 8001050:	f000 ff10 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 8001054:	20c0      	movs	r0, #192	; 0xc0
 8001056:	f000 fe5d 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Color studying     ");
 800105a:	4856      	ldr	r0, [pc, #344]	; (80011b4 <Mainmenu+0x1a4>)
 800105c:	f000 ff0a 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001060:	2094      	movs	r0, #148	; 0x94
 8001062:	f000 fe57 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" PID value modify   ");
 8001066:	4854      	ldr	r0, [pc, #336]	; (80011b8 <Mainmenu+0x1a8>)
 8001068:	f000 ff04 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800106c:	20d4      	movs	r0, #212	; 0xd4
 800106e:	f000 fe51 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Max speed config   ");
 8001072:	4852      	ldr	r0, [pc, #328]	; (80011bc <Mainmenu+0x1ac>)
 8001074:	f000 fefe 	bl	8001e74 <lcd_send_string>
		break;
 8001078:	e095      	b.n	80011a6 <Mainmenu+0x196>
	case 2:
		lcd_send_cmd(0x80 | 0x00);
 800107a:	2080      	movs	r0, #128	; 0x80
 800107c:	f000 fe4a 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Car Run            ");
 8001080:	484f      	ldr	r0, [pc, #316]	; (80011c0 <Mainmenu+0x1b0>)
 8001082:	f000 fef7 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 8001086:	20c0      	movs	r0, #192	; 0xc0
 8001088:	f000 fe44 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(">Color studying     ");
 800108c:	484d      	ldr	r0, [pc, #308]	; (80011c4 <Mainmenu+0x1b4>)
 800108e:	f000 fef1 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001092:	2094      	movs	r0, #148	; 0x94
 8001094:	f000 fe3e 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" PID value modify   ");
 8001098:	4847      	ldr	r0, [pc, #284]	; (80011b8 <Mainmenu+0x1a8>)
 800109a:	f000 feeb 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800109e:	20d4      	movs	r0, #212	; 0xd4
 80010a0:	f000 fe38 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Max speed config   ");
 80010a4:	4845      	ldr	r0, [pc, #276]	; (80011bc <Mainmenu+0x1ac>)
 80010a6:	f000 fee5 	bl	8001e74 <lcd_send_string>
		break;
 80010aa:	e07c      	b.n	80011a6 <Mainmenu+0x196>
	case 3:
		lcd_send_cmd(0x80 | 0x00);
 80010ac:	2080      	movs	r0, #128	; 0x80
 80010ae:	f000 fe31 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Car Run            ");
 80010b2:	4843      	ldr	r0, [pc, #268]	; (80011c0 <Mainmenu+0x1b0>)
 80010b4:	f000 fede 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 80010b8:	20c0      	movs	r0, #192	; 0xc0
 80010ba:	f000 fe2b 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Color studying     ");
 80010be:	483d      	ldr	r0, [pc, #244]	; (80011b4 <Mainmenu+0x1a4>)
 80010c0:	f000 fed8 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80010c4:	2094      	movs	r0, #148	; 0x94
 80010c6:	f000 fe25 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(">PID value modify   ");
 80010ca:	483f      	ldr	r0, [pc, #252]	; (80011c8 <Mainmenu+0x1b8>)
 80010cc:	f000 fed2 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 80010d0:	20d4      	movs	r0, #212	; 0xd4
 80010d2:	f000 fe1f 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Max speed config   ");
 80010d6:	4839      	ldr	r0, [pc, #228]	; (80011bc <Mainmenu+0x1ac>)
 80010d8:	f000 fecc 	bl	8001e74 <lcd_send_string>
		break;
 80010dc:	e063      	b.n	80011a6 <Mainmenu+0x196>
	case 4:
		lcd_send_cmd(0x80 | 0x00);
 80010de:	2080      	movs	r0, #128	; 0x80
 80010e0:	f000 fe18 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Car Run            ");
 80010e4:	4836      	ldr	r0, [pc, #216]	; (80011c0 <Mainmenu+0x1b0>)
 80010e6:	f000 fec5 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 80010ea:	20c0      	movs	r0, #192	; 0xc0
 80010ec:	f000 fe12 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Color studying     ");
 80010f0:	4830      	ldr	r0, [pc, #192]	; (80011b4 <Mainmenu+0x1a4>)
 80010f2:	f000 febf 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80010f6:	2094      	movs	r0, #148	; 0x94
 80010f8:	f000 fe0c 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" PID value modify   ");
 80010fc:	482e      	ldr	r0, [pc, #184]	; (80011b8 <Mainmenu+0x1a8>)
 80010fe:	f000 feb9 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001102:	20d4      	movs	r0, #212	; 0xd4
 8001104:	f000 fe06 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(">Max speed config   ");
 8001108:	4830      	ldr	r0, [pc, #192]	; (80011cc <Mainmenu+0x1bc>)
 800110a:	f000 feb3 	bl	8001e74 <lcd_send_string>
		break;
 800110e:	e04a      	b.n	80011a6 <Mainmenu+0x196>
	case 5:
		lcd_send_cmd(0x80 | 0x00);
 8001110:	2080      	movs	r0, #128	; 0x80
 8001112:	f000 fdff 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(">Line Detect show   ");
 8001116:	482e      	ldr	r0, [pc, #184]	; (80011d0 <Mainmenu+0x1c0>)
 8001118:	f000 feac 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 800111c:	20c0      	movs	r0, #192	; 0xc0
 800111e:	f000 fdf9 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Save system value  ");
 8001122:	482c      	ldr	r0, [pc, #176]	; (80011d4 <Mainmenu+0x1c4>)
 8001124:	f000 fea6 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001128:	2094      	movs	r0, #148	; 0x94
 800112a:	f000 fdf3 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Wifi Connect       ");
 800112e:	482a      	ldr	r0, [pc, #168]	; (80011d8 <Mainmenu+0x1c8>)
 8001130:	f000 fea0 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001134:	20d4      	movs	r0, #212	; 0xd4
 8001136:	f000 fded 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string("                    ");
 800113a:	4828      	ldr	r0, [pc, #160]	; (80011dc <Mainmenu+0x1cc>)
 800113c:	f000 fe9a 	bl	8001e74 <lcd_send_string>
		break;
 8001140:	e031      	b.n	80011a6 <Mainmenu+0x196>
	case 6:
		lcd_send_cmd(0x80 | 0x00);
 8001142:	2080      	movs	r0, #128	; 0x80
 8001144:	f000 fde6 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Line Detect show   ");
 8001148:	4825      	ldr	r0, [pc, #148]	; (80011e0 <Mainmenu+0x1d0>)
 800114a:	f000 fe93 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 800114e:	20c0      	movs	r0, #192	; 0xc0
 8001150:	f000 fde0 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(">Save system value  ");
 8001154:	4823      	ldr	r0, [pc, #140]	; (80011e4 <Mainmenu+0x1d4>)
 8001156:	f000 fe8d 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 800115a:	2094      	movs	r0, #148	; 0x94
 800115c:	f000 fdda 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Wifi Connect       ");
 8001160:	481d      	ldr	r0, [pc, #116]	; (80011d8 <Mainmenu+0x1c8>)
 8001162:	f000 fe87 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001166:	20d4      	movs	r0, #212	; 0xd4
 8001168:	f000 fdd4 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string("                    ");
 800116c:	481b      	ldr	r0, [pc, #108]	; (80011dc <Mainmenu+0x1cc>)
 800116e:	f000 fe81 	bl	8001e74 <lcd_send_string>
		break;
 8001172:	e018      	b.n	80011a6 <Mainmenu+0x196>
	case 7:
		lcd_send_cmd(0x80 | 0x00);
 8001174:	2080      	movs	r0, #128	; 0x80
 8001176:	f000 fdcd 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Line Detect show   ");
 800117a:	4819      	ldr	r0, [pc, #100]	; (80011e0 <Mainmenu+0x1d0>)
 800117c:	f000 fe7a 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 8001180:	20c0      	movs	r0, #192	; 0xc0
 8001182:	f000 fdc7 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Save system value  ");
 8001186:	4813      	ldr	r0, [pc, #76]	; (80011d4 <Mainmenu+0x1c4>)
 8001188:	f000 fe74 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 800118c:	2094      	movs	r0, #148	; 0x94
 800118e:	f000 fdc1 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(">Wifi Connect       ");
 8001192:	4815      	ldr	r0, [pc, #84]	; (80011e8 <Mainmenu+0x1d8>)
 8001194:	f000 fe6e 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001198:	20d4      	movs	r0, #212	; 0xd4
 800119a:	f000 fdbb 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string("                    ");
 800119e:	480f      	ldr	r0, [pc, #60]	; (80011dc <Mainmenu+0x1cc>)
 80011a0:	f000 fe68 	bl	8001e74 <lcd_send_string>
		break;
 80011a4:	bf00      	nop
	}
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	0800aee8 	.word	0x0800aee8
 80011b4:	0800af00 	.word	0x0800af00
 80011b8:	0800af18 	.word	0x0800af18
 80011bc:	0800af30 	.word	0x0800af30
 80011c0:	0800af48 	.word	0x0800af48
 80011c4:	0800af60 	.word	0x0800af60
 80011c8:	0800af78 	.word	0x0800af78
 80011cc:	0800af90 	.word	0x0800af90
 80011d0:	0800afa8 	.word	0x0800afa8
 80011d4:	0800afc0 	.word	0x0800afc0
 80011d8:	0800afd8 	.word	0x0800afd8
 80011dc:	0800aff0 	.word	0x0800aff0
 80011e0:	0800b008 	.word	0x0800b008
 80011e4:	0800b020 	.word	0x0800b020
 80011e8:	0800b038 	.word	0x0800b038

080011ec <PID_menu>:
void PID_menu(uint8_t line) {
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]

	switch (line) {
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	f200 810c 	bhi.w	8001418 <PID_menu+0x22c>
 8001200:	a201      	add	r2, pc, #4	; (adr r2, 8001208 <PID_menu+0x1c>)
 8001202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001206:	bf00      	nop
 8001208:	08001219 	.word	0x08001219
 800120c:	08001299 	.word	0x08001299
 8001210:	08001319 	.word	0x08001319
 8001214:	08001399 	.word	0x08001399
	case 1:
		sprintf(kp_str, ">Kp = %.2f         ", Kp);
 8001218:	4b81      	ldr	r3, [pc, #516]	; (8001420 <PID_menu+0x234>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f99b 	bl	8000558 <__aeabi_f2d>
 8001222:	4603      	mov	r3, r0
 8001224:	460c      	mov	r4, r1
 8001226:	461a      	mov	r2, r3
 8001228:	4623      	mov	r3, r4
 800122a:	497e      	ldr	r1, [pc, #504]	; (8001424 <PID_menu+0x238>)
 800122c:	487e      	ldr	r0, [pc, #504]	; (8001428 <PID_menu+0x23c>)
 800122e:	f006 ff85 	bl	800813c <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 8001232:	2080      	movs	r0, #128	; 0x80
 8001234:	f000 fd6e 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(kp_str);
 8001238:	487b      	ldr	r0, [pc, #492]	; (8001428 <PID_menu+0x23c>)
 800123a:	f000 fe1b 	bl	8001e74 <lcd_send_string>
		sprintf(ki_str, " Ki = %.2f         ", Ki);
 800123e:	4b7b      	ldr	r3, [pc, #492]	; (800142c <PID_menu+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f988 	bl	8000558 <__aeabi_f2d>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	461a      	mov	r2, r3
 800124e:	4623      	mov	r3, r4
 8001250:	4977      	ldr	r1, [pc, #476]	; (8001430 <PID_menu+0x244>)
 8001252:	4878      	ldr	r0, [pc, #480]	; (8001434 <PID_menu+0x248>)
 8001254:	f006 ff72 	bl	800813c <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 8001258:	20c0      	movs	r0, #192	; 0xc0
 800125a:	f000 fd5b 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(ki_str);
 800125e:	4875      	ldr	r0, [pc, #468]	; (8001434 <PID_menu+0x248>)
 8001260:	f000 fe08 	bl	8001e74 <lcd_send_string>
		sprintf(kd_str, " Kd = %.2f         ", Kd);
 8001264:	4b74      	ldr	r3, [pc, #464]	; (8001438 <PID_menu+0x24c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f975 	bl	8000558 <__aeabi_f2d>
 800126e:	4603      	mov	r3, r0
 8001270:	460c      	mov	r4, r1
 8001272:	461a      	mov	r2, r3
 8001274:	4623      	mov	r3, r4
 8001276:	4971      	ldr	r1, [pc, #452]	; (800143c <PID_menu+0x250>)
 8001278:	4871      	ldr	r0, [pc, #452]	; (8001440 <PID_menu+0x254>)
 800127a:	f006 ff5f 	bl	800813c <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 800127e:	2094      	movs	r0, #148	; 0x94
 8001280:	f000 fd48 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(kd_str);
 8001284:	486e      	ldr	r0, [pc, #440]	; (8001440 <PID_menu+0x254>)
 8001286:	f000 fdf5 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800128a:	20d4      	movs	r0, #212	; 0xd4
 800128c:	f000 fd42 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 8001290:	486c      	ldr	r0, [pc, #432]	; (8001444 <PID_menu+0x258>)
 8001292:	f000 fdef 	bl	8001e74 <lcd_send_string>
		break;
 8001296:	e0bf      	b.n	8001418 <PID_menu+0x22c>
	case 2:
		sprintf(kp_str, " Kp = %.2f         ", Kp);
 8001298:	4b61      	ldr	r3, [pc, #388]	; (8001420 <PID_menu+0x234>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f95b 	bl	8000558 <__aeabi_f2d>
 80012a2:	4603      	mov	r3, r0
 80012a4:	460c      	mov	r4, r1
 80012a6:	461a      	mov	r2, r3
 80012a8:	4623      	mov	r3, r4
 80012aa:	4967      	ldr	r1, [pc, #412]	; (8001448 <PID_menu+0x25c>)
 80012ac:	485e      	ldr	r0, [pc, #376]	; (8001428 <PID_menu+0x23c>)
 80012ae:	f006 ff45 	bl	800813c <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 80012b2:	2080      	movs	r0, #128	; 0x80
 80012b4:	f000 fd2e 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(kp_str);
 80012b8:	485b      	ldr	r0, [pc, #364]	; (8001428 <PID_menu+0x23c>)
 80012ba:	f000 fddb 	bl	8001e74 <lcd_send_string>
		sprintf(ki_str, ">Ki = %.2f         ", Ki);
 80012be:	4b5b      	ldr	r3, [pc, #364]	; (800142c <PID_menu+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f948 	bl	8000558 <__aeabi_f2d>
 80012c8:	4603      	mov	r3, r0
 80012ca:	460c      	mov	r4, r1
 80012cc:	461a      	mov	r2, r3
 80012ce:	4623      	mov	r3, r4
 80012d0:	495e      	ldr	r1, [pc, #376]	; (800144c <PID_menu+0x260>)
 80012d2:	4858      	ldr	r0, [pc, #352]	; (8001434 <PID_menu+0x248>)
 80012d4:	f006 ff32 	bl	800813c <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 80012d8:	20c0      	movs	r0, #192	; 0xc0
 80012da:	f000 fd1b 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(ki_str);
 80012de:	4855      	ldr	r0, [pc, #340]	; (8001434 <PID_menu+0x248>)
 80012e0:	f000 fdc8 	bl	8001e74 <lcd_send_string>
		sprintf(kd_str, " Kd = %.2f         ", Kd);
 80012e4:	4b54      	ldr	r3, [pc, #336]	; (8001438 <PID_menu+0x24c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f935 	bl	8000558 <__aeabi_f2d>
 80012ee:	4603      	mov	r3, r0
 80012f0:	460c      	mov	r4, r1
 80012f2:	461a      	mov	r2, r3
 80012f4:	4623      	mov	r3, r4
 80012f6:	4951      	ldr	r1, [pc, #324]	; (800143c <PID_menu+0x250>)
 80012f8:	4851      	ldr	r0, [pc, #324]	; (8001440 <PID_menu+0x254>)
 80012fa:	f006 ff1f 	bl	800813c <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 80012fe:	2094      	movs	r0, #148	; 0x94
 8001300:	f000 fd08 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(kd_str);
 8001304:	484e      	ldr	r0, [pc, #312]	; (8001440 <PID_menu+0x254>)
 8001306:	f000 fdb5 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800130a:	20d4      	movs	r0, #212	; 0xd4
 800130c:	f000 fd02 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 8001310:	484c      	ldr	r0, [pc, #304]	; (8001444 <PID_menu+0x258>)
 8001312:	f000 fdaf 	bl	8001e74 <lcd_send_string>
		break;
 8001316:	e07f      	b.n	8001418 <PID_menu+0x22c>
	case 3:
		sprintf(kp_str, " Kp = %.2f         ", Kp);
 8001318:	4b41      	ldr	r3, [pc, #260]	; (8001420 <PID_menu+0x234>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f91b 	bl	8000558 <__aeabi_f2d>
 8001322:	4603      	mov	r3, r0
 8001324:	460c      	mov	r4, r1
 8001326:	461a      	mov	r2, r3
 8001328:	4623      	mov	r3, r4
 800132a:	4947      	ldr	r1, [pc, #284]	; (8001448 <PID_menu+0x25c>)
 800132c:	483e      	ldr	r0, [pc, #248]	; (8001428 <PID_menu+0x23c>)
 800132e:	f006 ff05 	bl	800813c <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 8001332:	2080      	movs	r0, #128	; 0x80
 8001334:	f000 fcee 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(kp_str);
 8001338:	483b      	ldr	r0, [pc, #236]	; (8001428 <PID_menu+0x23c>)
 800133a:	f000 fd9b 	bl	8001e74 <lcd_send_string>
		sprintf(ki_str, " Ki = %.2f         ", Ki);
 800133e:	4b3b      	ldr	r3, [pc, #236]	; (800142c <PID_menu+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f908 	bl	8000558 <__aeabi_f2d>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	461a      	mov	r2, r3
 800134e:	4623      	mov	r3, r4
 8001350:	4937      	ldr	r1, [pc, #220]	; (8001430 <PID_menu+0x244>)
 8001352:	4838      	ldr	r0, [pc, #224]	; (8001434 <PID_menu+0x248>)
 8001354:	f006 fef2 	bl	800813c <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 8001358:	20c0      	movs	r0, #192	; 0xc0
 800135a:	f000 fcdb 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(ki_str);
 800135e:	4835      	ldr	r0, [pc, #212]	; (8001434 <PID_menu+0x248>)
 8001360:	f000 fd88 	bl	8001e74 <lcd_send_string>
		sprintf(kd_str, ">Kd = %.2f         ", Kd);
 8001364:	4b34      	ldr	r3, [pc, #208]	; (8001438 <PID_menu+0x24c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f8f5 	bl	8000558 <__aeabi_f2d>
 800136e:	4603      	mov	r3, r0
 8001370:	460c      	mov	r4, r1
 8001372:	461a      	mov	r2, r3
 8001374:	4623      	mov	r3, r4
 8001376:	4936      	ldr	r1, [pc, #216]	; (8001450 <PID_menu+0x264>)
 8001378:	4831      	ldr	r0, [pc, #196]	; (8001440 <PID_menu+0x254>)
 800137a:	f006 fedf 	bl	800813c <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 800137e:	2094      	movs	r0, #148	; 0x94
 8001380:	f000 fcc8 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(kd_str);
 8001384:	482e      	ldr	r0, [pc, #184]	; (8001440 <PID_menu+0x254>)
 8001386:	f000 fd75 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800138a:	20d4      	movs	r0, #212	; 0xd4
 800138c:	f000 fcc2 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 8001390:	482c      	ldr	r0, [pc, #176]	; (8001444 <PID_menu+0x258>)
 8001392:	f000 fd6f 	bl	8001e74 <lcd_send_string>
		break;
 8001396:	e03f      	b.n	8001418 <PID_menu+0x22c>
	case 4:
		sprintf(kp_str, " Kp = %.2f         ", Kp);
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <PID_menu+0x234>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f8db 	bl	8000558 <__aeabi_f2d>
 80013a2:	4603      	mov	r3, r0
 80013a4:	460c      	mov	r4, r1
 80013a6:	461a      	mov	r2, r3
 80013a8:	4623      	mov	r3, r4
 80013aa:	4927      	ldr	r1, [pc, #156]	; (8001448 <PID_menu+0x25c>)
 80013ac:	481e      	ldr	r0, [pc, #120]	; (8001428 <PID_menu+0x23c>)
 80013ae:	f006 fec5 	bl	800813c <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 80013b2:	2080      	movs	r0, #128	; 0x80
 80013b4:	f000 fcae 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(kp_str);
 80013b8:	481b      	ldr	r0, [pc, #108]	; (8001428 <PID_menu+0x23c>)
 80013ba:	f000 fd5b 	bl	8001e74 <lcd_send_string>
		sprintf(ki_str, " Ki = %.2f         ", Ki);
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <PID_menu+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8c8 	bl	8000558 <__aeabi_f2d>
 80013c8:	4603      	mov	r3, r0
 80013ca:	460c      	mov	r4, r1
 80013cc:	461a      	mov	r2, r3
 80013ce:	4623      	mov	r3, r4
 80013d0:	4917      	ldr	r1, [pc, #92]	; (8001430 <PID_menu+0x244>)
 80013d2:	4818      	ldr	r0, [pc, #96]	; (8001434 <PID_menu+0x248>)
 80013d4:	f006 feb2 	bl	800813c <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 80013d8:	20c0      	movs	r0, #192	; 0xc0
 80013da:	f000 fc9b 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(ki_str);
 80013de:	4815      	ldr	r0, [pc, #84]	; (8001434 <PID_menu+0x248>)
 80013e0:	f000 fd48 	bl	8001e74 <lcd_send_string>
		sprintf(kd_str, " Kd = %.2f         ", Kd);
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <PID_menu+0x24c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f8b5 	bl	8000558 <__aeabi_f2d>
 80013ee:	4603      	mov	r3, r0
 80013f0:	460c      	mov	r4, r1
 80013f2:	461a      	mov	r2, r3
 80013f4:	4623      	mov	r3, r4
 80013f6:	4911      	ldr	r1, [pc, #68]	; (800143c <PID_menu+0x250>)
 80013f8:	4811      	ldr	r0, [pc, #68]	; (8001440 <PID_menu+0x254>)
 80013fa:	f006 fe9f 	bl	800813c <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 80013fe:	2094      	movs	r0, #148	; 0x94
 8001400:	f000 fc88 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(kd_str);
 8001404:	480e      	ldr	r0, [pc, #56]	; (8001440 <PID_menu+0x254>)
 8001406:	f000 fd35 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800140a:	20d4      	movs	r0, #212	; 0xd4
 800140c:	f000 fc82 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(">Return to main menu");
 8001410:	4810      	ldr	r0, [pc, #64]	; (8001454 <PID_menu+0x268>)
 8001412:	f000 fd2f 	bl	8001e74 <lcd_send_string>
		break;
 8001416:	bf00      	nop
	}
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bd90      	pop	{r4, r7, pc}
 8001420:	2000022c 	.word	0x2000022c
 8001424:	0800b050 	.word	0x0800b050
 8001428:	200002b8 	.word	0x200002b8
 800142c:	20000230 	.word	0x20000230
 8001430:	0800b064 	.word	0x0800b064
 8001434:	2000026c 	.word	0x2000026c
 8001438:	20000234 	.word	0x20000234
 800143c:	0800b078 	.word	0x0800b078
 8001440:	20000298 	.word	0x20000298
 8001444:	0800b08c 	.word	0x0800b08c
 8001448:	0800b0a4 	.word	0x0800b0a4
 800144c:	0800b0b8 	.word	0x0800b0b8
 8001450:	0800b0cc 	.word	0x0800b0cc
 8001454:	0800b0e0 	.word	0x0800b0e0

08001458 <Speed_menu>:
void Speed_menu(uint8_t line) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	switch (line) {
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d027      	beq.n	80014b8 <Speed_menu+0x60>
 8001468:	2b03      	cmp	r3, #3
 800146a:	d048      	beq.n	80014fe <Speed_menu+0xa6>
 800146c:	2b01      	cmp	r3, #1
 800146e:	d000      	beq.n	8001472 <Speed_menu+0x1a>
		lcd_send_string(Right_str);
		lcd_send_cmd(0x80 | 0x14);
		lcd_send_string(">Return to main menu");
		break;
	}
}
 8001470:	e068      	b.n	8001544 <Speed_menu+0xec>
		sprintf(Left_str, ">Left Eng = %d", Left);
 8001472:	4b36      	ldr	r3, [pc, #216]	; (800154c <Speed_menu+0xf4>)
 8001474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001478:	461a      	mov	r2, r3
 800147a:	4935      	ldr	r1, [pc, #212]	; (8001550 <Speed_menu+0xf8>)
 800147c:	4835      	ldr	r0, [pc, #212]	; (8001554 <Speed_menu+0xfc>)
 800147e:	f006 fe5d 	bl	800813c <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 8001482:	2080      	movs	r0, #128	; 0x80
 8001484:	f000 fc46 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(Left_str);
 8001488:	4832      	ldr	r0, [pc, #200]	; (8001554 <Speed_menu+0xfc>)
 800148a:	f000 fcf3 	bl	8001e74 <lcd_send_string>
		sprintf(Right_str, " Right Eng = %d", Right);
 800148e:	4b32      	ldr	r3, [pc, #200]	; (8001558 <Speed_menu+0x100>)
 8001490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001494:	461a      	mov	r2, r3
 8001496:	4931      	ldr	r1, [pc, #196]	; (800155c <Speed_menu+0x104>)
 8001498:	4831      	ldr	r0, [pc, #196]	; (8001560 <Speed_menu+0x108>)
 800149a:	f006 fe4f 	bl	800813c <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 800149e:	20c0      	movs	r0, #192	; 0xc0
 80014a0:	f000 fc38 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(Right_str);
 80014a4:	482e      	ldr	r0, [pc, #184]	; (8001560 <Speed_menu+0x108>)
 80014a6:	f000 fce5 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80014aa:	2094      	movs	r0, #148	; 0x94
 80014ac:	f000 fc32 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 80014b0:	482c      	ldr	r0, [pc, #176]	; (8001564 <Speed_menu+0x10c>)
 80014b2:	f000 fcdf 	bl	8001e74 <lcd_send_string>
		break;
 80014b6:	e045      	b.n	8001544 <Speed_menu+0xec>
		sprintf(Left_str, " Left Eng = %d", Left);
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <Speed_menu+0xf4>)
 80014ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014be:	461a      	mov	r2, r3
 80014c0:	4929      	ldr	r1, [pc, #164]	; (8001568 <Speed_menu+0x110>)
 80014c2:	4824      	ldr	r0, [pc, #144]	; (8001554 <Speed_menu+0xfc>)
 80014c4:	f006 fe3a 	bl	800813c <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 80014c8:	2080      	movs	r0, #128	; 0x80
 80014ca:	f000 fc23 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(Left_str);
 80014ce:	4821      	ldr	r0, [pc, #132]	; (8001554 <Speed_menu+0xfc>)
 80014d0:	f000 fcd0 	bl	8001e74 <lcd_send_string>
		sprintf(Right_str, ">Right Eng = %d", Right);
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <Speed_menu+0x100>)
 80014d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014da:	461a      	mov	r2, r3
 80014dc:	4923      	ldr	r1, [pc, #140]	; (800156c <Speed_menu+0x114>)
 80014de:	4820      	ldr	r0, [pc, #128]	; (8001560 <Speed_menu+0x108>)
 80014e0:	f006 fe2c 	bl	800813c <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 80014e4:	20c0      	movs	r0, #192	; 0xc0
 80014e6:	f000 fc15 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(Right_str);
 80014ea:	481d      	ldr	r0, [pc, #116]	; (8001560 <Speed_menu+0x108>)
 80014ec:	f000 fcc2 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80014f0:	2094      	movs	r0, #148	; 0x94
 80014f2:	f000 fc0f 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 80014f6:	481b      	ldr	r0, [pc, #108]	; (8001564 <Speed_menu+0x10c>)
 80014f8:	f000 fcbc 	bl	8001e74 <lcd_send_string>
		break;
 80014fc:	e022      	b.n	8001544 <Speed_menu+0xec>
		sprintf(Left_str, " Left Eng = %d", Left);
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <Speed_menu+0xf4>)
 8001500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001504:	461a      	mov	r2, r3
 8001506:	4918      	ldr	r1, [pc, #96]	; (8001568 <Speed_menu+0x110>)
 8001508:	4812      	ldr	r0, [pc, #72]	; (8001554 <Speed_menu+0xfc>)
 800150a:	f006 fe17 	bl	800813c <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 800150e:	2080      	movs	r0, #128	; 0x80
 8001510:	f000 fc00 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(Left_str);
 8001514:	480f      	ldr	r0, [pc, #60]	; (8001554 <Speed_menu+0xfc>)
 8001516:	f000 fcad 	bl	8001e74 <lcd_send_string>
		sprintf(Right_str, " Right Eng = %d", Right);
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <Speed_menu+0x100>)
 800151c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001520:	461a      	mov	r2, r3
 8001522:	490e      	ldr	r1, [pc, #56]	; (800155c <Speed_menu+0x104>)
 8001524:	480e      	ldr	r0, [pc, #56]	; (8001560 <Speed_menu+0x108>)
 8001526:	f006 fe09 	bl	800813c <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 800152a:	20c0      	movs	r0, #192	; 0xc0
 800152c:	f000 fbf2 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(Right_str);
 8001530:	480b      	ldr	r0, [pc, #44]	; (8001560 <Speed_menu+0x108>)
 8001532:	f000 fc9f 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001536:	2094      	movs	r0, #148	; 0x94
 8001538:	f000 fbec 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string(">Return to main menu");
 800153c:	480c      	ldr	r0, [pc, #48]	; (8001570 <Speed_menu+0x118>)
 800153e:	f000 fc99 	bl	8001e74 <lcd_send_string>
		break;
 8001542:	bf00      	nop
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000006 	.word	0x20000006
 8001550:	0800b0f8 	.word	0x0800b0f8
 8001554:	20000258 	.word	0x20000258
 8001558:	20000008 	.word	0x20000008
 800155c:	0800b108 	.word	0x0800b108
 8001560:	20000244 	.word	0x20000244
 8001564:	0800b08c 	.word	0x0800b08c
 8001568:	0800b118 	.word	0x0800b118
 800156c:	0800b128 	.word	0x0800b128
 8001570:	0800b0e0 	.word	0x0800b0e0

08001574 <Color_Studying_process>:
void Color_Studying_process(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
	for (int i = 0; i < 5; i++) {
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	e022      	b.n	80015c6 <Color_Studying_process+0x52>
		lcd_send_cmd(0x80 | 0x00);
 8001580:	2080      	movs	r0, #128	; 0x80
 8001582:	f000 fbc7 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string("Processing .       ");
 8001586:	481c      	ldr	r0, [pc, #112]	; (80015f8 <Color_Studying_process+0x84>)
 8001588:	f000 fc74 	bl	8001e74 <lcd_send_string>
		HAL_Delay(500);
 800158c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001590:	f001 fed2 	bl	8003338 <HAL_Delay>
		lcd_send_cmd(0x80 | 0x00);
 8001594:	2080      	movs	r0, #128	; 0x80
 8001596:	f000 fbbd 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string("Processing . .     ");
 800159a:	4818      	ldr	r0, [pc, #96]	; (80015fc <Color_Studying_process+0x88>)
 800159c:	f000 fc6a 	bl	8001e74 <lcd_send_string>
		HAL_Delay(500);
 80015a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015a4:	f001 fec8 	bl	8003338 <HAL_Delay>
		lcd_send_cmd(0x80 | 0x00);
 80015a8:	2080      	movs	r0, #128	; 0x80
 80015aa:	f000 fbb3 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string("Processing . . .   ");
 80015ae:	4814      	ldr	r0, [pc, #80]	; (8001600 <Color_Studying_process+0x8c>)
 80015b0:	f000 fc60 	bl	8001e74 <lcd_send_string>
		HAL_Delay(500);
 80015b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b8:	f001 febe 	bl	8003338 <HAL_Delay>
		lcd_clear();
 80015bc:	f000 fc0a 	bl	8001dd4 <lcd_clear>
	for (int i = 0; i < 5; i++) {
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3301      	adds	r3, #1
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	ddd9      	ble.n	8001580 <Color_Studying_process+0xc>
	}
	HAL_Delay(100);
 80015cc:	2064      	movs	r0, #100	; 0x64
 80015ce:	f001 feb3 	bl	8003338 <HAL_Delay>
	lcd_send_cmd(0x80 | 0x00);
 80015d2:	2080      	movs	r0, #128	; 0x80
 80015d4:	f000 fb9e 	bl	8001d14 <lcd_send_cmd>
	lcd_send_string("Done               ");
 80015d8:	480a      	ldr	r0, [pc, #40]	; (8001604 <Color_Studying_process+0x90>)
 80015da:	f000 fc4b 	bl	8001e74 <lcd_send_string>
	HAL_Delay(500);
 80015de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e2:	f001 fea9 	bl	8003338 <HAL_Delay>
	Menu_type = Main_menu;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <Color_Studying_process+0x94>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
	lcd_clear();
 80015ec:	f000 fbf2 	bl	8001dd4 <lcd_clear>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	0800b138 	.word	0x0800b138
 80015fc:	0800b14c 	.word	0x0800b14c
 8001600:	0800b160 	.word	0x0800b160
 8001604:	0800b174 	.word	0x0800b174
 8001608:	20000001 	.word	0x20000001

0800160c <LineDetect_show>:
void LineDetect_show(void) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80 | 0x00);
 8001612:	2080      	movs	r0, #128	; 0x80
 8001614:	f000 fb7e 	bl	8001d14 <lcd_send_cmd>
	lcd_send_string("Line Detect        ");
 8001618:	4857      	ldr	r0, [pc, #348]	; (8001778 <LineDetect_show+0x16c>)
 800161a:	f000 fc2b 	bl	8001e74 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x40);
 800161e:	20c0      	movs	r0, #192	; 0xc0
 8001620:	f000 fb78 	bl	8001d14 <lcd_send_cmd>
	lcd_send_string("Press C for cancer ");
 8001624:	4855      	ldr	r0, [pc, #340]	; (800177c <LineDetect_show+0x170>)
 8001626:	f000 fc25 	bl	8001e74 <lcd_send_string>
	while (cancer_menu) {
 800162a:	e099      	b.n	8001760 <LineDetect_show+0x154>
		for (int i = 0; i < 6; i++) {
 800162c:	2300      	movs	r3, #0
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	e092      	b.n	8001758 <LineDetect_show+0x14c>
			if (Sensor_ADC_Value[0] > Sensor_Threshold[0]) {
 8001632:	4b53      	ldr	r3, [pc, #332]	; (8001780 <LineDetect_show+0x174>)
 8001634:	881a      	ldrh	r2, [r3, #0]
 8001636:	4b53      	ldr	r3, [pc, #332]	; (8001784 <LineDetect_show+0x178>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d905      	bls.n	800164a <LineDetect_show+0x3e>
				lcd_send_cmd(0x80 | 0x16);
 800163e:	2096      	movs	r0, #150	; 0x96
 8001640:	f000 fb68 	bl	8001d14 <lcd_send_cmd>
				lcd_send_string("1");
 8001644:	4850      	ldr	r0, [pc, #320]	; (8001788 <LineDetect_show+0x17c>)
 8001646:	f000 fc15 	bl	8001e74 <lcd_send_string>
			}
			if (Sensor_ADC_Value[1] > Sensor_Threshold[1]) {
 800164a:	4b4d      	ldr	r3, [pc, #308]	; (8001780 <LineDetect_show+0x174>)
 800164c:	885a      	ldrh	r2, [r3, #2]
 800164e:	4b4d      	ldr	r3, [pc, #308]	; (8001784 <LineDetect_show+0x178>)
 8001650:	885b      	ldrh	r3, [r3, #2]
 8001652:	429a      	cmp	r2, r3
 8001654:	d905      	bls.n	8001662 <LineDetect_show+0x56>
				lcd_send_cmd(0x80 | 0x18);
 8001656:	2098      	movs	r0, #152	; 0x98
 8001658:	f000 fb5c 	bl	8001d14 <lcd_send_cmd>
				lcd_send_string("1");
 800165c:	484a      	ldr	r0, [pc, #296]	; (8001788 <LineDetect_show+0x17c>)
 800165e:	f000 fc09 	bl	8001e74 <lcd_send_string>
			}
			if (Sensor_ADC_Value[2] > Sensor_Threshold[2]) {
 8001662:	4b47      	ldr	r3, [pc, #284]	; (8001780 <LineDetect_show+0x174>)
 8001664:	889a      	ldrh	r2, [r3, #4]
 8001666:	4b47      	ldr	r3, [pc, #284]	; (8001784 <LineDetect_show+0x178>)
 8001668:	889b      	ldrh	r3, [r3, #4]
 800166a:	429a      	cmp	r2, r3
 800166c:	d905      	bls.n	800167a <LineDetect_show+0x6e>
				lcd_send_cmd(0x80 | 0x1A);
 800166e:	209a      	movs	r0, #154	; 0x9a
 8001670:	f000 fb50 	bl	8001d14 <lcd_send_cmd>
				lcd_send_string("1");
 8001674:	4844      	ldr	r0, [pc, #272]	; (8001788 <LineDetect_show+0x17c>)
 8001676:	f000 fbfd 	bl	8001e74 <lcd_send_string>
			}
			if (Sensor_ADC_Value[3] > Sensor_Threshold[3]) {
 800167a:	4b41      	ldr	r3, [pc, #260]	; (8001780 <LineDetect_show+0x174>)
 800167c:	88da      	ldrh	r2, [r3, #6]
 800167e:	4b41      	ldr	r3, [pc, #260]	; (8001784 <LineDetect_show+0x178>)
 8001680:	88db      	ldrh	r3, [r3, #6]
 8001682:	429a      	cmp	r2, r3
 8001684:	d905      	bls.n	8001692 <LineDetect_show+0x86>
				lcd_send_cmd(0x80 | 0x1C);
 8001686:	209c      	movs	r0, #156	; 0x9c
 8001688:	f000 fb44 	bl	8001d14 <lcd_send_cmd>
				lcd_send_string("1");
 800168c:	483e      	ldr	r0, [pc, #248]	; (8001788 <LineDetect_show+0x17c>)
 800168e:	f000 fbf1 	bl	8001e74 <lcd_send_string>
			}
			if (Sensor_ADC_Value[4] > Sensor_Threshold[4]) {
 8001692:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <LineDetect_show+0x174>)
 8001694:	891a      	ldrh	r2, [r3, #8]
 8001696:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <LineDetect_show+0x178>)
 8001698:	891b      	ldrh	r3, [r3, #8]
 800169a:	429a      	cmp	r2, r3
 800169c:	d905      	bls.n	80016aa <LineDetect_show+0x9e>
				lcd_send_cmd(0x80 | 0x1E);
 800169e:	209e      	movs	r0, #158	; 0x9e
 80016a0:	f000 fb38 	bl	8001d14 <lcd_send_cmd>
				lcd_send_string("1");
 80016a4:	4838      	ldr	r0, [pc, #224]	; (8001788 <LineDetect_show+0x17c>)
 80016a6:	f000 fbe5 	bl	8001e74 <lcd_send_string>
			}
			if (Sensor_ADC_Value[5] > Sensor_Threshold[5]) {
 80016aa:	4b35      	ldr	r3, [pc, #212]	; (8001780 <LineDetect_show+0x174>)
 80016ac:	895a      	ldrh	r2, [r3, #10]
 80016ae:	4b35      	ldr	r3, [pc, #212]	; (8001784 <LineDetect_show+0x178>)
 80016b0:	895b      	ldrh	r3, [r3, #10]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d905      	bls.n	80016c2 <LineDetect_show+0xb6>
				lcd_send_cmd(0x80 | 0x20);
 80016b6:	20a0      	movs	r0, #160	; 0xa0
 80016b8:	f000 fb2c 	bl	8001d14 <lcd_send_cmd>
				lcd_send_string("1");
 80016bc:	4832      	ldr	r0, [pc, #200]	; (8001788 <LineDetect_show+0x17c>)
 80016be:	f000 fbd9 	bl	8001e74 <lcd_send_string>
			}
			if (Sensor_ADC_Value[0] < Sensor_Threshold[0]) {
 80016c2:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <LineDetect_show+0x174>)
 80016c4:	881a      	ldrh	r2, [r3, #0]
 80016c6:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <LineDetect_show+0x178>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d205      	bcs.n	80016da <LineDetect_show+0xce>
				lcd_send_cmd(0x80 | 0x16);
 80016ce:	2096      	movs	r0, #150	; 0x96
 80016d0:	f000 fb20 	bl	8001d14 <lcd_send_cmd>
				lcd_send_string(" ");
 80016d4:	482d      	ldr	r0, [pc, #180]	; (800178c <LineDetect_show+0x180>)
 80016d6:	f000 fbcd 	bl	8001e74 <lcd_send_string>
			}
			if (Sensor_ADC_Value[1] < Sensor_Threshold[1]) {
 80016da:	4b29      	ldr	r3, [pc, #164]	; (8001780 <LineDetect_show+0x174>)
 80016dc:	885a      	ldrh	r2, [r3, #2]
 80016de:	4b29      	ldr	r3, [pc, #164]	; (8001784 <LineDetect_show+0x178>)
 80016e0:	885b      	ldrh	r3, [r3, #2]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d205      	bcs.n	80016f2 <LineDetect_show+0xe6>
				lcd_send_cmd(0x80 | 0x18);
 80016e6:	2098      	movs	r0, #152	; 0x98
 80016e8:	f000 fb14 	bl	8001d14 <lcd_send_cmd>
				lcd_send_string(" ");
 80016ec:	4827      	ldr	r0, [pc, #156]	; (800178c <LineDetect_show+0x180>)
 80016ee:	f000 fbc1 	bl	8001e74 <lcd_send_string>
			}
			if (Sensor_ADC_Value[2] < Sensor_Threshold[2]) {
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <LineDetect_show+0x174>)
 80016f4:	889a      	ldrh	r2, [r3, #4]
 80016f6:	4b23      	ldr	r3, [pc, #140]	; (8001784 <LineDetect_show+0x178>)
 80016f8:	889b      	ldrh	r3, [r3, #4]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d205      	bcs.n	800170a <LineDetect_show+0xfe>
				lcd_send_cmd(0x80 | 0x1A);
 80016fe:	209a      	movs	r0, #154	; 0x9a
 8001700:	f000 fb08 	bl	8001d14 <lcd_send_cmd>
				lcd_send_string(" ");
 8001704:	4821      	ldr	r0, [pc, #132]	; (800178c <LineDetect_show+0x180>)
 8001706:	f000 fbb5 	bl	8001e74 <lcd_send_string>
			}
			if (Sensor_ADC_Value[3] < Sensor_Threshold[3]) {
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <LineDetect_show+0x174>)
 800170c:	88da      	ldrh	r2, [r3, #6]
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <LineDetect_show+0x178>)
 8001710:	88db      	ldrh	r3, [r3, #6]
 8001712:	429a      	cmp	r2, r3
 8001714:	d205      	bcs.n	8001722 <LineDetect_show+0x116>
				lcd_send_cmd(0x80 | 0x1C);
 8001716:	209c      	movs	r0, #156	; 0x9c
 8001718:	f000 fafc 	bl	8001d14 <lcd_send_cmd>
				lcd_send_string(" ");
 800171c:	481b      	ldr	r0, [pc, #108]	; (800178c <LineDetect_show+0x180>)
 800171e:	f000 fba9 	bl	8001e74 <lcd_send_string>
			}
			if (Sensor_ADC_Value[4] < Sensor_Threshold[4]) {
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <LineDetect_show+0x174>)
 8001724:	891a      	ldrh	r2, [r3, #8]
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <LineDetect_show+0x178>)
 8001728:	891b      	ldrh	r3, [r3, #8]
 800172a:	429a      	cmp	r2, r3
 800172c:	d205      	bcs.n	800173a <LineDetect_show+0x12e>
				lcd_send_cmd(0x80 | 0x1E);
 800172e:	209e      	movs	r0, #158	; 0x9e
 8001730:	f000 faf0 	bl	8001d14 <lcd_send_cmd>
				lcd_send_string(" ");
 8001734:	4815      	ldr	r0, [pc, #84]	; (800178c <LineDetect_show+0x180>)
 8001736:	f000 fb9d 	bl	8001e74 <lcd_send_string>
			}
			if (Sensor_ADC_Value[5] < Sensor_Threshold[5]) {
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <LineDetect_show+0x174>)
 800173c:	895a      	ldrh	r2, [r3, #10]
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <LineDetect_show+0x178>)
 8001740:	895b      	ldrh	r3, [r3, #10]
 8001742:	429a      	cmp	r2, r3
 8001744:	d205      	bcs.n	8001752 <LineDetect_show+0x146>
				lcd_send_cmd(0x80 | 0x20);
 8001746:	20a0      	movs	r0, #160	; 0xa0
 8001748:	f000 fae4 	bl	8001d14 <lcd_send_cmd>
				lcd_send_string(" ");
 800174c:	480f      	ldr	r0, [pc, #60]	; (800178c <LineDetect_show+0x180>)
 800174e:	f000 fb91 	bl	8001e74 <lcd_send_string>
		for (int i = 0; i < 6; i++) {
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3301      	adds	r3, #1
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b05      	cmp	r3, #5
 800175c:	f77f af69 	ble.w	8001632 <LineDetect_show+0x26>
	while (cancer_menu) {
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <LineDetect_show+0x184>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	f47f af61 	bne.w	800162c <LineDetect_show+0x20>
			}
		}
	}
	lcd_clear();
 800176a:	f000 fb33 	bl	8001dd4 <lcd_clear>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	0800b188 	.word	0x0800b188
 800177c:	0800b19c 	.word	0x0800b19c
 8001780:	2000036c 	.word	0x2000036c
 8001784:	2000000c 	.word	0x2000000c
 8001788:	0800b1b0 	.word	0x0800b1b0
 800178c:	0800b1b4 	.word	0x0800b1b4
 8001790:	20000004 	.word	0x20000004

08001794 <Running>:
void Running(void) // Activate the car for running
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	while (cancer_running) {
 8001798:	e00b      	b.n	80017b2 <Running+0x1e>
		lcd_send_cmd(0x80 | 0x00);
 800179a:	2080      	movs	r0, #128	; 0x80
 800179c:	f000 faba 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string("Car is Running!        ");
 80017a0:	4808      	ldr	r0, [pc, #32]	; (80017c4 <Running+0x30>)
 80017a2:	f000 fb67 	bl	8001e74 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 80017a6:	20c0      	movs	r0, #192	; 0xc0
 80017a8:	f000 fab4 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string("Press C for cancer     ");
 80017ac:	4806      	ldr	r0, [pc, #24]	; (80017c8 <Running+0x34>)
 80017ae:	f000 fb61 	bl	8001e74 <lcd_send_string>
	while (cancer_running) {
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <Running+0x38>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ef      	bne.n	800179a <Running+0x6>
	}
	lcd_clear();
 80017ba:	f000 fb0b 	bl	8001dd4 <lcd_clear>
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	0800b1b8 	.word	0x0800b1b8
 80017c8:	0800b1d0 	.word	0x0800b1d0
 80017cc:	20000005 	.word	0x20000005

080017d0 <Saving_Process>:
void Saving_Process(void)
{
 80017d0:	b598      	push	{r3, r4, r7, lr}
 80017d2:	af00      	add	r7, sp, #0
		sprintf(kp_val,"%.2f ",Kp);
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <Saving_Process+0x7c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe febd 	bl	8000558 <__aeabi_f2d>
 80017de:	4603      	mov	r3, r0
 80017e0:	460c      	mov	r4, r1
 80017e2:	461a      	mov	r2, r3
 80017e4:	4623      	mov	r3, r4
 80017e6:	491a      	ldr	r1, [pc, #104]	; (8001850 <Saving_Process+0x80>)
 80017e8:	481a      	ldr	r0, [pc, #104]	; (8001854 <Saving_Process+0x84>)
 80017ea:	f006 fca7 	bl	800813c <siprintf>
		strcat(string,kp_val);
 80017ee:	4919      	ldr	r1, [pc, #100]	; (8001854 <Saving_Process+0x84>)
 80017f0:	4819      	ldr	r0, [pc, #100]	; (8001858 <Saving_Process+0x88>)
 80017f2:	f006 fcc3 	bl	800817c <strcat>
		sprintf(ki_val,"%.2f ",Ki);
 80017f6:	4b19      	ldr	r3, [pc, #100]	; (800185c <Saving_Process+0x8c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe feac 	bl	8000558 <__aeabi_f2d>
 8001800:	4603      	mov	r3, r0
 8001802:	460c      	mov	r4, r1
 8001804:	461a      	mov	r2, r3
 8001806:	4623      	mov	r3, r4
 8001808:	4911      	ldr	r1, [pc, #68]	; (8001850 <Saving_Process+0x80>)
 800180a:	4815      	ldr	r0, [pc, #84]	; (8001860 <Saving_Process+0x90>)
 800180c:	f006 fc96 	bl	800813c <siprintf>
		strcat(string,ki_val);
 8001810:	4913      	ldr	r1, [pc, #76]	; (8001860 <Saving_Process+0x90>)
 8001812:	4811      	ldr	r0, [pc, #68]	; (8001858 <Saving_Process+0x88>)
 8001814:	f006 fcb2 	bl	800817c <strcat>
		sprintf(kd_val,"%.2f ",Kd);
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <Saving_Process+0x94>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe9b 	bl	8000558 <__aeabi_f2d>
 8001822:	4603      	mov	r3, r0
 8001824:	460c      	mov	r4, r1
 8001826:	461a      	mov	r2, r3
 8001828:	4623      	mov	r3, r4
 800182a:	4909      	ldr	r1, [pc, #36]	; (8001850 <Saving_Process+0x80>)
 800182c:	480e      	ldr	r0, [pc, #56]	; (8001868 <Saving_Process+0x98>)
 800182e:	f006 fc85 	bl	800813c <siprintf>
		strcat(string,kd_val);
 8001832:	490d      	ldr	r1, [pc, #52]	; (8001868 <Saving_Process+0x98>)
 8001834:	4808      	ldr	r0, [pc, #32]	; (8001858 <Saving_Process+0x88>)
 8001836:	f006 fca1 	bl	800817c <strcat>
		Flash_Write_Data(0x08020000, string);
 800183a:	4907      	ldr	r1, [pc, #28]	; (8001858 <Saving_Process+0x88>)
 800183c:	480b      	ldr	r0, [pc, #44]	; (800186c <Saving_Process+0x9c>)
 800183e:	f000 f99d 	bl	8001b7c <Flash_Write_Data>
		HAL_NVIC_SystemReset();
 8001842:	f002 fbde 	bl	8004002 <HAL_NVIC_SystemReset>
}
 8001846:	bf00      	nop
 8001848:	bd98      	pop	{r3, r4, r7, pc}
 800184a:	bf00      	nop
 800184c:	2000022c 	.word	0x2000022c
 8001850:	0800b1e8 	.word	0x0800b1e8
 8001854:	20000378 	.word	0x20000378
 8001858:	20000284 	.word	0x20000284
 800185c:	20000230 	.word	0x20000230
 8001860:	20000458 	.word	0x20000458
 8001864:	20000234 	.word	0x20000234
 8001868:	20000360 	.word	0x20000360
 800186c:	08020000 	.word	0x08020000

08001870 <Wifi_Connect_establish>:
void Wifi_Connect_establish(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
		for (int i = 0; i < 5; i++) {
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	e022      	b.n	80018c2 <Wifi_Connect_establish+0x52>
			lcd_send_cmd(0x80 | 0x00);
 800187c:	2080      	movs	r0, #128	; 0x80
 800187e:	f000 fa49 	bl	8001d14 <lcd_send_cmd>
			lcd_send_string("Connecting .       ");
 8001882:	481c      	ldr	r0, [pc, #112]	; (80018f4 <Wifi_Connect_establish+0x84>)
 8001884:	f000 faf6 	bl	8001e74 <lcd_send_string>
			HAL_Delay(500);
 8001888:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800188c:	f001 fd54 	bl	8003338 <HAL_Delay>
			lcd_send_cmd(0x80 | 0x00);
 8001890:	2080      	movs	r0, #128	; 0x80
 8001892:	f000 fa3f 	bl	8001d14 <lcd_send_cmd>
			lcd_send_string("Connecting . .     ");
 8001896:	4818      	ldr	r0, [pc, #96]	; (80018f8 <Wifi_Connect_establish+0x88>)
 8001898:	f000 faec 	bl	8001e74 <lcd_send_string>
			HAL_Delay(500);
 800189c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018a0:	f001 fd4a 	bl	8003338 <HAL_Delay>
			lcd_send_cmd(0x80 | 0x00);
 80018a4:	2080      	movs	r0, #128	; 0x80
 80018a6:	f000 fa35 	bl	8001d14 <lcd_send_cmd>
			lcd_send_string("Connecting . . .   ");
 80018aa:	4814      	ldr	r0, [pc, #80]	; (80018fc <Wifi_Connect_establish+0x8c>)
 80018ac:	f000 fae2 	bl	8001e74 <lcd_send_string>
			HAL_Delay(500);
 80018b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018b4:	f001 fd40 	bl	8003338 <HAL_Delay>
			lcd_clear();
 80018b8:	f000 fa8c 	bl	8001dd4 <lcd_clear>
		for (int i = 0; i < 5; i++) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3301      	adds	r3, #1
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	ddd9      	ble.n	800187c <Wifi_Connect_establish+0xc>
		}
		HAL_Delay(100);
 80018c8:	2064      	movs	r0, #100	; 0x64
 80018ca:	f001 fd35 	bl	8003338 <HAL_Delay>
		lcd_send_cmd(0x80 | 0x00);
 80018ce:	2080      	movs	r0, #128	; 0x80
 80018d0:	f000 fa20 	bl	8001d14 <lcd_send_cmd>
		lcd_send_string("Done               ");
 80018d4:	480a      	ldr	r0, [pc, #40]	; (8001900 <Wifi_Connect_establish+0x90>)
 80018d6:	f000 facd 	bl	8001e74 <lcd_send_string>
		HAL_Delay(500);
 80018da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018de:	f001 fd2b 	bl	8003338 <HAL_Delay>
		Menu_type = Main_menu;
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <Wifi_Connect_establish+0x94>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 80018e8:	f000 fa74 	bl	8001dd4 <lcd_clear>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	0800b1f0 	.word	0x0800b1f0
 80018f8:	0800b204 	.word	0x0800b204
 80018fc:	0800b218 	.word	0x0800b218
 8001900:	0800b174 	.word	0x0800b174
 8001904:	20000001 	.word	0x20000001

08001908 <executeAction>:
void executeAction(uint8_t line) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
	switch (line) {
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	3b01      	subs	r3, #1
 8001916:	2b06      	cmp	r3, #6
 8001918:	f200 80b8 	bhi.w	8001a8c <executeAction+0x184>
 800191c:	a201      	add	r2, pc, #4	; (adr r2, 8001924 <executeAction+0x1c>)
 800191e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001922:	bf00      	nop
 8001924:	08001941 	.word	0x08001941
 8001928:	0800199d 	.word	0x0800199d
 800192c:	080019f3 	.word	0x080019f3
 8001930:	08001a35 	.word	0x08001a35
 8001934:	08001a59 	.word	0x08001a59
 8001938:	08001a75 	.word	0x08001a75
 800193c:	08001a81 	.word	0x08001a81
	case 1:
		switch (Menu_type) {
 8001940:	4b54      	ldr	r3, [pc, #336]	; (8001a94 <executeAction+0x18c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d00a      	beq.n	800195e <executeAction+0x56>
 8001948:	2b04      	cmp	r3, #4
 800194a:	d016      	beq.n	800197a <executeAction+0x72>
 800194c:	2b01      	cmp	r3, #1
 800194e:	d122      	bne.n	8001996 <executeAction+0x8e>
		case Main_menu:
			cancer_running = 1;
 8001950:	4b51      	ldr	r3, [pc, #324]	; (8001a98 <executeAction+0x190>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
			Menu_type = Running_Process;
 8001956:	4b4f      	ldr	r3, [pc, #316]	; (8001a94 <executeAction+0x18c>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
			break;
 800195c:	e01b      	b.n	8001996 <executeAction+0x8e>
		case PID_Menu:
			if (Kp_modify_flag == 0) {
 800195e:	4b4f      	ldr	r3, [pc, #316]	; (8001a9c <executeAction+0x194>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d105      	bne.n	8001972 <executeAction+0x6a>
				Kp_modify_flag = 1;
 8001966:	4b4d      	ldr	r3, [pc, #308]	; (8001a9c <executeAction+0x194>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
				line = 1;
 800196c:	2301      	movs	r3, #1
 800196e:	71fb      	strb	r3, [r7, #7]
			} else {
				Kp_modify_flag = 0;
			}
			break;
 8001970:	e011      	b.n	8001996 <executeAction+0x8e>
				Kp_modify_flag = 0;
 8001972:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <executeAction+0x194>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
			break;
 8001978:	e00d      	b.n	8001996 <executeAction+0x8e>
		case Engine_menu:
			if (Left_modify_flag == 0) {
 800197a:	4b49      	ldr	r3, [pc, #292]	; (8001aa0 <executeAction+0x198>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d105      	bne.n	800198e <executeAction+0x86>
				Left_modify_flag = 1;
 8001982:	4b47      	ldr	r3, [pc, #284]	; (8001aa0 <executeAction+0x198>)
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
				line = 1;
 8001988:	2301      	movs	r3, #1
 800198a:	71fb      	strb	r3, [r7, #7]
			} else {
				Left_modify_flag = 0;
			}
			break;
 800198c:	e002      	b.n	8001994 <executeAction+0x8c>
				Left_modify_flag = 0;
 800198e:	4b44      	ldr	r3, [pc, #272]	; (8001aa0 <executeAction+0x198>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
			break;
 8001994:	bf00      	nop

		}
		lcd_clear();
 8001996:	f000 fa1d 	bl	8001dd4 <lcd_clear>
		break;
 800199a:	e077      	b.n	8001a8c <executeAction+0x184>

	case 2:
		switch (Menu_type) {
 800199c:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <executeAction+0x18c>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d007      	beq.n	80019b4 <executeAction+0xac>
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d013      	beq.n	80019d0 <executeAction+0xc8>
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d11f      	bne.n	80019ec <executeAction+0xe4>
		case Main_menu:
			Menu_type = Color_Processing;
 80019ac:	4b39      	ldr	r3, [pc, #228]	; (8001a94 <executeAction+0x18c>)
 80019ae:	2202      	movs	r2, #2
 80019b0:	701a      	strb	r2, [r3, #0]
			break;
 80019b2:	e01b      	b.n	80019ec <executeAction+0xe4>
		case PID_Menu:
			if (Ki_modify_flag == 0) {
 80019b4:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <executeAction+0x19c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d105      	bne.n	80019c8 <executeAction+0xc0>
				Ki_modify_flag = 1;
 80019bc:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <executeAction+0x19c>)
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
				line = 2;
 80019c2:	2302      	movs	r3, #2
 80019c4:	71fb      	strb	r3, [r7, #7]
			} else {
				Ki_modify_flag = 0;
			}
			break;
 80019c6:	e011      	b.n	80019ec <executeAction+0xe4>
				Ki_modify_flag = 0;
 80019c8:	4b36      	ldr	r3, [pc, #216]	; (8001aa4 <executeAction+0x19c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
			break;
 80019ce:	e00d      	b.n	80019ec <executeAction+0xe4>
		case Engine_menu:
			if (Right_modify_flag == 0) {
 80019d0:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <executeAction+0x1a0>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <executeAction+0xdc>
				Right_modify_flag = 1;
 80019d8:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <executeAction+0x1a0>)
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
				line = 2;
 80019de:	2302      	movs	r3, #2
 80019e0:	71fb      	strb	r3, [r7, #7]
			} else {
				Right_modify_flag = 0;
			}
			break;
 80019e2:	e002      	b.n	80019ea <executeAction+0xe2>
				Right_modify_flag = 0;
 80019e4:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <executeAction+0x1a0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
			break;
 80019ea:	bf00      	nop
		}
		lcd_clear();
 80019ec:	f000 f9f2 	bl	8001dd4 <lcd_clear>
		break;
 80019f0:	e04c      	b.n	8001a8c <executeAction+0x184>

	case 3:
		switch (Menu_type) {
 80019f2:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <executeAction+0x18c>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d007      	beq.n	8001a0a <executeAction+0x102>
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d013      	beq.n	8001a26 <executeAction+0x11e>
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d115      	bne.n	8001a2e <executeAction+0x126>
		case Main_menu:
			Menu_type = PID_Menu;
 8001a02:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <executeAction+0x18c>)
 8001a04:	2203      	movs	r2, #3
 8001a06:	701a      	strb	r2, [r3, #0]
			break;
 8001a08:	e011      	b.n	8001a2e <executeAction+0x126>
		case PID_Menu:
			if (Kd_modify_flag == 0) {
 8001a0a:	4b28      	ldr	r3, [pc, #160]	; (8001aac <executeAction+0x1a4>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d105      	bne.n	8001a1e <executeAction+0x116>
				Kd_modify_flag = 1;
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <executeAction+0x1a4>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
				line = 3;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	71fb      	strb	r3, [r7, #7]
			} else {
				Kd_modify_flag = 0;
			}
			break;
 8001a1c:	e007      	b.n	8001a2e <executeAction+0x126>
				Kd_modify_flag = 0;
 8001a1e:	4b23      	ldr	r3, [pc, #140]	; (8001aac <executeAction+0x1a4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
			break;
 8001a24:	e003      	b.n	8001a2e <executeAction+0x126>
		case Engine_menu:
			Menu_type = Main_menu;
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <executeAction+0x18c>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
			break;
 8001a2c:	bf00      	nop

		}
		lcd_clear();
 8001a2e:	f000 f9d1 	bl	8001dd4 <lcd_clear>
		break;
 8001a32:	e02b      	b.n	8001a8c <executeAction+0x184>

	case 4:
		switch (Menu_type) {
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <executeAction+0x18c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d002      	beq.n	8001a42 <executeAction+0x13a>
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d004      	beq.n	8001a4a <executeAction+0x142>
 8001a40:	e007      	b.n	8001a52 <executeAction+0x14a>
		case Main_menu:
			Menu_type = Engine_menu;
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <executeAction+0x18c>)
 8001a44:	2204      	movs	r2, #4
 8001a46:	701a      	strb	r2, [r3, #0]
			break;
 8001a48:	e003      	b.n	8001a52 <executeAction+0x14a>
		case PID_Menu:
			Menu_type = Main_menu;
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <executeAction+0x18c>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
			break;
 8001a50:	bf00      	nop
		}
		lcd_clear();
 8001a52:	f000 f9bf 	bl	8001dd4 <lcd_clear>
		break;
 8001a56:	e019      	b.n	8001a8c <executeAction+0x184>

	case 5:
		switch (Menu_type) {
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <executeAction+0x18c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d106      	bne.n	8001a6e <executeAction+0x166>
		case Main_menu:
			cancer_menu = 1;
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <executeAction+0x1a8>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
			Menu_type = LineDetect_Show;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <executeAction+0x18c>)
 8001a68:	2205      	movs	r2, #5
 8001a6a:	701a      	strb	r2, [r3, #0]
			break;
 8001a6c:	bf00      	nop
		}
		lcd_clear();
 8001a6e:	f000 f9b1 	bl	8001dd4 <lcd_clear>
		break;
 8001a72:	e00b      	b.n	8001a8c <executeAction+0x184>

	case 6:
		Saving_Process();
 8001a74:	f7ff feac 	bl	80017d0 <Saving_Process>
		Menu_type = Main_menu;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <executeAction+0x18c>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]
		break;
 8001a7e:	e005      	b.n	8001a8c <executeAction+0x184>

	case 7:
		Menu_type = Wifi_connect;
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <executeAction+0x18c>)
 8001a82:	2206      	movs	r2, #6
 8001a84:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001a86:	f000 f9a5 	bl	8001dd4 <lcd_clear>
		break;
 8001a8a:	bf00      	nop
	}
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000001 	.word	0x20000001
 8001a98:	20000005 	.word	0x20000005
 8001a9c:	20000224 	.word	0x20000224
 8001aa0:	20000227 	.word	0x20000227
 8001aa4:	20000225 	.word	0x20000225
 8001aa8:	20000228 	.word	0x20000228
 8001aac:	20000226 	.word	0x20000226
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  None
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a23      	ldr	r2, [pc, #140]	; (8001b50 <GetSector+0x9c>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d806      	bhi.n	8001ad6 <GetSector+0x22>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ace:	d302      	bcc.n	8001ad6 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	e035      	b.n	8001b42 <GetSector+0x8e>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a1e      	ldr	r2, [pc, #120]	; (8001b54 <GetSector+0xa0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d806      	bhi.n	8001aec <GetSector+0x38>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a1d      	ldr	r2, [pc, #116]	; (8001b58 <GetSector+0xa4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d902      	bls.n	8001aec <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	e02a      	b.n	8001b42 <GetSector+0x8e>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <GetSector+0xa8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d806      	bhi.n	8001b02 <GetSector+0x4e>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a1a      	ldr	r2, [pc, #104]	; (8001b60 <GetSector+0xac>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d902      	bls.n	8001b02 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8001afc:	2302      	movs	r3, #2
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	e01f      	b.n	8001b42 <GetSector+0x8e>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <GetSector+0xb0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d806      	bhi.n	8001b18 <GetSector+0x64>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a16      	ldr	r2, [pc, #88]	; (8001b68 <GetSector+0xb4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d902      	bls.n	8001b18 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001b12:	2303      	movs	r3, #3
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	e014      	b.n	8001b42 <GetSector+0x8e>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <GetSector+0xb8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d806      	bhi.n	8001b2e <GetSector+0x7a>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a13      	ldr	r2, [pc, #76]	; (8001b70 <GetSector+0xbc>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d902      	bls.n	8001b2e <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8001b28:	2304      	movs	r3, #4
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	e009      	b.n	8001b42 <GetSector+0x8e>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <GetSector+0xc0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d805      	bhi.n	8001b42 <GetSector+0x8e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <GetSector+0xc4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <GetSector+0x8e>
  {
    sector = FLASH_SECTOR_5;
 8001b3e:	2305      	movs	r3, #5
 8001b40:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	08003ffe 	.word	0x08003ffe
 8001b54:	08007ffe 	.word	0x08007ffe
 8001b58:	08003fff 	.word	0x08003fff
 8001b5c:	0800bffe 	.word	0x0800bffe
 8001b60:	08007fff 	.word	0x08007fff
 8001b64:	0800fffe 	.word	0x0800fffe
 8001b68:	0800bfff 	.word	0x0800bfff
 8001b6c:	0801fffe 	.word	0x0801fffe
 8001b70:	0800ffff 	.word	0x0800ffff
 8001b74:	0803fffe 	.word	0x0803fffe
 8001b78:	0801ffff 	.word	0x0801ffff

08001b7c <Flash_Write_Data>:
}*/



uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t * DATA_32)
{
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b089      	sub	sp, #36	; 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]

	int numberofwords = (strlen(DATA_32)/4) + ((strlen(DATA_32) % 4) != 0);
 8001b8a:	6838      	ldr	r0, [r7, #0]
 8001b8c:	f7fe fb28 	bl	80001e0 <strlen>
 8001b90:	4603      	mov	r3, r0
 8001b92:	089c      	lsrs	r4, r3, #2
 8001b94:	6838      	ldr	r0, [r7, #0]
 8001b96:	f7fe fb23 	bl	80001e0 <strlen>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf14      	ite	ne
 8001ba4:	2301      	movne	r3, #1
 8001ba6:	2300      	moveq	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	4423      	add	r3, r4
 8001bac:	61bb      	str	r3, [r7, #24]


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8001bae:	f002 fdfb 	bl	80047a8 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff7e 	bl	8001ab4 <GetSector>
 8001bb8:	6178      	str	r0, [r7, #20]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001bc6:	6938      	ldr	r0, [r7, #16]
 8001bc8:	f7ff ff74 	bl	8001ab4 <GetSector>
 8001bcc:	60f8      	str	r0, [r7, #12]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <Flash_Write_Data+0xd8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001bd4:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <Flash_Write_Data+0xd8>)
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8001bda:	4a1e      	ldr	r2, [pc, #120]	; (8001c54 <Flash_Write_Data+0xd8>)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	3301      	adds	r3, #1
 8001be8:	4a1a      	ldr	r2, [pc, #104]	; (8001c54 <Flash_Write_Data+0xd8>)
 8001bea:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8001bec:	f107 0308 	add.w	r3, r7, #8
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4818      	ldr	r0, [pc, #96]	; (8001c54 <Flash_Write_Data+0xd8>)
 8001bf4:	f002 ff54 	bl	8004aa0 <HAL_FLASHEx_Erase>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d01e      	beq.n	8001c3c <Flash_Write_Data+0xc0>
	  {
		  return HAL_FLASH_GetError ();
 8001bfe:	f002 fe05 	bl	800480c <HAL_FLASH_GetError>
 8001c02:	4603      	mov	r3, r0
 8001c04:	e021      	b.n	8001c4a <Flash_Write_Data+0xce>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, DATA_32[sofar]) == HAL_OK)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f04f 0400 	mov.w	r4, #0
 8001c14:	461a      	mov	r2, r3
 8001c16:	4623      	mov	r3, r4
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	2002      	movs	r0, #2
 8001c1c:	f002 fd70 	bl	8004700 <HAL_FLASH_Program>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d106      	bne.n	8001c34 <Flash_Write_Data+0xb8>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	607b      	str	r3, [r7, #4]
	    	 sofar++;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e003      	b.n	8001c3c <Flash_Write_Data+0xc0>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001c34:	f002 fdea 	bl	800480c <HAL_FLASH_GetError>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	e006      	b.n	8001c4a <Flash_Write_Data+0xce>
	   while (sofar<numberofwords)
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbe0      	blt.n	8001c06 <Flash_Write_Data+0x8a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001c44:	f002 fdd2 	bl	80047ec <HAL_FLASH_Lock>

	   return 0;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd90      	pop	{r4, r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000210 	.word	0x20000210

08001c58 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, __IO uint32_t * DATA_32)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
	while (1)
	{

		*DATA_32 = *(__IO uint32_t *)StartSectorAddress;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	601a      	str	r2, [r3, #0]
		if (*DATA_32 == 0xffffffff)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c72:	d103      	bne.n	8001c7c <Flash_Read_Data+0x24>
		{
			*DATA_32 = '\0';
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
			break;
 8001c7a:	e006      	b.n	8001c8a <Flash_Read_Data+0x32>
		}
		StartSectorAddress += 4;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3304      	adds	r3, #4
 8001c80:	607b      	str	r3, [r7, #4]
		DATA_32++;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	3304      	adds	r3, #4
 8001c86:	603b      	str	r3, [r7, #0]
		*DATA_32 = *(__IO uint32_t *)StartSectorAddress;
 8001c88:	e7eb      	b.n	8001c62 <Flash_Read_Data+0xa>
	}
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <Convert_To_Str>:

void Convert_To_Str (uint32_t *data, char *str)
{
 8001c96:	b590      	push	{r4, r7, lr}
 8001c98:	b085      	sub	sp, #20
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	6039      	str	r1, [r7, #0]
	int numberofbytes = ((strlen(data)/4) + ((strlen(data) % 4) != 0)) *4;
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7fe fa9d 	bl	80001e0 <strlen>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	089c      	lsrs	r4, r3, #2
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe fa98 	bl	80001e0 <strlen>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	bf14      	ite	ne
 8001cba:	2301      	movne	r3, #1
 8001cbc:	2300      	moveq	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4423      	add	r3, r4
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numberofbytes; i++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	e01b      	b.n	8001d04 <Convert_To_Str+0x6e>
	{
		str[i] = data[i/4]>>(8*(i%4));
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	da00      	bge.n	8001cd4 <Convert_To_Str+0x3e>
 8001cd2:	3303      	adds	r3, #3
 8001cd4:	109b      	asrs	r3, r3, #2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4259      	negs	r1, r3
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	f001 0103 	and.w	r1, r1, #3
 8001cea:	bf58      	it	pl
 8001cec:	424b      	negpl	r3, r1
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	fa22 f103 	lsr.w	r1, r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b2ca      	uxtb	r2, r1
 8001cfc:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<numberofbytes; i++)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3301      	adds	r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	dbdf      	blt.n	8001ccc <Convert_To_Str+0x36>
	}
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd90      	pop	{r4, r7, pc}

08001d14 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c3;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f023 030f 	bic.w	r3, r3, #15
 8001d24:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	f043 030c 	orr.w	r3, r3, #12
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	f043 0308 	orr.w	r3, r3, #8
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001d40:	7bbb      	ldrb	r3, [r7, #14]
 8001d42:	f043 030c 	orr.w	r3, r3, #12
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001d4a:	7bbb      	ldrb	r3, [r7, #14]
 8001d4c:	f043 0308 	orr.w	r3, r3, #8
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d54:	f107 0208 	add.w	r2, r7, #8
 8001d58:	2364      	movs	r3, #100	; 0x64
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	214e      	movs	r1, #78	; 0x4e
 8001d60:	4803      	ldr	r0, [pc, #12]	; (8001d70 <lcd_send_cmd+0x5c>)
 8001d62:	f003 fac3 	bl	80052ec <HAL_I2C_Master_Transmit>
}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200002cc 	.word	0x200002cc

08001d74 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f023 030f 	bic.w	r3, r3, #15
 8001d84:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	f043 030d 	orr.w	r3, r3, #13
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	f043 0309 	orr.w	r3, r3, #9
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001da0:	7bbb      	ldrb	r3, [r7, #14]
 8001da2:	f043 030d 	orr.w	r3, r3, #13
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001daa:	7bbb      	ldrb	r3, [r7, #14]
 8001dac:	f043 0309 	orr.w	r3, r3, #9
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001db4:	f107 0208 	add.w	r2, r7, #8
 8001db8:	2364      	movs	r3, #100	; 0x64
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	214e      	movs	r1, #78	; 0x4e
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <lcd_send_data+0x5c>)
 8001dc2:	f003 fa93 	bl	80052ec <HAL_I2C_Master_Transmit>
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200002cc 	.word	0x200002cc

08001dd4 <lcd_clear>:

void lcd_clear (void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7ff ff9a 	bl	8001d14 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	e005      	b.n	8001df2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001de6:	2020      	movs	r0, #32
 8001de8:	f7ff ffc4 	bl	8001d74 <lcd_send_data>
	for (int i=0; i<100; i++)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3301      	adds	r3, #1
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b63      	cmp	r3, #99	; 0x63
 8001df6:	ddf6      	ble.n	8001de6 <lcd_clear+0x12>
	}
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <lcd_init>:

void lcd_init (void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001e04:	2032      	movs	r0, #50	; 0x32
 8001e06:	f001 fa97 	bl	8003338 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001e0a:	2030      	movs	r0, #48	; 0x30
 8001e0c:	f7ff ff82 	bl	8001d14 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001e10:	2005      	movs	r0, #5
 8001e12:	f001 fa91 	bl	8003338 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001e16:	2030      	movs	r0, #48	; 0x30
 8001e18:	f7ff ff7c 	bl	8001d14 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	f001 fa8b 	bl	8003338 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001e22:	2030      	movs	r0, #48	; 0x30
 8001e24:	f7ff ff76 	bl	8001d14 <lcd_send_cmd>
	HAL_Delay(10);
 8001e28:	200a      	movs	r0, #10
 8001e2a:	f001 fa85 	bl	8003338 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001e2e:	2020      	movs	r0, #32
 8001e30:	f7ff ff70 	bl	8001d14 <lcd_send_cmd>
	HAL_Delay(10);
 8001e34:	200a      	movs	r0, #10
 8001e36:	f001 fa7f 	bl	8003338 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001e3a:	2028      	movs	r0, #40	; 0x28
 8001e3c:	f7ff ff6a 	bl	8001d14 <lcd_send_cmd>
	HAL_Delay(1);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f001 fa79 	bl	8003338 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001e46:	2008      	movs	r0, #8
 8001e48:	f7ff ff64 	bl	8001d14 <lcd_send_cmd>
	HAL_Delay(1);
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	f001 fa73 	bl	8003338 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001e52:	2001      	movs	r0, #1
 8001e54:	f7ff ff5e 	bl	8001d14 <lcd_send_cmd>
	HAL_Delay(1);
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f001 fa6d 	bl	8003338 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001e5e:	2006      	movs	r0, #6
 8001e60:	f7ff ff58 	bl	8001d14 <lcd_send_cmd>
	HAL_Delay(1);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f001 fa67 	bl	8003338 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001e6a:	200c      	movs	r0, #12
 8001e6c:	f7ff ff52 	bl	8001d14 <lcd_send_cmd>
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001e7c:	e006      	b.n	8001e8c <lcd_send_string+0x18>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ff74 	bl	8001d74 <lcd_send_data>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f4      	bne.n	8001e7e <lcd_send_string+0xa>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <MotorL_EnablePWM>:
 *  Created on: Apr 29, 2021
 *      Author: Duc Thang
 */
#include "HAL_MOTOR_CONTROL.h"
void MotorL_EnablePWM(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001ea0:	2108      	movs	r1, #8
 8001ea2:	4802      	ldr	r0, [pc, #8]	; (8001eac <MotorL_EnablePWM+0x10>)
 8001ea4:	f004 fa32 	bl	800630c <HAL_TIM_PWM_Start>
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200003c4 	.word	0x200003c4

08001eb0 <MotorR_EnablePWM>:
void MotorL_DisablePWM(void)
{
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
}
void MotorR_EnablePWM(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001eb4:	210c      	movs	r1, #12
 8001eb6:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <MotorR_EnablePWM+0x10>)
 8001eb8:	f004 fa28 	bl	800630c <HAL_TIM_PWM_Start>
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200003c4 	.word	0x200003c4

08001ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec8:	f001 f9c4 	bl	8003254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ecc:	f000 f83e 	bl	8001f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ed0:	f000 fb10 	bl	80024f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ed4:	f000 faee 	bl	80024b4 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8001ed8:	f000 fac2 	bl	8002460 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8001edc:	f000 f966 	bl	80021ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ee0:	f000 f9b8 	bl	8002254 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001ee4:	f000 f89c 	bl	8002020 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001ee8:	f000 fa18 	bl	800231c <MX_TIM4_Init>
  MX_I2C3_Init();
 8001eec:	f000 f930 	bl	8002150 <MX_I2C3_Init>
  MX_TIM5_Init();
 8001ef0:	f000 fa68 	bl	80023c4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001ef4:	f7ff ff84 	bl	8001e00 <lcd_init>
  MotorL_EnablePWM();
 8001ef8:	f7ff ffd0 	bl	8001e9c <MotorL_EnablePWM>
  MotorR_EnablePWM();
 8001efc:	f7ff ffd8 	bl	8001eb0 <MotorR_EnablePWM>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &Sensor_ADC_Value, 6);
 8001f00:	2206      	movs	r2, #6
 8001f02:	490d      	ldr	r1, [pc, #52]	; (8001f38 <main+0x74>)
 8001f04:	480d      	ldr	r0, [pc, #52]	; (8001f3c <main+0x78>)
 8001f06:	f001 fbbd 	bl	8003684 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		ReadFlash();
 8001f0a:	f000 fe0f 	bl	8002b2c <ReadFlash>
		lcd_clear();
 8001f0e:	f7ff ff61 	bl	8001dd4 <lcd_clear>
		while (menu_display) {
 8001f12:	e00b      	b.n	8001f2c <main+0x68>
			Menu_system_control(Menu_type, line);
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <main+0x7c>)
 8001f16:	781a      	ldrb	r2, [r3, #0]
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <main+0x80>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4610      	mov	r0, r2
 8001f20:	f7ff f83a 	bl	8000f98 <Menu_system_control>
			ScrollUp();
 8001f24:	f000 fb84 	bl	8002630 <ScrollUp>
			SelectItem();
 8001f28:	f000 fc5c 	bl	80027e4 <SelectItem>
		while (menu_display) {
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <main+0x84>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1ef      	bne.n	8001f14 <main+0x50>
		ReadFlash();
 8001f34:	e7e9      	b.n	8001f0a <main+0x46>
 8001f36:	bf00      	nop
 8001f38:	2000036c 	.word	0x2000036c
 8001f3c:	20000404 	.word	0x20000404
 8001f40:	20000001 	.word	0x20000001
 8001f44:	20000002 	.word	0x20000002
 8001f48:	20000000 	.word	0x20000000

08001f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b094      	sub	sp, #80	; 0x50
 8001f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f52:	f107 0320 	add.w	r3, r7, #32
 8001f56:	2230      	movs	r2, #48	; 0x30
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f005 fc8a 	bl	8007874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	4b28      	ldr	r3, [pc, #160]	; (8002018 <SystemClock_Config+0xcc>)
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	4a27      	ldr	r2, [pc, #156]	; (8002018 <SystemClock_Config+0xcc>)
 8001f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f80:	4b25      	ldr	r3, [pc, #148]	; (8002018 <SystemClock_Config+0xcc>)
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	4b22      	ldr	r3, [pc, #136]	; (800201c <SystemClock_Config+0xd0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f98:	4a20      	ldr	r2, [pc, #128]	; (800201c <SystemClock_Config+0xd0>)
 8001f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <SystemClock_Config+0xd0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fac:	2302      	movs	r3, #2
 8001fae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fb4:	2310      	movs	r3, #16
 8001fb6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fc0:	2308      	movs	r3, #8
 8001fc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001fc4:	2348      	movs	r3, #72	; 0x48
 8001fc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fcc:	2304      	movs	r3, #4
 8001fce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fd0:	f107 0320 	add.w	r3, r7, #32
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f003 fc91 	bl	80058fc <HAL_RCC_OscConfig>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001fe0:	f000 fdf8 	bl	8002bd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fe4:	230f      	movs	r3, #15
 8001fe6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ffa:	f107 030c 	add.w	r3, r7, #12
 8001ffe:	2102      	movs	r1, #2
 8002000:	4618      	mov	r0, r3
 8002002:	f003 feeb 	bl	8005ddc <HAL_RCC_ClockConfig>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800200c:	f000 fde2 	bl	8002bd4 <Error_Handler>
  }
}
 8002010:	bf00      	nop
 8002012:	3750      	adds	r7, #80	; 0x50
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	40007000 	.word	0x40007000

08002020 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002026:	463b      	mov	r3, r7
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002032:	4b44      	ldr	r3, [pc, #272]	; (8002144 <MX_ADC1_Init+0x124>)
 8002034:	4a44      	ldr	r2, [pc, #272]	; (8002148 <MX_ADC1_Init+0x128>)
 8002036:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002038:	4b42      	ldr	r3, [pc, #264]	; (8002144 <MX_ADC1_Init+0x124>)
 800203a:	2200      	movs	r2, #0
 800203c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800203e:	4b41      	ldr	r3, [pc, #260]	; (8002144 <MX_ADC1_Init+0x124>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002044:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <MX_ADC1_Init+0x124>)
 8002046:	2201      	movs	r2, #1
 8002048:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800204a:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <MX_ADC1_Init+0x124>)
 800204c:	2201      	movs	r2, #1
 800204e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002050:	4b3c      	ldr	r3, [pc, #240]	; (8002144 <MX_ADC1_Init+0x124>)
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002058:	4b3a      	ldr	r3, [pc, #232]	; (8002144 <MX_ADC1_Init+0x124>)
 800205a:	2200      	movs	r2, #0
 800205c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800205e:	4b39      	ldr	r3, [pc, #228]	; (8002144 <MX_ADC1_Init+0x124>)
 8002060:	4a3a      	ldr	r2, [pc, #232]	; (800214c <MX_ADC1_Init+0x12c>)
 8002062:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002064:	4b37      	ldr	r3, [pc, #220]	; (8002144 <MX_ADC1_Init+0x124>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 800206a:	4b36      	ldr	r3, [pc, #216]	; (8002144 <MX_ADC1_Init+0x124>)
 800206c:	2206      	movs	r2, #6
 800206e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002070:	4b34      	ldr	r3, [pc, #208]	; (8002144 <MX_ADC1_Init+0x124>)
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002078:	4b32      	ldr	r3, [pc, #200]	; (8002144 <MX_ADC1_Init+0x124>)
 800207a:	2201      	movs	r2, #1
 800207c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800207e:	4831      	ldr	r0, [pc, #196]	; (8002144 <MX_ADC1_Init+0x124>)
 8002080:	f001 f97c 	bl	800337c <HAL_ADC_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800208a:	f000 fda3 	bl	8002bd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800208e:	2302      	movs	r3, #2
 8002090:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002092:	2301      	movs	r3, #1
 8002094:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002096:	2303      	movs	r3, #3
 8002098:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800209a:	463b      	mov	r3, r7
 800209c:	4619      	mov	r1, r3
 800209e:	4829      	ldr	r0, [pc, #164]	; (8002144 <MX_ADC1_Init+0x124>)
 80020a0:	f001 fbec 	bl	800387c <HAL_ADC_ConfigChannel>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80020aa:	f000 fd93 	bl	8002bd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80020ae:	2303      	movs	r3, #3
 80020b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80020b2:	2302      	movs	r3, #2
 80020b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020b6:	463b      	mov	r3, r7
 80020b8:	4619      	mov	r1, r3
 80020ba:	4822      	ldr	r0, [pc, #136]	; (8002144 <MX_ADC1_Init+0x124>)
 80020bc:	f001 fbde 	bl	800387c <HAL_ADC_ConfigChannel>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80020c6:	f000 fd85 	bl	8002bd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80020ca:	2304      	movs	r3, #4
 80020cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80020ce:	2303      	movs	r3, #3
 80020d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d2:	463b      	mov	r3, r7
 80020d4:	4619      	mov	r1, r3
 80020d6:	481b      	ldr	r0, [pc, #108]	; (8002144 <MX_ADC1_Init+0x124>)
 80020d8:	f001 fbd0 	bl	800387c <HAL_ADC_ConfigChannel>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80020e2:	f000 fd77 	bl	8002bd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80020e6:	2305      	movs	r3, #5
 80020e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80020ea:	2304      	movs	r3, #4
 80020ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ee:	463b      	mov	r3, r7
 80020f0:	4619      	mov	r1, r3
 80020f2:	4814      	ldr	r0, [pc, #80]	; (8002144 <MX_ADC1_Init+0x124>)
 80020f4:	f001 fbc2 	bl	800387c <HAL_ADC_ConfigChannel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80020fe:	f000 fd69 	bl	8002bd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002102:	2306      	movs	r3, #6
 8002104:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002106:	2305      	movs	r3, #5
 8002108:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800210a:	463b      	mov	r3, r7
 800210c:	4619      	mov	r1, r3
 800210e:	480d      	ldr	r0, [pc, #52]	; (8002144 <MX_ADC1_Init+0x124>)
 8002110:	f001 fbb4 	bl	800387c <HAL_ADC_ConfigChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800211a:	f000 fd5b 	bl	8002bd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800211e:	2307      	movs	r3, #7
 8002120:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002122:	2306      	movs	r3, #6
 8002124:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002126:	463b      	mov	r3, r7
 8002128:	4619      	mov	r1, r3
 800212a:	4806      	ldr	r0, [pc, #24]	; (8002144 <MX_ADC1_Init+0x124>)
 800212c:	f001 fba6 	bl	800387c <HAL_ADC_ConfigChannel>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8002136:	f000 fd4d 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000404 	.word	0x20000404
 8002148:	40012000 	.word	0x40012000
 800214c:	0f000001 	.word	0x0f000001

08002150 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <MX_I2C3_Init+0x50>)
 8002156:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <MX_I2C3_Init+0x54>)
 8002158:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <MX_I2C3_Init+0x50>)
 800215c:	4a12      	ldr	r2, [pc, #72]	; (80021a8 <MX_I2C3_Init+0x58>)
 800215e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <MX_I2C3_Init+0x50>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <MX_I2C3_Init+0x50>)
 8002168:	2200      	movs	r2, #0
 800216a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <MX_I2C3_Init+0x50>)
 800216e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002172:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002174:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <MX_I2C3_Init+0x50>)
 8002176:	2200      	movs	r2, #0
 8002178:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <MX_I2C3_Init+0x50>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002180:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <MX_I2C3_Init+0x50>)
 8002182:	2200      	movs	r2, #0
 8002184:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <MX_I2C3_Init+0x50>)
 8002188:	2200      	movs	r2, #0
 800218a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800218c:	4804      	ldr	r0, [pc, #16]	; (80021a0 <MX_I2C3_Init+0x50>)
 800218e:	f002 ff75 	bl	800507c <HAL_I2C_Init>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002198:	f000 fd1c 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	200002cc 	.word	0x200002cc
 80021a4:	40005c00 	.word	0x40005c00
 80021a8:	000186a0 	.word	0x000186a0

080021ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08c      	sub	sp, #48	; 0x30
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021b2:	f107 030c 	add.w	r3, r7, #12
 80021b6:	2224      	movs	r2, #36	; 0x24
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f005 fb5a 	bl	8007874 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021c8:	4b21      	ldr	r3, [pc, #132]	; (8002250 <MX_TIM2_Init+0xa4>)
 80021ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <MX_TIM2_Init+0xa4>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d6:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <MX_TIM2_Init+0xa4>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80021dc:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <MX_TIM2_Init+0xa4>)
 80021de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <MX_TIM2_Init+0xa4>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ea:	4b19      	ldr	r3, [pc, #100]	; (8002250 <MX_TIM2_Init+0xa4>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80021f0:	2301      	movs	r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021f4:	2300      	movs	r3, #0
 80021f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021f8:	2301      	movs	r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002204:	2300      	movs	r3, #0
 8002206:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002208:	2301      	movs	r3, #1
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800220c:	2300      	movs	r3, #0
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002214:	f107 030c 	add.w	r3, r7, #12
 8002218:	4619      	mov	r1, r3
 800221a:	480d      	ldr	r0, [pc, #52]	; (8002250 <MX_TIM2_Init+0xa4>)
 800221c:	f004 f8a8 	bl	8006370 <HAL_TIM_Encoder_Init>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002226:	f000 fcd5 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002232:	1d3b      	adds	r3, r7, #4
 8002234:	4619      	mov	r1, r3
 8002236:	4806      	ldr	r0, [pc, #24]	; (8002250 <MX_TIM2_Init+0xa4>)
 8002238:	f004 fea6 	bl	8006f88 <HAL_TIMEx_MasterConfigSynchronization>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002242:	f000 fcc7 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002246:	bf00      	nop
 8002248:	3730      	adds	r7, #48	; 0x30
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000504 	.word	0x20000504

08002254 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225a:	f107 0320 	add.w	r3, r7, #32
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
 8002270:	611a      	str	r2, [r3, #16]
 8002272:	615a      	str	r2, [r3, #20]
 8002274:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002276:	4b27      	ldr	r3, [pc, #156]	; (8002314 <MX_TIM3_Init+0xc0>)
 8002278:	4a27      	ldr	r2, [pc, #156]	; (8002318 <MX_TIM3_Init+0xc4>)
 800227a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800227c:	4b25      	ldr	r3, [pc, #148]	; (8002314 <MX_TIM3_Init+0xc0>)
 800227e:	2200      	movs	r2, #0
 8002280:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002282:	4b24      	ldr	r3, [pc, #144]	; (8002314 <MX_TIM3_Init+0xc0>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8002288:	4b22      	ldr	r3, [pc, #136]	; (8002314 <MX_TIM3_Init+0xc0>)
 800228a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800228e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002290:	4b20      	ldr	r3, [pc, #128]	; (8002314 <MX_TIM3_Init+0xc0>)
 8002292:	2200      	movs	r2, #0
 8002294:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002296:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <MX_TIM3_Init+0xc0>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800229c:	481d      	ldr	r0, [pc, #116]	; (8002314 <MX_TIM3_Init+0xc0>)
 800229e:	f004 f809 	bl	80062b4 <HAL_TIM_PWM_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80022a8:	f000 fc94 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022b4:	f107 0320 	add.w	r3, r7, #32
 80022b8:	4619      	mov	r1, r3
 80022ba:	4816      	ldr	r0, [pc, #88]	; (8002314 <MX_TIM3_Init+0xc0>)
 80022bc:	f004 fe64 	bl	8006f88 <HAL_TIMEx_MasterConfigSynchronization>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80022c6:	f000 fc85 	bl	8002bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ca:	2360      	movs	r3, #96	; 0x60
 80022cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	2208      	movs	r2, #8
 80022de:	4619      	mov	r1, r3
 80022e0:	480c      	ldr	r0, [pc, #48]	; (8002314 <MX_TIM3_Init+0xc0>)
 80022e2:	f004 f9df 	bl	80066a4 <HAL_TIM_PWM_ConfigChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80022ec:	f000 fc72 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	220c      	movs	r2, #12
 80022f4:	4619      	mov	r1, r3
 80022f6:	4807      	ldr	r0, [pc, #28]	; (8002314 <MX_TIM3_Init+0xc0>)
 80022f8:	f004 f9d4 	bl	80066a4 <HAL_TIM_PWM_ConfigChannel>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002302:	f000 fc67 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002306:	4803      	ldr	r0, [pc, #12]	; (8002314 <MX_TIM3_Init+0xc0>)
 8002308:	f000 fe5c 	bl	8002fc4 <HAL_TIM_MspPostInit>

}
 800230c:	bf00      	nop
 800230e:	3728      	adds	r7, #40	; 0x28
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200003c4 	.word	0x200003c4
 8002318:	40000400 	.word	0x40000400

0800231c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	; 0x30
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002322:	f107 030c 	add.w	r3, r7, #12
 8002326:	2224      	movs	r2, #36	; 0x24
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f005 faa2 	bl	8007874 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002338:	4b20      	ldr	r3, [pc, #128]	; (80023bc <MX_TIM4_Init+0xa0>)
 800233a:	4a21      	ldr	r2, [pc, #132]	; (80023c0 <MX_TIM4_Init+0xa4>)
 800233c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800233e:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <MX_TIM4_Init+0xa0>)
 8002340:	2200      	movs	r2, #0
 8002342:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002344:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <MX_TIM4_Init+0xa0>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800234a:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <MX_TIM4_Init+0xa0>)
 800234c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002350:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002352:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <MX_TIM4_Init+0xa0>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002358:	4b18      	ldr	r3, [pc, #96]	; (80023bc <MX_TIM4_Init+0xa0>)
 800235a:	2200      	movs	r2, #0
 800235c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800235e:	2301      	movs	r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002366:	2301      	movs	r3, #1
 8002368:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002372:	2300      	movs	r3, #0
 8002374:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002376:	2301      	movs	r3, #1
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800237a:	2300      	movs	r3, #0
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002382:	f107 030c 	add.w	r3, r7, #12
 8002386:	4619      	mov	r1, r3
 8002388:	480c      	ldr	r0, [pc, #48]	; (80023bc <MX_TIM4_Init+0xa0>)
 800238a:	f003 fff1 	bl	8006370 <HAL_TIM_Encoder_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002394:	f000 fc1e 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002398:	2300      	movs	r3, #0
 800239a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800239c:	2300      	movs	r3, #0
 800239e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	4619      	mov	r1, r3
 80023a4:	4805      	ldr	r0, [pc, #20]	; (80023bc <MX_TIM4_Init+0xa0>)
 80023a6:	f004 fdef 	bl	8006f88 <HAL_TIMEx_MasterConfigSynchronization>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80023b0:	f000 fc10 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80023b4:	bf00      	nop
 80023b6:	3730      	adds	r7, #48	; 0x30
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000320 	.word	0x20000320
 80023c0:	40000800 	.word	0x40000800

080023c4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ca:	f107 0308 	add.w	r3, r7, #8
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d8:	463b      	mov	r3, r7
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <MX_TIM5_Init+0x94>)
 80023e2:	4a1e      	ldr	r2, [pc, #120]	; (800245c <MX_TIM5_Init+0x98>)
 80023e4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 60;
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <MX_TIM5_Init+0x94>)
 80023e8:	223c      	movs	r2, #60	; 0x3c
 80023ea:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ec:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <MX_TIM5_Init+0x94>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 59999;
 80023f2:	4b19      	ldr	r3, [pc, #100]	; (8002458 <MX_TIM5_Init+0x94>)
 80023f4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80023f8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023fa:	4b17      	ldr	r3, [pc, #92]	; (8002458 <MX_TIM5_Init+0x94>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002400:	4b15      	ldr	r3, [pc, #84]	; (8002458 <MX_TIM5_Init+0x94>)
 8002402:	2200      	movs	r2, #0
 8002404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002406:	4814      	ldr	r0, [pc, #80]	; (8002458 <MX_TIM5_Init+0x94>)
 8002408:	f003 feda 	bl	80061c0 <HAL_TIM_Base_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002412:	f000 fbdf 	bl	8002bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800241a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800241c:	f107 0308 	add.w	r3, r7, #8
 8002420:	4619      	mov	r1, r3
 8002422:	480d      	ldr	r0, [pc, #52]	; (8002458 <MX_TIM5_Init+0x94>)
 8002424:	f004 fa04 	bl	8006830 <HAL_TIM_ConfigClockSource>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800242e:	f000 fbd1 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800243a:	463b      	mov	r3, r7
 800243c:	4619      	mov	r1, r3
 800243e:	4806      	ldr	r0, [pc, #24]	; (8002458 <MX_TIM5_Init+0x94>)
 8002440:	f004 fda2 	bl	8006f88 <HAL_TIMEx_MasterConfigSynchronization>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800244a:	f000 fbc3 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000384 	.word	0x20000384
 800245c:	40000c00 	.word	0x40000c00

08002460 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <MX_USART6_UART_Init+0x4c>)
 8002466:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <MX_USART6_UART_Init+0x50>)
 8002468:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <MX_USART6_UART_Init+0x4c>)
 800246c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002470:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <MX_USART6_UART_Init+0x4c>)
 8002474:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002478:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <MX_USART6_UART_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <MX_USART6_UART_Init+0x4c>)
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002486:	4b09      	ldr	r3, [pc, #36]	; (80024ac <MX_USART6_UART_Init+0x4c>)
 8002488:	220c      	movs	r2, #12
 800248a:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <MX_USART6_UART_Init+0x4c>)
 800248e:	2200      	movs	r2, #0
 8002490:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <MX_USART6_UART_Init+0x4c>)
 8002494:	2200      	movs	r2, #0
 8002496:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002498:	4804      	ldr	r0, [pc, #16]	; (80024ac <MX_USART6_UART_Init+0x4c>)
 800249a:	f004 fdf7 	bl	800708c <HAL_UART_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 80024a4:	f000 fb96 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	200004c4 	.word	0x200004c4
 80024b0:	40011400 	.word	0x40011400

080024b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <MX_DMA_Init+0x3c>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <MX_DMA_Init+0x3c>)
 80024c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <MX_DMA_Init+0x3c>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d2:	607b      	str	r3, [r7, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	2038      	movs	r0, #56	; 0x38
 80024dc:	f001 fd67 	bl	8003fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80024e0:	2038      	movs	r0, #56	; 0x38
 80024e2:	f001 fd80 	bl	8003fe6 <HAL_NVIC_EnableIRQ>

}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800

080024f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fa:	f107 0314 	add.w	r3, r7, #20
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
 8002508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	4b43      	ldr	r3, [pc, #268]	; (800261c <MX_GPIO_Init+0x128>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	4a42      	ldr	r2, [pc, #264]	; (800261c <MX_GPIO_Init+0x128>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6313      	str	r3, [r2, #48]	; 0x30
 800251a:	4b40      	ldr	r3, [pc, #256]	; (800261c <MX_GPIO_Init+0x128>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	4b3c      	ldr	r3, [pc, #240]	; (800261c <MX_GPIO_Init+0x128>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a3b      	ldr	r2, [pc, #236]	; (800261c <MX_GPIO_Init+0x128>)
 8002530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b39      	ldr	r3, [pc, #228]	; (800261c <MX_GPIO_Init+0x128>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	4b35      	ldr	r3, [pc, #212]	; (800261c <MX_GPIO_Init+0x128>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a34      	ldr	r2, [pc, #208]	; (800261c <MX_GPIO_Init+0x128>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b32      	ldr	r3, [pc, #200]	; (800261c <MX_GPIO_Init+0x128>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	4b2e      	ldr	r3, [pc, #184]	; (800261c <MX_GPIO_Init+0x128>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a2d      	ldr	r2, [pc, #180]	; (800261c <MX_GPIO_Init+0x128>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b2b      	ldr	r3, [pc, #172]	; (800261c <MX_GPIO_Init+0x128>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 800257a:	2200      	movs	r2, #0
 800257c:	f24f 7124 	movw	r1, #63268	; 0xf724
 8002580:	4827      	ldr	r0, [pc, #156]	; (8002620 <MX_GPIO_Init+0x12c>)
 8002582:	f002 fd49 	bl	8005018 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002586:	2200      	movs	r2, #0
 8002588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800258c:	4825      	ldr	r0, [pc, #148]	; (8002624 <MX_GPIO_Init+0x130>)
 800258e:	f002 fd43 	bl	8005018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ButtonC_Pin */
  GPIO_InitStruct.Pin = ButtonC_Pin;
 8002592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002598:	4b23      	ldr	r3, [pc, #140]	; (8002628 <MX_GPIO_Init+0x134>)
 800259a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ButtonC_GPIO_Port, &GPIO_InitStruct);
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	4619      	mov	r1, r3
 80025a6:	4821      	ldr	r0, [pc, #132]	; (800262c <MX_GPIO_Init+0x138>)
 80025a8:	f002 fb9c 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ButtonB_Pin ButtonA_Pin */
  GPIO_InitStruct.Pin = ButtonB_Pin|ButtonA_Pin;
 80025ac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80025b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	481a      	ldr	r0, [pc, #104]	; (800262c <MX_GPIO_Init+0x138>)
 80025c2:	f002 fb8f 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB13
                           PB14 PB15 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 80025c6:	f24f 7324 	movw	r3, #63268	; 0xf724
 80025ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025cc:	2301      	movs	r3, #1
 80025ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	2300      	movs	r3, #0
 80025d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	4619      	mov	r1, r3
 80025de:	4810      	ldr	r0, [pc, #64]	; (8002620 <MX_GPIO_Init+0x12c>)
 80025e0:	f002 fb80 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ea:	2301      	movs	r3, #1
 80025ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2300      	movs	r3, #0
 80025f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f6:	f107 0314 	add.w	r3, r7, #20
 80025fa:	4619      	mov	r1, r3
 80025fc:	4809      	ldr	r0, [pc, #36]	; (8002624 <MX_GPIO_Init+0x130>)
 80025fe:	f002 fb71 	bl	8004ce4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	2028      	movs	r0, #40	; 0x28
 8002608:	f001 fcd1 	bl	8003fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800260c:	2028      	movs	r0, #40	; 0x28
 800260e:	f001 fcea 	bl	8003fe6 <HAL_NVIC_EnableIRQ>

}
 8002612:	bf00      	nop
 8002614:	3728      	adds	r7, #40	; 0x28
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800
 8002620:	40020400 	.word	0x40020400
 8002624:	40020000 	.word	0x40020000
 8002628:	10210000 	.word	0x10210000
 800262c:	40020800 	.word	0x40020800

08002630 <ScrollUp>:
	}
	printf("\n");

}
void ScrollUp(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(ButtonA_GPIO_Port, ButtonA_Pin) == 0)
 8002634:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002638:	485c      	ldr	r0, [pc, #368]	; (80027ac <ScrollUp+0x17c>)
 800263a:	f002 fcd5 	bl	8004fe8 <HAL_GPIO_ReadPin>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 80b0 	bne.w	80027a6 <ScrollUp+0x176>
	{
		while (HAL_GPIO_ReadPin(ButtonA_GPIO_Port, ButtonA_Pin) == 0)
 8002646:	e002      	b.n	800264e <ScrollUp+0x1e>
		{
			HAL_Delay(50);
 8002648:	2032      	movs	r0, #50	; 0x32
 800264a:	f000 fe75 	bl	8003338 <HAL_Delay>
		while (HAL_GPIO_ReadPin(ButtonA_GPIO_Port, ButtonA_Pin) == 0)
 800264e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002652:	4856      	ldr	r0, [pc, #344]	; (80027ac <ScrollUp+0x17c>)
 8002654:	f002 fcc8 	bl	8004fe8 <HAL_GPIO_ReadPin>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f4      	beq.n	8002648 <ScrollUp+0x18>
		}
		switch (Menu_type)
 800265e:	4b54      	ldr	r3, [pc, #336]	; (80027b0 <ScrollUp+0x180>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b03      	cmp	r3, #3
 8002664:	d013      	beq.n	800268e <ScrollUp+0x5e>
 8002666:	2b04      	cmp	r3, #4
 8002668:	d058      	beq.n	800271c <ScrollUp+0xec>
 800266a:	2b01      	cmp	r3, #1
 800266c:	d000      	beq.n	8002670 <ScrollUp+0x40>
				}
			}
			break;
		}
	}
}
 800266e:	e09a      	b.n	80027a6 <ScrollUp+0x176>
			line--;
 8002670:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <ScrollUp+0x184>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	3b01      	subs	r3, #1
 8002676:	b2da      	uxtb	r2, r3
 8002678:	4b4e      	ldr	r3, [pc, #312]	; (80027b4 <ScrollUp+0x184>)
 800267a:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 800267c:	4b4d      	ldr	r3, [pc, #308]	; (80027b4 <ScrollUp+0x184>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	f040 808d 	bne.w	80027a0 <ScrollUp+0x170>
				line = Maximum_Menu_line;
 8002686:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <ScrollUp+0x184>)
 8002688:	2207      	movs	r2, #7
 800268a:	701a      	strb	r2, [r3, #0]
			break;
 800268c:	e088      	b.n	80027a0 <ScrollUp+0x170>
			line--;
 800268e:	4b49      	ldr	r3, [pc, #292]	; (80027b4 <ScrollUp+0x184>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	3b01      	subs	r3, #1
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <ScrollUp+0x184>)
 8002698:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 800269a:	4b46      	ldr	r3, [pc, #280]	; (80027b4 <ScrollUp+0x184>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d102      	bne.n	80026a8 <ScrollUp+0x78>
				line = Maximum_PID_line;
 80026a2:	4b44      	ldr	r3, [pc, #272]	; (80027b4 <ScrollUp+0x184>)
 80026a4:	2204      	movs	r2, #4
 80026a6:	701a      	strb	r2, [r3, #0]
			if (Kp_modify_flag == 1)
 80026a8:	4b43      	ldr	r3, [pc, #268]	; (80027b8 <ScrollUp+0x188>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10c      	bne.n	80026ca <ScrollUp+0x9a>
				Kp += Kp_amount;
 80026b0:	4b42      	ldr	r3, [pc, #264]	; (80027bc <ScrollUp+0x18c>)
 80026b2:	edd3 7a00 	vldr	s15, [r3]
 80026b6:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80027c0 <ScrollUp+0x190>
 80026ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026be:	4b3f      	ldr	r3, [pc, #252]	; (80027bc <ScrollUp+0x18c>)
 80026c0:	edc3 7a00 	vstr	s15, [r3]
				line = 1;
 80026c4:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <ScrollUp+0x184>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
			if (Ki_modify_flag == 1)
 80026ca:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <ScrollUp+0x194>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d10c      	bne.n	80026ec <ScrollUp+0xbc>
				Ki += Ki_amount;
 80026d2:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <ScrollUp+0x198>)
 80026d4:	edd3 7a00 	vldr	s15, [r3]
 80026d8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80027c0 <ScrollUp+0x190>
 80026dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026e0:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <ScrollUp+0x198>)
 80026e2:	edc3 7a00 	vstr	s15, [r3]
				line = 2;
 80026e6:	4b33      	ldr	r3, [pc, #204]	; (80027b4 <ScrollUp+0x184>)
 80026e8:	2202      	movs	r2, #2
 80026ea:	701a      	strb	r2, [r3, #0]
			if (Kd_modify_flag == 1)
 80026ec:	4b37      	ldr	r3, [pc, #220]	; (80027cc <ScrollUp+0x19c>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d10c      	bne.n	800270e <ScrollUp+0xde>
				Kd += Kd_amount;
 80026f4:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <ScrollUp+0x1a0>)
 80026f6:	edd3 7a00 	vldr	s15, [r3]
 80026fa:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80027c0 <ScrollUp+0x190>
 80026fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002702:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <ScrollUp+0x1a0>)
 8002704:	edc3 7a00 	vstr	s15, [r3]
				line = 3;
 8002708:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <ScrollUp+0x184>)
 800270a:	2203      	movs	r2, #3
 800270c:	701a      	strb	r2, [r3, #0]
			Menu_system_control(PID_Menu, line);
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <ScrollUp+0x184>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	4619      	mov	r1, r3
 8002714:	2003      	movs	r0, #3
 8002716:	f7fe fc3f 	bl	8000f98 <Menu_system_control>
			break;
 800271a:	e044      	b.n	80027a6 <ScrollUp+0x176>
			line--;
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <ScrollUp+0x184>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	3b01      	subs	r3, #1
 8002722:	b2da      	uxtb	r2, r3
 8002724:	4b23      	ldr	r3, [pc, #140]	; (80027b4 <ScrollUp+0x184>)
 8002726:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 8002728:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <ScrollUp+0x184>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <ScrollUp+0x106>
				line = Maximum_Engine_line;
 8002730:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <ScrollUp+0x184>)
 8002732:	2203      	movs	r2, #3
 8002734:	701a      	strb	r2, [r3, #0]
			if (Left_modify_flag == 1)
 8002736:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <ScrollUp+0x1a4>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d115      	bne.n	800276a <ScrollUp+0x13a>
				Left += 100;
 800273e:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <ScrollUp+0x1a8>)
 8002740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002744:	b29b      	uxth	r3, r3
 8002746:	3364      	adds	r3, #100	; 0x64
 8002748:	b29b      	uxth	r3, r3
 800274a:	b21a      	sxth	r2, r3
 800274c:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <ScrollUp+0x1a8>)
 800274e:	801a      	strh	r2, [r3, #0]
				line = 1;
 8002750:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <ScrollUp+0x184>)
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
				if (Left >= 7200)
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <ScrollUp+0x1a8>)
 8002758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800275c:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8002760:	db03      	blt.n	800276a <ScrollUp+0x13a>
					Left = 7200;
 8002762:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <ScrollUp+0x1a8>)
 8002764:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002768:	801a      	strh	r2, [r3, #0]
			if (Right_modify_flag == 1)
 800276a:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <ScrollUp+0x1ac>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d118      	bne.n	80027a4 <ScrollUp+0x174>
				Right += 100;
 8002772:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <ScrollUp+0x1b0>)
 8002774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002778:	b29b      	uxth	r3, r3
 800277a:	3364      	adds	r3, #100	; 0x64
 800277c:	b29b      	uxth	r3, r3
 800277e:	b21a      	sxth	r2, r3
 8002780:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <ScrollUp+0x1b0>)
 8002782:	801a      	strh	r2, [r3, #0]
				line = 2;
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <ScrollUp+0x184>)
 8002786:	2202      	movs	r2, #2
 8002788:	701a      	strb	r2, [r3, #0]
				if (Right >= 7200)
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <ScrollUp+0x1b0>)
 800278c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002790:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8002794:	db06      	blt.n	80027a4 <ScrollUp+0x174>
					Right = 7200;
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <ScrollUp+0x1b0>)
 8002798:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800279c:	801a      	strh	r2, [r3, #0]
			break;
 800279e:	e001      	b.n	80027a4 <ScrollUp+0x174>
			break;
 80027a0:	bf00      	nop
 80027a2:	e000      	b.n	80027a6 <ScrollUp+0x176>
			break;
 80027a4:	bf00      	nop
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40020800 	.word	0x40020800
 80027b0:	20000001 	.word	0x20000001
 80027b4:	20000002 	.word	0x20000002
 80027b8:	20000224 	.word	0x20000224
 80027bc:	2000022c 	.word	0x2000022c
 80027c0:	3dcccccd 	.word	0x3dcccccd
 80027c4:	20000225 	.word	0x20000225
 80027c8:	20000230 	.word	0x20000230
 80027cc:	20000226 	.word	0x20000226
 80027d0:	20000234 	.word	0x20000234
 80027d4:	20000227 	.word	0x20000227
 80027d8:	20000006 	.word	0x20000006
 80027dc:	20000228 	.word	0x20000228
 80027e0:	20000008 	.word	0x20000008

080027e4 <SelectItem>:
void SelectItem(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0) //Select button
 80027e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027ec:	4818      	ldr	r0, [pc, #96]	; (8002850 <SelectItem+0x6c>)
 80027ee:	f002 fbfb 	bl	8004fe8 <HAL_GPIO_ReadPin>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d129      	bne.n	800284c <SelectItem+0x68>
	{
		while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 80027f8:	e002      	b.n	8002800 <SelectItem+0x1c>
		{
			HAL_Delay(50);
 80027fa:	2032      	movs	r0, #50	; 0x32
 80027fc:	f000 fd9c 	bl	8003338 <HAL_Delay>
		while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 8002800:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002804:	4812      	ldr	r0, [pc, #72]	; (8002850 <SelectItem+0x6c>)
 8002806:	f002 fbef 	bl	8004fe8 <HAL_GPIO_ReadPin>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f4      	beq.n	80027fa <SelectItem+0x16>
		}
		executeAction(line);
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <SelectItem+0x70>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff f877 	bl	8001908 <executeAction>
		if (Kp_modify_flag == 1 || Ki_modify_flag == 1 || Kd_modify_flag == 1
 800281a:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <SelectItem+0x74>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d00f      	beq.n	8002842 <SelectItem+0x5e>
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <SelectItem+0x78>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d00b      	beq.n	8002842 <SelectItem+0x5e>
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <SelectItem+0x7c>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d007      	beq.n	8002842 <SelectItem+0x5e>
				|| Right_modify_flag == 1 || Left_modify_flag == 1)
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <SelectItem+0x80>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d003      	beq.n	8002842 <SelectItem+0x5e>
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <SelectItem+0x84>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <SelectItem+0x62>
		{
			__NOP();
 8002842:	bf00      	nop
		else
		{
			line = 1;
		}
	}
}
 8002844:	e002      	b.n	800284c <SelectItem+0x68>
			line = 1;
 8002846:	4b03      	ldr	r3, [pc, #12]	; (8002854 <SelectItem+0x70>)
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40020800 	.word	0x40020800
 8002854:	20000002 	.word	0x20000002
 8002858:	20000224 	.word	0x20000224
 800285c:	20000225 	.word	0x20000225
 8002860:	20000226 	.word	0x20000226
 8002864:	20000228 	.word	0x20000228
 8002868:	20000227 	.word	0x20000227

0800286c <MultifunctionButton>:
void MultifunctionButton(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
	switch (Menu_type)
 8002870:	4b7b      	ldr	r3, [pc, #492]	; (8002a60 <MultifunctionButton+0x1f4>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b05      	cmp	r3, #5
 8002876:	f200 80f0 	bhi.w	8002a5a <MultifunctionButton+0x1ee>
 800287a:	a201      	add	r2, pc, #4	; (adr r2, 8002880 <MultifunctionButton+0x14>)
 800287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002880:	08002899 	.word	0x08002899
 8002884:	080028ad 	.word	0x080028ad
 8002888:	08002a5b 	.word	0x08002a5b
 800288c:	080028d9 	.word	0x080028d9
 8002890:	080029b3 	.word	0x080029b3
 8002894:	08002a47 	.word	0x08002a47
	{
	case Running_menu:
		Menu_type = Main_menu;
 8002898:	4b71      	ldr	r3, [pc, #452]	; (8002a60 <MultifunctionButton+0x1f4>)
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
		line = 1;
 800289e:	4b71      	ldr	r3, [pc, #452]	; (8002a64 <MultifunctionButton+0x1f8>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
		cancer_running = 0;
 80028a4:	4b70      	ldr	r3, [pc, #448]	; (8002a68 <MultifunctionButton+0x1fc>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
		break;
 80028aa:	e0d6      	b.n	8002a5a <MultifunctionButton+0x1ee>
	case Main_menu:
		line++;
 80028ac:	4b6d      	ldr	r3, [pc, #436]	; (8002a64 <MultifunctionButton+0x1f8>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	3301      	adds	r3, #1
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	4b6b      	ldr	r3, [pc, #428]	; (8002a64 <MultifunctionButton+0x1f8>)
 80028b6:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_Menu_line)
 80028b8:	4b6a      	ldr	r3, [pc, #424]	; (8002a64 <MultifunctionButton+0x1f8>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b07      	cmp	r3, #7
 80028be:	d902      	bls.n	80028c6 <MultifunctionButton+0x5a>
		{
			line = Number_of_Menu_firstline;
 80028c0:	4b68      	ldr	r3, [pc, #416]	; (8002a64 <MultifunctionButton+0x1f8>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	701a      	strb	r2, [r3, #0]
		}
		Menu_system_control(Menu_type, line);
 80028c6:	4b66      	ldr	r3, [pc, #408]	; (8002a60 <MultifunctionButton+0x1f4>)
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	4b66      	ldr	r3, [pc, #408]	; (8002a64 <MultifunctionButton+0x1f8>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	4619      	mov	r1, r3
 80028d0:	4610      	mov	r0, r2
 80028d2:	f7fe fb61 	bl	8000f98 <Menu_system_control>
		break;
 80028d6:	e0c0      	b.n	8002a5a <MultifunctionButton+0x1ee>
	case PID_Menu:
		line++;
 80028d8:	4b62      	ldr	r3, [pc, #392]	; (8002a64 <MultifunctionButton+0x1f8>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	3301      	adds	r3, #1
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	4b60      	ldr	r3, [pc, #384]	; (8002a64 <MultifunctionButton+0x1f8>)
 80028e2:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_PID_line)
 80028e4:	4b5f      	ldr	r3, [pc, #380]	; (8002a64 <MultifunctionButton+0x1f8>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d902      	bls.n	80028f2 <MultifunctionButton+0x86>
		{
			line = Number_of_Menu_firstline;
 80028ec:	4b5d      	ldr	r3, [pc, #372]	; (8002a64 <MultifunctionButton+0x1f8>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]
		}
		if (Kp_modify_flag == 1)
 80028f2:	4b5e      	ldr	r3, [pc, #376]	; (8002a6c <MultifunctionButton+0x200>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d118      	bne.n	800292c <MultifunctionButton+0xc0>
		{
			Kp -= Kp_amount;
 80028fa:	4b5d      	ldr	r3, [pc, #372]	; (8002a70 <MultifunctionButton+0x204>)
 80028fc:	edd3 7a00 	vldr	s15, [r3]
 8002900:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002a74 <MultifunctionButton+0x208>
 8002904:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002908:	4b59      	ldr	r3, [pc, #356]	; (8002a70 <MultifunctionButton+0x204>)
 800290a:	edc3 7a00 	vstr	s15, [r3]
			line = 1;
 800290e:	4b55      	ldr	r3, [pc, #340]	; (8002a64 <MultifunctionButton+0x1f8>)
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]
			if (Kp <= 0)
 8002914:	4b56      	ldr	r3, [pc, #344]	; (8002a70 <MultifunctionButton+0x204>)
 8002916:	edd3 7a00 	vldr	s15, [r3]
 800291a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800291e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002922:	d803      	bhi.n	800292c <MultifunctionButton+0xc0>
				{Kp = 0;}
 8002924:	4b52      	ldr	r3, [pc, #328]	; (8002a70 <MultifunctionButton+0x204>)
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
		}
		if (Ki_modify_flag == 1)
 800292c:	4b52      	ldr	r3, [pc, #328]	; (8002a78 <MultifunctionButton+0x20c>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d118      	bne.n	8002966 <MultifunctionButton+0xfa>
		{
			Ki -= Ki_amount;
 8002934:	4b51      	ldr	r3, [pc, #324]	; (8002a7c <MultifunctionButton+0x210>)
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002a74 <MultifunctionButton+0x208>
 800293e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002942:	4b4e      	ldr	r3, [pc, #312]	; (8002a7c <MultifunctionButton+0x210>)
 8002944:	edc3 7a00 	vstr	s15, [r3]
			line = 2;
 8002948:	4b46      	ldr	r3, [pc, #280]	; (8002a64 <MultifunctionButton+0x1f8>)
 800294a:	2202      	movs	r2, #2
 800294c:	701a      	strb	r2, [r3, #0]
			if (Ki <= 0)
 800294e:	4b4b      	ldr	r3, [pc, #300]	; (8002a7c <MultifunctionButton+0x210>)
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295c:	d803      	bhi.n	8002966 <MultifunctionButton+0xfa>
				{Ki = 0;}
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <MultifunctionButton+0x210>)
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
		}
		if (Kd_modify_flag == 1)
 8002966:	4b46      	ldr	r3, [pc, #280]	; (8002a80 <MultifunctionButton+0x214>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d118      	bne.n	80029a0 <MultifunctionButton+0x134>
		{
			Kd -= Kd_amount;
 800296e:	4b45      	ldr	r3, [pc, #276]	; (8002a84 <MultifunctionButton+0x218>)
 8002970:	edd3 7a00 	vldr	s15, [r3]
 8002974:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002a74 <MultifunctionButton+0x208>
 8002978:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800297c:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <MultifunctionButton+0x218>)
 800297e:	edc3 7a00 	vstr	s15, [r3]
			line = 3;
 8002982:	4b38      	ldr	r3, [pc, #224]	; (8002a64 <MultifunctionButton+0x1f8>)
 8002984:	2203      	movs	r2, #3
 8002986:	701a      	strb	r2, [r3, #0]
			if (Kd <= 0)
 8002988:	4b3e      	ldr	r3, [pc, #248]	; (8002a84 <MultifunctionButton+0x218>)
 800298a:	edd3 7a00 	vldr	s15, [r3]
 800298e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002996:	d803      	bhi.n	80029a0 <MultifunctionButton+0x134>
				{Kd = 0;}
 8002998:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <MultifunctionButton+0x218>)
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
		}
		Menu_system_control(Menu_type, line);
 80029a0:	4b2f      	ldr	r3, [pc, #188]	; (8002a60 <MultifunctionButton+0x1f4>)
 80029a2:	781a      	ldrb	r2, [r3, #0]
 80029a4:	4b2f      	ldr	r3, [pc, #188]	; (8002a64 <MultifunctionButton+0x1f8>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f7fe faf4 	bl	8000f98 <Menu_system_control>
		break;
 80029b0:	e053      	b.n	8002a5a <MultifunctionButton+0x1ee>
	case Engine_menu:
		line++;
 80029b2:	4b2c      	ldr	r3, [pc, #176]	; (8002a64 <MultifunctionButton+0x1f8>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	3301      	adds	r3, #1
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <MultifunctionButton+0x1f8>)
 80029bc:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_Engine_line)
 80029be:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <MultifunctionButton+0x1f8>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d902      	bls.n	80029cc <MultifunctionButton+0x160>
		{
			line = Number_of_Menu_firstline;
 80029c6:	4b27      	ldr	r3, [pc, #156]	; (8002a64 <MultifunctionButton+0x1f8>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
		}
		if (Left_modify_flag == 1)
 80029cc:	4b2e      	ldr	r3, [pc, #184]	; (8002a88 <MultifunctionButton+0x21c>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d115      	bne.n	8002a00 <MultifunctionButton+0x194>
		{
			Left -= 100;
 80029d4:	4b2d      	ldr	r3, [pc, #180]	; (8002a8c <MultifunctionButton+0x220>)
 80029d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3b64      	subs	r3, #100	; 0x64
 80029de:	b29b      	uxth	r3, r3
 80029e0:	b21a      	sxth	r2, r3
 80029e2:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <MultifunctionButton+0x220>)
 80029e4:	801a      	strh	r2, [r3, #0]
			line = 1;
 80029e6:	4b1f      	ldr	r3, [pc, #124]	; (8002a64 <MultifunctionButton+0x1f8>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]
			if (Left <= -7200)
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <MultifunctionButton+0x220>)
 80029ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f2:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 80029f6:	dc03      	bgt.n	8002a00 <MultifunctionButton+0x194>
				{Left = -7200;}
 80029f8:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <MultifunctionButton+0x220>)
 80029fa:	f24e 32e0 	movw	r2, #58336	; 0xe3e0
 80029fe:	801a      	strh	r2, [r3, #0]
		}
		if (Right_modify_flag == 1)
 8002a00:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <MultifunctionButton+0x224>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d115      	bne.n	8002a34 <MultifunctionButton+0x1c8>
		{
			Right -= 100;
 8002a08:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <MultifunctionButton+0x228>)
 8002a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b64      	subs	r3, #100	; 0x64
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	b21a      	sxth	r2, r3
 8002a16:	4b1f      	ldr	r3, [pc, #124]	; (8002a94 <MultifunctionButton+0x228>)
 8002a18:	801a      	strh	r2, [r3, #0]
			line = 2;
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <MultifunctionButton+0x1f8>)
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	701a      	strb	r2, [r3, #0]
			if (Right <= -7200)
 8002a20:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <MultifunctionButton+0x228>)
 8002a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a26:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 8002a2a:	dc03      	bgt.n	8002a34 <MultifunctionButton+0x1c8>
				{Right = -7200;}
 8002a2c:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <MultifunctionButton+0x228>)
 8002a2e:	f24e 32e0 	movw	r2, #58336	; 0xe3e0
 8002a32:	801a      	strh	r2, [r3, #0]
		}
		Menu_system_control(Menu_type, line);
 8002a34:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <MultifunctionButton+0x1f4>)
 8002a36:	781a      	ldrb	r2, [r3, #0]
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <MultifunctionButton+0x1f8>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	f7fe faaa 	bl	8000f98 <Menu_system_control>
		break;
 8002a44:	e009      	b.n	8002a5a <MultifunctionButton+0x1ee>
	case LineDetect_Show:
		Menu_type = Main_menu;
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <MultifunctionButton+0x1f4>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
		line = 1;
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <MultifunctionButton+0x1f8>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
		cancer_menu = 0;
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <MultifunctionButton+0x22c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
		break;
 8002a58:	bf00      	nop
	}
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000001 	.word	0x20000001
 8002a64:	20000002 	.word	0x20000002
 8002a68:	20000005 	.word	0x20000005
 8002a6c:	20000224 	.word	0x20000224
 8002a70:	2000022c 	.word	0x2000022c
 8002a74:	3dcccccd 	.word	0x3dcccccd
 8002a78:	20000225 	.word	0x20000225
 8002a7c:	20000230 	.word	0x20000230
 8002a80:	20000226 	.word	0x20000226
 8002a84:	20000234 	.word	0x20000234
 8002a88:	20000227 	.word	0x20000227
 8002a8c:	20000006 	.word	0x20000006
 8002a90:	20000228 	.word	0x20000228
 8002a94:	20000008 	.word	0x20000008
 8002a98:	20000004 	.word	0x20000004

08002a9c <HAL_GPIO_EXTI_Callback>:

//Deboucing button program
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ButtonC_Pin && stateBTNC == 1)
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aac:	d10a      	bne.n	8002ac4 <HAL_GPIO_EXTI_Callback+0x28>
 8002aae:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <HAL_GPIO_EXTI_Callback+0x34>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d106      	bne.n	8002ac4 <HAL_GPIO_EXTI_Callback+0x28>
	{
		HAL_TIM_Base_Start_IT(&htim5);
 8002ab6:	4807      	ldr	r0, [pc, #28]	; (8002ad4 <HAL_GPIO_EXTI_Callback+0x38>)
 8002ab8:	f003 fbad 	bl	8006216 <HAL_TIM_Base_Start_IT>
		stateBTNC = 0;
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <HAL_GPIO_EXTI_Callback+0x34>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	e000      	b.n	8002ac6 <HAL_GPIO_EXTI_Callback+0x2a>
	}

	else
	{
		__NOP();
 8002ac4:	bf00      	nop
	}
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000003 	.word	0x20000003
 8002ad4:	20000384 	.word	0x20000384

08002ad8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim5.Instance)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d112      	bne.n	8002b12 <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		if (HAL_GPIO_ReadPin(ButtonC_GPIO_Port, ButtonC_Pin)
 8002aec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002af0:	480b      	ldr	r0, [pc, #44]	; (8002b20 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002af2:	f002 fa79 	bl	8004fe8 <HAL_GPIO_ReadPin>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <HAL_TIM_PeriodElapsedCallback+0x3a>
				== GPIO_PIN_RESET)
		{
			MultifunctionButton();
 8002afc:	f7ff feb6 	bl	800286c <MultifunctionButton>
			menu_display = 1;
 8002b00:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	701a      	strb	r2, [r3, #0]
			stateBTNC = 1;
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim5);
 8002b0c:	4803      	ldr	r0, [pc, #12]	; (8002b1c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002b0e:	f003 fba6 	bl	800625e <HAL_TIM_Base_Stop_IT>

		}
	}
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000384 	.word	0x20000384
 8002b20:	40020800 	.word	0x40020800
 8002b24:	20000000 	.word	0x20000000
 8002b28:	20000003 	.word	0x20000003

08002b2c <ReadFlash>:
void ReadFlash(void)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
	Flash_Read_Data(0x08020000, PID_Rx);
 8002b32:	4921      	ldr	r1, [pc, #132]	; (8002bb8 <ReadFlash+0x8c>)
 8002b34:	4821      	ldr	r0, [pc, #132]	; (8002bbc <ReadFlash+0x90>)
 8002b36:	f7ff f88f 	bl	8001c58 <Flash_Read_Data>
	Convert_To_Str(PID_Rx, string_2);
 8002b3a:	4921      	ldr	r1, [pc, #132]	; (8002bc0 <ReadFlash+0x94>)
 8002b3c:	481e      	ldr	r0, [pc, #120]	; (8002bb8 <ReadFlash+0x8c>)
 8002b3e:	f7ff f8aa 	bl	8001c96 <Convert_To_Str>
	char *KpinString = strtok(string_2," ");
 8002b42:	4920      	ldr	r1, [pc, #128]	; (8002bc4 <ReadFlash+0x98>)
 8002b44:	481e      	ldr	r0, [pc, #120]	; (8002bc0 <ReadFlash+0x94>)
 8002b46:	f006 f94f 	bl	8008de8 <strtok>
 8002b4a:	60f8      	str	r0, [r7, #12]
	char *KiinString = strtok(NULL," ");
 8002b4c:	491d      	ldr	r1, [pc, #116]	; (8002bc4 <ReadFlash+0x98>)
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f006 f94a 	bl	8008de8 <strtok>
 8002b54:	60b8      	str	r0, [r7, #8]
	char *KdinString = strtok(NULL," ");
 8002b56:	491b      	ldr	r1, [pc, #108]	; (8002bc4 <ReadFlash+0x98>)
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f006 f945 	bl	8008de8 <strtok>
 8002b5e:	6078      	str	r0, [r7, #4]
	Kp = strtod(KpinString, NULL);
 8002b60:	2100      	movs	r1, #0
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f006 f92c 	bl	8008dc0 <strtod>
 8002b68:	ec54 3b10 	vmov	r3, r4, d0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	4621      	mov	r1, r4
 8002b70:	f7fe f842 	bl	8000bf8 <__aeabi_d2f>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <ReadFlash+0x9c>)
 8002b78:	601a      	str	r2, [r3, #0]
	Ki = strtod(KiinString, NULL);
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	68b8      	ldr	r0, [r7, #8]
 8002b7e:	f006 f91f 	bl	8008dc0 <strtod>
 8002b82:	ec54 3b10 	vmov	r3, r4, d0
 8002b86:	4618      	mov	r0, r3
 8002b88:	4621      	mov	r1, r4
 8002b8a:	f7fe f835 	bl	8000bf8 <__aeabi_d2f>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <ReadFlash+0xa0>)
 8002b92:	601a      	str	r2, [r3, #0]
	Kd = strtod(KdinString, NULL);
 8002b94:	2100      	movs	r1, #0
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f006 f912 	bl	8008dc0 <strtod>
 8002b9c:	ec54 3b10 	vmov	r3, r4, d0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	f7fe f828 	bl	8000bf8 <__aeabi_d2f>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <ReadFlash+0xa4>)
 8002bac:	601a      	str	r2, [r3, #0]

}
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd90      	pop	{r4, r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	2000044c 	.word	0x2000044c
 8002bbc:	08020000 	.word	0x08020000
 8002bc0:	20000544 	.word	0x20000544
 8002bc4:	0800b240 	.word	0x0800b240
 8002bc8:	2000022c 	.word	0x2000022c
 8002bcc:	20000230 	.word	0x20000230
 8002bd0:	20000234 	.word	0x20000234

08002bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002bda:	e7fe      	b.n	8002bda <Error_Handler+0x6>

08002bdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <HAL_MspInit+0x4c>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <HAL_MspInit+0x4c>)
 8002bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <HAL_MspInit+0x4c>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfa:	607b      	str	r3, [r7, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_MspInit+0x4c>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	4a08      	ldr	r2, [pc, #32]	; (8002c28 <HAL_MspInit+0x4c>)
 8002c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_MspInit+0x4c>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40023800 	.word	0x40023800

08002c2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08a      	sub	sp, #40	; 0x28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a33      	ldr	r2, [pc, #204]	; (8002d18 <HAL_ADC_MspInit+0xec>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d15f      	bne.n	8002d0e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	4b32      	ldr	r3, [pc, #200]	; (8002d1c <HAL_ADC_MspInit+0xf0>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	4a31      	ldr	r2, [pc, #196]	; (8002d1c <HAL_ADC_MspInit+0xf0>)
 8002c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5e:	4b2f      	ldr	r3, [pc, #188]	; (8002d1c <HAL_ADC_MspInit+0xf0>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_ADC_MspInit+0xf0>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	4a2a      	ldr	r2, [pc, #168]	; (8002d1c <HAL_ADC_MspInit+0xf0>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7a:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <HAL_ADC_MspInit+0xf0>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002c86:	23fc      	movs	r3, #252	; 0xfc
 8002c88:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c92:	f107 0314 	add.w	r3, r7, #20
 8002c96:	4619      	mov	r1, r3
 8002c98:	4821      	ldr	r0, [pc, #132]	; (8002d20 <HAL_ADC_MspInit+0xf4>)
 8002c9a:	f002 f823 	bl	8004ce4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002c9e:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <HAL_ADC_MspInit+0xf8>)
 8002ca0:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <HAL_ADC_MspInit+0xfc>)
 8002ca2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002ca4:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <HAL_ADC_MspInit+0xf8>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002caa:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <HAL_ADC_MspInit+0xf8>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cb0:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <HAL_ADC_MspInit+0xf8>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <HAL_ADC_MspInit+0xf8>)
 8002cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cbc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cbe:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <HAL_ADC_MspInit+0xf8>)
 8002cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cc4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cc6:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <HAL_ADC_MspInit+0xf8>)
 8002cc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ccc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002cce:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_ADC_MspInit+0xf8>)
 8002cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cd4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002cd6:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <HAL_ADC_MspInit+0xf8>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <HAL_ADC_MspInit+0xf8>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ce2:	4810      	ldr	r0, [pc, #64]	; (8002d24 <HAL_ADC_MspInit+0xf8>)
 8002ce4:	f001 f99e 	bl	8004024 <HAL_DMA_Init>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002cee:	f7ff ff71 	bl	8002bd4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a0b      	ldr	r2, [pc, #44]	; (8002d24 <HAL_ADC_MspInit+0xf8>)
 8002cf6:	639a      	str	r2, [r3, #56]	; 0x38
 8002cf8:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <HAL_ADC_MspInit+0xf8>)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2100      	movs	r1, #0
 8002d02:	2012      	movs	r0, #18
 8002d04:	f001 f953 	bl	8003fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002d08:	2012      	movs	r0, #18
 8002d0a:	f001 f96c 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d0e:	bf00      	nop
 8002d10:	3728      	adds	r7, #40	; 0x28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40012000 	.word	0x40012000
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40020000 	.word	0x40020000
 8002d24:	20000464 	.word	0x20000464
 8002d28:	40026410 	.word	0x40026410

08002d2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	; 0x28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a28      	ldr	r2, [pc, #160]	; (8002dec <HAL_I2C_MspInit+0xc0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d14a      	bne.n	8002de4 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	4b27      	ldr	r3, [pc, #156]	; (8002df0 <HAL_I2C_MspInit+0xc4>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a26      	ldr	r2, [pc, #152]	; (8002df0 <HAL_I2C_MspInit+0xc4>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_I2C_MspInit+0xc4>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <HAL_I2C_MspInit+0xc4>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a1f      	ldr	r2, [pc, #124]	; (8002df0 <HAL_I2C_MspInit+0xc4>)
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <HAL_I2C_MspInit+0xc4>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d8c:	2312      	movs	r3, #18
 8002d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d90:	2301      	movs	r3, #1
 8002d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d94:	2303      	movs	r3, #3
 8002d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d98:	2304      	movs	r3, #4
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	4619      	mov	r1, r3
 8002da2:	4814      	ldr	r0, [pc, #80]	; (8002df4 <HAL_I2C_MspInit+0xc8>)
 8002da4:	f001 ff9e 	bl	8004ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002da8:	2310      	movs	r3, #16
 8002daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dac:	2312      	movs	r3, #18
 8002dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002db0:	2301      	movs	r3, #1
 8002db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db4:	2303      	movs	r3, #3
 8002db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002db8:	2309      	movs	r3, #9
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	480d      	ldr	r0, [pc, #52]	; (8002df8 <HAL_I2C_MspInit+0xcc>)
 8002dc4:	f001 ff8e 	bl	8004ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_I2C_MspInit+0xc4>)
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	4a07      	ldr	r2, [pc, #28]	; (8002df0 <HAL_I2C_MspInit+0xc4>)
 8002dd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_I2C_MspInit+0xc4>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002de4:	bf00      	nop
 8002de6:	3728      	adds	r7, #40	; 0x28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40005c00 	.word	0x40005c00
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40020000 	.word	0x40020000
 8002df8:	40020400 	.word	0x40020400

08002dfc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08c      	sub	sp, #48	; 0x30
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 031c 	add.w	r3, r7, #28
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1c:	d14b      	bne.n	8002eb6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a3e      	ldr	r2, [pc, #248]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2e:	4b3c      	ldr	r3, [pc, #240]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a37      	ldr	r2, [pc, #220]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b35      	ldr	r3, [pc, #212]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	4a30      	ldr	r2, [pc, #192]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e60:	f043 0302 	orr.w	r3, r3, #2
 8002e64:	6313      	str	r3, [r2, #48]	; 0x30
 8002e66:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e80:	2300      	movs	r3, #0
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e84:	2301      	movs	r3, #1
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e88:	f107 031c 	add.w	r3, r7, #28
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4825      	ldr	r0, [pc, #148]	; (8002f24 <HAL_TIM_Encoder_MspInit+0x128>)
 8002e90:	f001 ff28 	bl	8004ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e94:	2308      	movs	r3, #8
 8002e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea8:	f107 031c 	add.w	r3, r7, #28
 8002eac:	4619      	mov	r1, r3
 8002eae:	481e      	ldr	r0, [pc, #120]	; (8002f28 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002eb0:	f001 ff18 	bl	8004ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002eb4:	e030      	b.n	8002f18 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <HAL_TIM_Encoder_MspInit+0x130>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d12b      	bne.n	8002f18 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	4a15      	ldr	r2, [pc, #84]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x124>)
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed0:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002edc:	2300      	movs	r3, #0
 8002ede:	60bb      	str	r3, [r7, #8]
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	4a0e      	ldr	r2, [pc, #56]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ee6:	f043 0302 	orr.w	r3, r3, #2
 8002eea:	6313      	str	r3, [r2, #48]	; 0x30
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <HAL_TIM_Encoder_MspInit+0x124>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ef8:	23c0      	movs	r3, #192	; 0xc0
 8002efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efc:	2302      	movs	r3, #2
 8002efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f04:	2300      	movs	r3, #0
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f0c:	f107 031c 	add.w	r3, r7, #28
 8002f10:	4619      	mov	r1, r3
 8002f12:	4805      	ldr	r0, [pc, #20]	; (8002f28 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002f14:	f001 fee6 	bl	8004ce4 <HAL_GPIO_Init>
}
 8002f18:	bf00      	nop
 8002f1a:	3730      	adds	r7, #48	; 0x30
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40020000 	.word	0x40020000
 8002f28:	40020400 	.word	0x40020400
 8002f2c:	40000800 	.word	0x40000800

08002f30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a0b      	ldr	r2, [pc, #44]	; (8002f6c <HAL_TIM_PWM_MspInit+0x3c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d10d      	bne.n	8002f5e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <HAL_TIM_PWM_MspInit+0x40>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <HAL_TIM_PWM_MspInit+0x40>)
 8002f4c:	f043 0302 	orr.w	r3, r3, #2
 8002f50:	6413      	str	r3, [r2, #64]	; 0x40
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <HAL_TIM_PWM_MspInit+0x40>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40000400 	.word	0x40000400
 8002f70:	40023800 	.word	0x40023800

08002f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0e      	ldr	r2, [pc, #56]	; (8002fbc <HAL_TIM_Base_MspInit+0x48>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d115      	bne.n	8002fb2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <HAL_TIM_Base_MspInit+0x4c>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	4a0c      	ldr	r2, [pc, #48]	; (8002fc0 <HAL_TIM_Base_MspInit+0x4c>)
 8002f90:	f043 0308 	orr.w	r3, r3, #8
 8002f94:	6413      	str	r3, [r2, #64]	; 0x40
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <HAL_TIM_Base_MspInit+0x4c>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	2032      	movs	r0, #50	; 0x32
 8002fa8:	f001 f801 	bl	8003fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002fac:	2032      	movs	r0, #50	; 0x32
 8002fae:	f001 f81a 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40000c00 	.word	0x40000c00
 8002fc0:	40023800 	.word	0x40023800

08002fc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fcc:	f107 030c 	add.w	r3, r7, #12
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a12      	ldr	r2, [pc, #72]	; (800302c <HAL_TIM_MspPostInit+0x68>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d11d      	bne.n	8003022 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HAL_TIM_MspPostInit+0x6c>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	4a10      	ldr	r2, [pc, #64]	; (8003030 <HAL_TIM_MspPostInit+0x6c>)
 8002ff0:	f043 0302 	orr.w	r3, r3, #2
 8002ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff6:	4b0e      	ldr	r3, [pc, #56]	; (8003030 <HAL_TIM_MspPostInit+0x6c>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003002:	2303      	movs	r3, #3
 8003004:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003006:	2302      	movs	r3, #2
 8003008:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003012:	2302      	movs	r3, #2
 8003014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003016:	f107 030c 	add.w	r3, r7, #12
 800301a:	4619      	mov	r1, r3
 800301c:	4805      	ldr	r0, [pc, #20]	; (8003034 <HAL_TIM_MspPostInit+0x70>)
 800301e:	f001 fe61 	bl	8004ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003022:	bf00      	nop
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40000400 	.word	0x40000400
 8003030:	40023800 	.word	0x40023800
 8003034:	40020400 	.word	0x40020400

08003038 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	; 0x28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a19      	ldr	r2, [pc, #100]	; (80030bc <HAL_UART_MspInit+0x84>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d12c      	bne.n	80030b4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <HAL_UART_MspInit+0x88>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	4a17      	ldr	r2, [pc, #92]	; (80030c0 <HAL_UART_MspInit+0x88>)
 8003064:	f043 0320 	orr.w	r3, r3, #32
 8003068:	6453      	str	r3, [r2, #68]	; 0x44
 800306a:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <HAL_UART_MspInit+0x88>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <HAL_UART_MspInit+0x88>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	4a10      	ldr	r2, [pc, #64]	; (80030c0 <HAL_UART_MspInit+0x88>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6313      	str	r3, [r2, #48]	; 0x30
 8003086:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <HAL_UART_MspInit+0x88>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003092:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	2302      	movs	r3, #2
 800309a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309c:	2300      	movs	r3, #0
 800309e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a0:	2303      	movs	r3, #3
 80030a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80030a4:	2308      	movs	r3, #8
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	4619      	mov	r1, r3
 80030ae:	4805      	ldr	r0, [pc, #20]	; (80030c4 <HAL_UART_MspInit+0x8c>)
 80030b0:	f001 fe18 	bl	8004ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80030b4:	bf00      	nop
 80030b6:	3728      	adds	r7, #40	; 0x28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40011400 	.word	0x40011400
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40020000 	.word	0x40020000

080030c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030cc:	e7fe      	b.n	80030cc <NMI_Handler+0x4>

080030ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030d2:	e7fe      	b.n	80030d2 <HardFault_Handler+0x4>

080030d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030d8:	e7fe      	b.n	80030d8 <MemManage_Handler+0x4>

080030da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030da:	b480      	push	{r7}
 80030dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030de:	e7fe      	b.n	80030de <BusFault_Handler+0x4>

080030e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e4:	e7fe      	b.n	80030e4 <UsageFault_Handler+0x4>

080030e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030e6:	b480      	push	{r7}
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030f8:	bf00      	nop
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003102:	b480      	push	{r7}
 8003104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003114:	f000 f8f0 	bl	80032f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003118:	bf00      	nop
 800311a:	bd80      	pop	{r7, pc}

0800311c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003120:	4802      	ldr	r0, [pc, #8]	; (800312c <ADC_IRQHandler+0x10>)
 8003122:	f000 f96e 	bl	8003402 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000404 	.word	0x20000404

08003130 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003134:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003138:	f001 ff88 	bl	800504c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800313c:	bf00      	nop
 800313e:	bd80      	pop	{r7, pc}

08003140 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003144:	4802      	ldr	r0, [pc, #8]	; (8003150 <TIM5_IRQHandler+0x10>)
 8003146:	f003 f9a5 	bl	8006494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000384 	.word	0x20000384

08003154 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003158:	4802      	ldr	r0, [pc, #8]	; (8003164 <DMA2_Stream0_IRQHandler+0x10>)
 800315a:	f001 f869 	bl	8004230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000464 	.word	0x20000464

08003168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003170:	4a14      	ldr	r2, [pc, #80]	; (80031c4 <_sbrk+0x5c>)
 8003172:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <_sbrk+0x60>)
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800317c:	4b13      	ldr	r3, [pc, #76]	; (80031cc <_sbrk+0x64>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d102      	bne.n	800318a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003184:	4b11      	ldr	r3, [pc, #68]	; (80031cc <_sbrk+0x64>)
 8003186:	4a12      	ldr	r2, [pc, #72]	; (80031d0 <_sbrk+0x68>)
 8003188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <_sbrk+0x64>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	429a      	cmp	r2, r3
 8003196:	d207      	bcs.n	80031a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003198:	f004 fb42 	bl	8007820 <__errno>
 800319c:	4602      	mov	r2, r0
 800319e:	230c      	movs	r3, #12
 80031a0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80031a2:	f04f 33ff 	mov.w	r3, #4294967295
 80031a6:	e009      	b.n	80031bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031a8:	4b08      	ldr	r3, [pc, #32]	; (80031cc <_sbrk+0x64>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031ae:	4b07      	ldr	r3, [pc, #28]	; (80031cc <_sbrk+0x64>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	4a05      	ldr	r2, [pc, #20]	; (80031cc <_sbrk+0x64>)
 80031b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ba:	68fb      	ldr	r3, [r7, #12]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20010000 	.word	0x20010000
 80031c8:	00000400 	.word	0x00000400
 80031cc:	20000238 	.word	0x20000238
 80031d0:	20000570 	.word	0x20000570

080031d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031d8:	4b08      	ldr	r3, [pc, #32]	; (80031fc <SystemInit+0x28>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	4a07      	ldr	r2, [pc, #28]	; (80031fc <SystemInit+0x28>)
 80031e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <SystemInit+0x28>)
 80031ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031ee:	609a      	str	r2, [r3, #8]
#endif
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003238 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003204:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003206:	e003      	b.n	8003210 <LoopCopyDataInit>

08003208 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800320a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800320c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800320e:	3104      	adds	r1, #4

08003210 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003210:	480b      	ldr	r0, [pc, #44]	; (8003240 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003212:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003214:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003216:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003218:	d3f6      	bcc.n	8003208 <CopyDataInit>
  ldr  r2, =_sbss
 800321a:	4a0b      	ldr	r2, [pc, #44]	; (8003248 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800321c:	e002      	b.n	8003224 <LoopFillZerobss>

0800321e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800321e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003220:	f842 3b04 	str.w	r3, [r2], #4

08003224 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003224:	4b09      	ldr	r3, [pc, #36]	; (800324c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003226:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003228:	d3f9      	bcc.n	800321e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800322a:	f7ff ffd3 	bl	80031d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800322e:	f004 fafd 	bl	800782c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003232:	f7fe fe47 	bl	8001ec4 <main>
  bx  lr    
 8003236:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003238:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800323c:	0800b588 	.word	0x0800b588
  ldr  r0, =_sdata
 8003240:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003244:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8003248:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 800324c:	20000570 	.word	0x20000570

08003250 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003250:	e7fe      	b.n	8003250 <DMA1_Stream0_IRQHandler>
	...

08003254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003258:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <HAL_Init+0x40>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a0d      	ldr	r2, [pc, #52]	; (8003294 <HAL_Init+0x40>)
 800325e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <HAL_Init+0x40>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <HAL_Init+0x40>)
 800326a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800326e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003270:	4b08      	ldr	r3, [pc, #32]	; (8003294 <HAL_Init+0x40>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a07      	ldr	r2, [pc, #28]	; (8003294 <HAL_Init+0x40>)
 8003276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800327c:	2003      	movs	r0, #3
 800327e:	f000 fe8b 	bl	8003f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003282:	2000      	movs	r0, #0
 8003284:	f000 f808 	bl	8003298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003288:	f7ff fca8 	bl	8002bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023c00 	.word	0x40023c00

08003298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032a0:	4b12      	ldr	r3, [pc, #72]	; (80032ec <HAL_InitTick+0x54>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <HAL_InitTick+0x58>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	4619      	mov	r1, r3
 80032aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80032b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fea7 	bl	800400a <HAL_SYSTICK_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e00e      	b.n	80032e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b0f      	cmp	r3, #15
 80032ca:	d80a      	bhi.n	80032e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032cc:	2200      	movs	r2, #0
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295
 80032d4:	f000 fe6b 	bl	8003fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032d8:	4a06      	ldr	r2, [pc, #24]	; (80032f4 <HAL_InitTick+0x5c>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	e000      	b.n	80032e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20000018 	.word	0x20000018
 80032f0:	20000020 	.word	0x20000020
 80032f4:	2000001c 	.word	0x2000001c

080032f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <HAL_IncTick+0x20>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <HAL_IncTick+0x24>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4413      	add	r3, r2
 8003308:	4a04      	ldr	r2, [pc, #16]	; (800331c <HAL_IncTick+0x24>)
 800330a:	6013      	str	r3, [r2, #0]
}
 800330c:	bf00      	nop
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	20000020 	.word	0x20000020
 800331c:	20000548 	.word	0x20000548

08003320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return uwTick;
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <HAL_GetTick+0x14>)
 8003326:	681b      	ldr	r3, [r3, #0]
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000548 	.word	0x20000548

08003338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003340:	f7ff ffee 	bl	8003320 <HAL_GetTick>
 8003344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d005      	beq.n	800335e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003352:	4b09      	ldr	r3, [pc, #36]	; (8003378 <HAL_Delay+0x40>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800335e:	bf00      	nop
 8003360:	f7ff ffde 	bl	8003320 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	429a      	cmp	r2, r3
 800336e:	d8f7      	bhi.n	8003360 <HAL_Delay+0x28>
  {
  }
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20000020 	.word	0x20000020

0800337c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e033      	b.n	80033fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff fc46 	bl	8002c2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d118      	bne.n	80033ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033c2:	f023 0302 	bic.w	r3, r3, #2
 80033c6:	f043 0202 	orr.w	r2, r3, #2
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fb76 	bl	8003ac0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f023 0303 	bic.w	r3, r3, #3
 80033e2:	f043 0201 	orr.w	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40
 80033ea:	e001      	b.n	80033f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	2300      	movs	r3, #0
 8003410:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b02      	cmp	r3, #2
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b20      	cmp	r3, #32
 8003434:	bf0c      	ite	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	2300      	movne	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d049      	beq.n	80034d8 <HAL_ADC_IRQHandler+0xd6>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d046      	beq.n	80034d8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	d105      	bne.n	8003462 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d12b      	bne.n	80034c8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003474:	2b00      	cmp	r3, #0
 8003476:	d127      	bne.n	80034c8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003482:	2b00      	cmp	r3, #0
 8003484:	d006      	beq.n	8003494 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003490:	2b00      	cmp	r3, #0
 8003492:	d119      	bne.n	80034c8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0220 	bic.w	r2, r2, #32
 80034a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d105      	bne.n	80034c8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	f043 0201 	orr.w	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f9af 	bl	800382c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f06f 0212 	mvn.w	r2, #18
 80034d6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	bf0c      	ite	eq
 80034e6:	2301      	moveq	r3, #1
 80034e8:	2300      	movne	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d057      	beq.n	80035ba <HAL_ADC_IRQHandler+0x1b8>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d054      	beq.n	80035ba <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	d105      	bne.n	8003528 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d139      	bne.n	80035aa <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003540:	2b00      	cmp	r3, #0
 8003542:	d006      	beq.n	8003552 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800354e:	2b00      	cmp	r3, #0
 8003550:	d12b      	bne.n	80035aa <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800355c:	2b00      	cmp	r3, #0
 800355e:	d124      	bne.n	80035aa <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800356a:	2b00      	cmp	r3, #0
 800356c:	d11d      	bne.n	80035aa <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003572:	2b00      	cmp	r3, #0
 8003574:	d119      	bne.n	80035aa <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003584:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d105      	bne.n	80035aa <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f043 0201 	orr.w	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fc06 	bl	8003dbc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 020c 	mvn.w	r2, #12
 80035b8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	bf0c      	ite	eq
 80035de:	2301      	moveq	r3, #1
 80035e0:	2300      	movne	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d017      	beq.n	800361c <HAL_ADC_IRQHandler+0x21a>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d014      	beq.n	800361c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d10d      	bne.n	800361c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f921 	bl	8003854 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f06f 0201 	mvn.w	r2, #1
 800361a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b20      	cmp	r3, #32
 8003628:	bf0c      	ite	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	2300      	movne	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800363c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003640:	bf0c      	ite	eq
 8003642:	2301      	moveq	r3, #1
 8003644:	2300      	movne	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d015      	beq.n	800367c <HAL_ADC_IRQHandler+0x27a>
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d012      	beq.n	800367c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	f043 0202 	orr.w	r2, r3, #2
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f06f 0220 	mvn.w	r2, #32
 800366a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f8fb 	bl	8003868 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f06f 0220 	mvn.w	r2, #32
 800367a:	601a      	str	r2, [r3, #0]
  }
}
 800367c:	bf00      	nop
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_ADC_Start_DMA+0x1e>
 800369e:	2302      	movs	r3, #2
 80036a0:	e0b1      	b.n	8003806 <HAL_ADC_Start_DMA+0x182>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d018      	beq.n	80036ea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036c8:	4b51      	ldr	r3, [pc, #324]	; (8003810 <HAL_ADC_Start_DMA+0x18c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a51      	ldr	r2, [pc, #324]	; (8003814 <HAL_ADC_Start_DMA+0x190>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	0c9a      	lsrs	r2, r3, #18
 80036d4:	4613      	mov	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4413      	add	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80036dc:	e002      	b.n	80036e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f9      	bne.n	80036de <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	f040 8085 	bne.w	8003804 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003718:	2b00      	cmp	r3, #0
 800371a:	d007      	beq.n	800372c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003724:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003738:	d106      	bne.n	8003748 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	f023 0206 	bic.w	r2, r3, #6
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	645a      	str	r2, [r3, #68]	; 0x44
 8003746:	e002      	b.n	800374e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003756:	4b30      	ldr	r3, [pc, #192]	; (8003818 <HAL_ADC_Start_DMA+0x194>)
 8003758:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	4a2f      	ldr	r2, [pc, #188]	; (800381c <HAL_ADC_Start_DMA+0x198>)
 8003760:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	4a2e      	ldr	r2, [pc, #184]	; (8003820 <HAL_ADC_Start_DMA+0x19c>)
 8003768:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	4a2d      	ldr	r2, [pc, #180]	; (8003824 <HAL_ADC_Start_DMA+0x1a0>)
 8003770:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800377a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800378a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800379a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	334c      	adds	r3, #76	; 0x4c
 80037a6:	4619      	mov	r1, r3
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f000 fce8 	bl	8004180 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 031f 	and.w	r3, r3, #31
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10f      	bne.n	80037dc <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d11c      	bne.n	8003804 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037d8:	609a      	str	r2, [r3, #8]
 80037da:	e013      	b.n	8003804 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a11      	ldr	r2, [pc, #68]	; (8003828 <HAL_ADC_Start_DMA+0x1a4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d10e      	bne.n	8003804 <HAL_ADC_Start_DMA+0x180>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d107      	bne.n	8003804 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003802:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000018 	.word	0x20000018
 8003814:	431bde83 	.word	0x431bde83
 8003818:	40012300 	.word	0x40012300
 800381c:	08003cb9 	.word	0x08003cb9
 8003820:	08003d73 	.word	0x08003d73
 8003824:	08003d8f 	.word	0x08003d8f
 8003828:	40012000 	.word	0x40012000

0800382c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x1c>
 8003894:	2302      	movs	r3, #2
 8003896:	e105      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0x228>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b09      	cmp	r3, #9
 80038a6:	d925      	bls.n	80038f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68d9      	ldr	r1, [r3, #12]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	4613      	mov	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	4413      	add	r3, r2
 80038bc:	3b1e      	subs	r3, #30
 80038be:	2207      	movs	r2, #7
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	43da      	mvns	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	400a      	ands	r2, r1
 80038cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68d9      	ldr	r1, [r3, #12]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	4618      	mov	r0, r3
 80038e0:	4603      	mov	r3, r0
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	4403      	add	r3, r0
 80038e6:	3b1e      	subs	r3, #30
 80038e8:	409a      	lsls	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	e022      	b.n	800393a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6919      	ldr	r1, [r3, #16]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	4613      	mov	r3, r2
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	4413      	add	r3, r2
 8003908:	2207      	movs	r2, #7
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43da      	mvns	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	400a      	ands	r2, r1
 8003916:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6919      	ldr	r1, [r3, #16]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	b29b      	uxth	r3, r3
 8003928:	4618      	mov	r0, r3
 800392a:	4603      	mov	r3, r0
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	4403      	add	r3, r0
 8003930:	409a      	lsls	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b06      	cmp	r3, #6
 8003940:	d824      	bhi.n	800398c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	3b05      	subs	r3, #5
 8003954:	221f      	movs	r2, #31
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43da      	mvns	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	400a      	ands	r2, r1
 8003962:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	b29b      	uxth	r3, r3
 8003970:	4618      	mov	r0, r3
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	3b05      	subs	r3, #5
 800397e:	fa00 f203 	lsl.w	r2, r0, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	635a      	str	r2, [r3, #52]	; 0x34
 800398a:	e04c      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b0c      	cmp	r3, #12
 8003992:	d824      	bhi.n	80039de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	3b23      	subs	r3, #35	; 0x23
 80039a6:	221f      	movs	r2, #31
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43da      	mvns	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	400a      	ands	r2, r1
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	4618      	mov	r0, r3
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	3b23      	subs	r3, #35	; 0x23
 80039d0:	fa00 f203 	lsl.w	r2, r0, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
 80039dc:	e023      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	3b41      	subs	r3, #65	; 0x41
 80039f0:	221f      	movs	r2, #31
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43da      	mvns	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	400a      	ands	r2, r1
 80039fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	3b41      	subs	r3, #65	; 0x41
 8003a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a26:	4b22      	ldr	r3, [pc, #136]	; (8003ab0 <HAL_ADC_ConfigChannel+0x234>)
 8003a28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a21      	ldr	r2, [pc, #132]	; (8003ab4 <HAL_ADC_ConfigChannel+0x238>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d109      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x1cc>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b12      	cmp	r3, #18
 8003a3a:	d105      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a19      	ldr	r2, [pc, #100]	; (8003ab4 <HAL_ADC_ConfigChannel+0x238>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d123      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x21e>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b10      	cmp	r3, #16
 8003a58:	d003      	beq.n	8003a62 <HAL_ADC_ConfigChannel+0x1e6>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b11      	cmp	r3, #17
 8003a60:	d11b      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b10      	cmp	r3, #16
 8003a74:	d111      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <HAL_ADC_ConfigChannel+0x23c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a10      	ldr	r2, [pc, #64]	; (8003abc <HAL_ADC_ConfigChannel+0x240>)
 8003a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a80:	0c9a      	lsrs	r2, r3, #18
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a8c:	e002      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f9      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	40012300 	.word	0x40012300
 8003ab4:	40012000 	.word	0x40012000
 8003ab8:	20000018 	.word	0x20000018
 8003abc:	431bde83 	.word	0x431bde83

08003ac0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ac8:	4b79      	ldr	r3, [pc, #484]	; (8003cb0 <ADC_Init+0x1f0>)
 8003aca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003af4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6859      	ldr	r1, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	021a      	lsls	r2, r3, #8
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6859      	ldr	r1, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6899      	ldr	r1, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	4a58      	ldr	r2, [pc, #352]	; (8003cb4 <ADC_Init+0x1f4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d022      	beq.n	8003b9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6899      	ldr	r1, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6899      	ldr	r1, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	609a      	str	r2, [r3, #8]
 8003b9c:	e00f      	b.n	8003bbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0202 	bic.w	r2, r2, #2
 8003bcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6899      	ldr	r1, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	7e1b      	ldrb	r3, [r3, #24]
 8003bd8:	005a      	lsls	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01b      	beq.n	8003c24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bfa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6859      	ldr	r1, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	3b01      	subs	r3, #1
 8003c18:	035a      	lsls	r2, r3, #13
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	e007      	b.n	8003c34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	051a      	lsls	r2, r3, #20
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6899      	ldr	r1, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c76:	025a      	lsls	r2, r3, #9
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6899      	ldr	r1, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	029a      	lsls	r2, r3, #10
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	609a      	str	r2, [r3, #8]
}
 8003ca4:	bf00      	nop
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	40012300 	.word	0x40012300
 8003cb4:	0f000001 	.word	0x0f000001

08003cb8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d13c      	bne.n	8003d4c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d12b      	bne.n	8003d44 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d127      	bne.n	8003d44 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d006      	beq.n	8003d10 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d119      	bne.n	8003d44 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0220 	bic.w	r2, r2, #32
 8003d1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d105      	bne.n	8003d44 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	f043 0201 	orr.w	r2, r3, #1
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f7ff fd71 	bl	800382c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d4a:	e00e      	b.n	8003d6a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f7ff fd85 	bl	8003868 <HAL_ADC_ErrorCallback>
}
 8003d5e:	e004      	b.n	8003d6a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
}
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f7ff fd5d 	bl	8003840 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2240      	movs	r2, #64	; 0x40
 8003da0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	f043 0204 	orr.w	r2, r3, #4
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f7ff fd5a 	bl	8003868 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003db4:	bf00      	nop
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <__NVIC_SetPriorityGrouping+0x44>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dec:	4013      	ands	r3, r2
 8003dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e02:	4a04      	ldr	r2, [pc, #16]	; (8003e14 <__NVIC_SetPriorityGrouping+0x44>)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	60d3      	str	r3, [r2, #12]
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	e000ed00 	.word	0xe000ed00

08003e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e1c:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <__NVIC_GetPriorityGrouping+0x18>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	0a1b      	lsrs	r3, r3, #8
 8003e22:	f003 0307 	and.w	r3, r3, #7
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	e000ed00 	.word	0xe000ed00

08003e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	db0b      	blt.n	8003e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	f003 021f 	and.w	r2, r3, #31
 8003e4c:	4907      	ldr	r1, [pc, #28]	; (8003e6c <__NVIC_EnableIRQ+0x38>)
 8003e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	2001      	movs	r0, #1
 8003e56:	fa00 f202 	lsl.w	r2, r0, r2
 8003e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	e000e100 	.word	0xe000e100

08003e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	6039      	str	r1, [r7, #0]
 8003e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	db0a      	blt.n	8003e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	490c      	ldr	r1, [pc, #48]	; (8003ebc <__NVIC_SetPriority+0x4c>)
 8003e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8e:	0112      	lsls	r2, r2, #4
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	440b      	add	r3, r1
 8003e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e98:	e00a      	b.n	8003eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	4908      	ldr	r1, [pc, #32]	; (8003ec0 <__NVIC_SetPriority+0x50>)
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	3b04      	subs	r3, #4
 8003ea8:	0112      	lsls	r2, r2, #4
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	440b      	add	r3, r1
 8003eae:	761a      	strb	r2, [r3, #24]
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000e100 	.word	0xe000e100
 8003ec0:	e000ed00 	.word	0xe000ed00

08003ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b089      	sub	sp, #36	; 0x24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f1c3 0307 	rsb	r3, r3, #7
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	bf28      	it	cs
 8003ee2:	2304      	movcs	r3, #4
 8003ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	2b06      	cmp	r3, #6
 8003eec:	d902      	bls.n	8003ef4 <NVIC_EncodePriority+0x30>
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	3b03      	subs	r3, #3
 8003ef2:	e000      	b.n	8003ef6 <NVIC_EncodePriority+0x32>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43da      	mvns	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	401a      	ands	r2, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	fa01 f303 	lsl.w	r3, r1, r3
 8003f16:	43d9      	mvns	r1, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f1c:	4313      	orrs	r3, r2
         );
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3724      	adds	r7, #36	; 0x24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f30:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <__NVIC_SystemReset+0x20>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003f3c:	4903      	ldr	r1, [pc, #12]	; (8003f4c <__NVIC_SystemReset+0x20>)
 8003f3e:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <__NVIC_SystemReset+0x24>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60cb      	str	r3, [r1, #12]
 8003f44:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003f48:	bf00      	nop
 8003f4a:	e7fd      	b.n	8003f48 <__NVIC_SystemReset+0x1c>
 8003f4c:	e000ed00 	.word	0xe000ed00
 8003f50:	05fa0004 	.word	0x05fa0004

08003f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f64:	d301      	bcc.n	8003f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f66:	2301      	movs	r3, #1
 8003f68:	e00f      	b.n	8003f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f6a:	4a0a      	ldr	r2, [pc, #40]	; (8003f94 <SysTick_Config+0x40>)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f72:	210f      	movs	r1, #15
 8003f74:	f04f 30ff 	mov.w	r0, #4294967295
 8003f78:	f7ff ff7a 	bl	8003e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <SysTick_Config+0x40>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f82:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <SysTick_Config+0x40>)
 8003f84:	2207      	movs	r2, #7
 8003f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	e000e010 	.word	0xe000e010

08003f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7ff ff15 	bl	8003dd0 <__NVIC_SetPriorityGrouping>
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b086      	sub	sp, #24
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	607a      	str	r2, [r7, #4]
 8003fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fc0:	f7ff ff2a 	bl	8003e18 <__NVIC_GetPriorityGrouping>
 8003fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	6978      	ldr	r0, [r7, #20]
 8003fcc:	f7ff ff7a 	bl	8003ec4 <NVIC_EncodePriority>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff ff49 	bl	8003e70 <__NVIC_SetPriority>
}
 8003fde:	bf00      	nop
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	4603      	mov	r3, r0
 8003fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff ff1d 	bl	8003e34 <__NVIC_EnableIRQ>
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004006:	f7ff ff91 	bl	8003f2c <__NVIC_SystemReset>

0800400a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff ff9e 	bl	8003f54 <SysTick_Config>
 8004018:	4603      	mov	r3, r0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004030:	f7ff f976 	bl	8003320 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e099      	b.n	8004174 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004060:	e00f      	b.n	8004082 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004062:	f7ff f95d 	bl	8003320 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b05      	cmp	r3, #5
 800406e:	d908      	bls.n	8004082 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2203      	movs	r2, #3
 800407a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e078      	b.n	8004174 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e8      	bne.n	8004062 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4b38      	ldr	r3, [pc, #224]	; (800417c <HAL_DMA_Init+0x158>)
 800409c:	4013      	ands	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d107      	bne.n	80040ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	4313      	orrs	r3, r2
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0307 	bic.w	r3, r3, #7
 8004102:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	2b04      	cmp	r3, #4
 8004114:	d117      	bne.n	8004146 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00e      	beq.n	8004146 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fa6f 	bl	800460c <DMA_CheckFifoParam>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2240      	movs	r2, #64	; 0x40
 8004138:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004142:	2301      	movs	r3, #1
 8004144:	e016      	b.n	8004174 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fa26 	bl	80045a0 <DMA_CalcBaseAndBitshift>
 8004154:	4603      	mov	r3, r0
 8004156:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415c:	223f      	movs	r2, #63	; 0x3f
 800415e:	409a      	lsls	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	f010803f 	.word	0xf010803f

08004180 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004196:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_DMA_Start_IT+0x26>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e040      	b.n	8004228 <HAL_DMA_Start_IT+0xa8>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d12f      	bne.n	800421a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2202      	movs	r2, #2
 80041be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68b9      	ldr	r1, [r7, #8]
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f9b8 	bl	8004544 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d8:	223f      	movs	r2, #63	; 0x3f
 80041da:	409a      	lsls	r2, r3
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0216 	orr.w	r2, r2, #22
 80041ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d007      	beq.n	8004208 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0208 	orr.w	r2, r2, #8
 8004206:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	e005      	b.n	8004226 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004222:	2302      	movs	r3, #2
 8004224:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004226:	7dfb      	ldrb	r3, [r7, #23]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800423c:	4b92      	ldr	r3, [pc, #584]	; (8004488 <HAL_DMA_IRQHandler+0x258>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a92      	ldr	r2, [pc, #584]	; (800448c <HAL_DMA_IRQHandler+0x25c>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	0a9b      	lsrs	r3, r3, #10
 8004248:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425a:	2208      	movs	r2, #8
 800425c:	409a      	lsls	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4013      	ands	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d01a      	beq.n	800429c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d013      	beq.n	800429c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0204 	bic.w	r2, r2, #4
 8004282:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004288:	2208      	movs	r2, #8
 800428a:	409a      	lsls	r2, r3
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004294:	f043 0201 	orr.w	r2, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a0:	2201      	movs	r2, #1
 80042a2:	409a      	lsls	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d012      	beq.n	80042d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00b      	beq.n	80042d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042be:	2201      	movs	r2, #1
 80042c0:	409a      	lsls	r2, r3
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ca:	f043 0202 	orr.w	r2, r3, #2
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d6:	2204      	movs	r2, #4
 80042d8:	409a      	lsls	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4013      	ands	r3, r2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d012      	beq.n	8004308 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00b      	beq.n	8004308 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f4:	2204      	movs	r2, #4
 80042f6:	409a      	lsls	r2, r3
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004300:	f043 0204 	orr.w	r2, r3, #4
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430c:	2210      	movs	r2, #16
 800430e:	409a      	lsls	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d043      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d03c      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	2210      	movs	r2, #16
 800432c:	409a      	lsls	r2, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d018      	beq.n	8004372 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d108      	bne.n	8004360 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	d024      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	4798      	blx	r3
 800435e:	e01f      	b.n	80043a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01b      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	4798      	blx	r3
 8004370:	e016      	b.n	80043a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d107      	bne.n	8004390 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0208 	bic.w	r2, r2, #8
 800438e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a4:	2220      	movs	r2, #32
 80043a6:	409a      	lsls	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 808e 	beq.w	80044ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8086 	beq.w	80044ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c6:	2220      	movs	r2, #32
 80043c8:	409a      	lsls	r2, r3
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b05      	cmp	r3, #5
 80043d8:	d136      	bne.n	8004448 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0216 	bic.w	r2, r2, #22
 80043e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695a      	ldr	r2, [r3, #20]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d103      	bne.n	800440a <HAL_DMA_IRQHandler+0x1da>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004406:	2b00      	cmp	r3, #0
 8004408:	d007      	beq.n	800441a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0208 	bic.w	r2, r2, #8
 8004418:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441e:	223f      	movs	r2, #63	; 0x3f
 8004420:	409a      	lsls	r2, r3
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800443a:	2b00      	cmp	r3, #0
 800443c:	d07d      	beq.n	800453a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
        }
        return;
 8004446:	e078      	b.n	800453a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d01c      	beq.n	8004490 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d108      	bne.n	8004476 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004468:	2b00      	cmp	r3, #0
 800446a:	d030      	beq.n	80044ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	4798      	blx	r3
 8004474:	e02b      	b.n	80044ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d027      	beq.n	80044ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	4798      	blx	r3
 8004486:	e022      	b.n	80044ce <HAL_DMA_IRQHandler+0x29e>
 8004488:	20000018 	.word	0x20000018
 800448c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10f      	bne.n	80044be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0210 	bic.w	r2, r2, #16
 80044ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d032      	beq.n	800453c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d022      	beq.n	8004528 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2205      	movs	r2, #5
 80044e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0201 	bic.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	3301      	adds	r3, #1
 80044fe:	60bb      	str	r3, [r7, #8]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	429a      	cmp	r2, r3
 8004504:	d307      	bcc.n	8004516 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1f2      	bne.n	80044fa <HAL_DMA_IRQHandler+0x2ca>
 8004514:	e000      	b.n	8004518 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004516:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	4798      	blx	r3
 8004538:	e000      	b.n	800453c <HAL_DMA_IRQHandler+0x30c>
        return;
 800453a:	bf00      	nop
    }
  }
}
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop

08004544 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004560:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b40      	cmp	r3, #64	; 0x40
 8004570:	d108      	bne.n	8004584 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004582:	e007      	b.n	8004594 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	60da      	str	r2, [r3, #12]
}
 8004594:	bf00      	nop
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	3b10      	subs	r3, #16
 80045b0:	4a14      	ldr	r2, [pc, #80]	; (8004604 <DMA_CalcBaseAndBitshift+0x64>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	091b      	lsrs	r3, r3, #4
 80045b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045ba:	4a13      	ldr	r2, [pc, #76]	; (8004608 <DMA_CalcBaseAndBitshift+0x68>)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d909      	bls.n	80045e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045d6:	f023 0303 	bic.w	r3, r3, #3
 80045da:	1d1a      	adds	r2, r3, #4
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	659a      	str	r2, [r3, #88]	; 0x58
 80045e0:	e007      	b.n	80045f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045ea:	f023 0303 	bic.w	r3, r3, #3
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	aaaaaaab 	.word	0xaaaaaaab
 8004608:	0800b25c 	.word	0x0800b25c

0800460c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d11f      	bne.n	8004666 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b03      	cmp	r3, #3
 800462a:	d855      	bhi.n	80046d8 <DMA_CheckFifoParam+0xcc>
 800462c:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <DMA_CheckFifoParam+0x28>)
 800462e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004632:	bf00      	nop
 8004634:	08004645 	.word	0x08004645
 8004638:	08004657 	.word	0x08004657
 800463c:	08004645 	.word	0x08004645
 8004640:	080046d9 	.word	0x080046d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d045      	beq.n	80046dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004654:	e042      	b.n	80046dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800465e:	d13f      	bne.n	80046e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004664:	e03c      	b.n	80046e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800466e:	d121      	bne.n	80046b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b03      	cmp	r3, #3
 8004674:	d836      	bhi.n	80046e4 <DMA_CheckFifoParam+0xd8>
 8004676:	a201      	add	r2, pc, #4	; (adr r2, 800467c <DMA_CheckFifoParam+0x70>)
 8004678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467c:	0800468d 	.word	0x0800468d
 8004680:	08004693 	.word	0x08004693
 8004684:	0800468d 	.word	0x0800468d
 8004688:	080046a5 	.word	0x080046a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
      break;
 8004690:	e02f      	b.n	80046f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d024      	beq.n	80046e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046a2:	e021      	b.n	80046e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046ac:	d11e      	bne.n	80046ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046b2:	e01b      	b.n	80046ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d902      	bls.n	80046c0 <DMA_CheckFifoParam+0xb4>
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d003      	beq.n	80046c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046be:	e018      	b.n	80046f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
      break;
 80046c4:	e015      	b.n	80046f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00e      	beq.n	80046f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	73fb      	strb	r3, [r7, #15]
      break;
 80046d6:	e00b      	b.n	80046f0 <DMA_CheckFifoParam+0xe4>
      break;
 80046d8:	bf00      	nop
 80046da:	e00a      	b.n	80046f2 <DMA_CheckFifoParam+0xe6>
      break;
 80046dc:	bf00      	nop
 80046de:	e008      	b.n	80046f2 <DMA_CheckFifoParam+0xe6>
      break;
 80046e0:	bf00      	nop
 80046e2:	e006      	b.n	80046f2 <DMA_CheckFifoParam+0xe6>
      break;
 80046e4:	bf00      	nop
 80046e6:	e004      	b.n	80046f2 <DMA_CheckFifoParam+0xe6>
      break;
 80046e8:	bf00      	nop
 80046ea:	e002      	b.n	80046f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80046ec:	bf00      	nop
 80046ee:	e000      	b.n	80046f2 <DMA_CheckFifoParam+0xe6>
      break;
 80046f0:	bf00      	nop
    }
  } 
  
  return status; 
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004712:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <HAL_FLASH_Program+0xa0>)
 8004714:	7e1b      	ldrb	r3, [r3, #24]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_FLASH_Program+0x1e>
 800471a:	2302      	movs	r3, #2
 800471c:	e03b      	b.n	8004796 <HAL_FLASH_Program+0x96>
 800471e:	4b20      	ldr	r3, [pc, #128]	; (80047a0 <HAL_FLASH_Program+0xa0>)
 8004720:	2201      	movs	r2, #1
 8004722:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004724:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004728:	f000 f87c 	bl	8004824 <FLASH_WaitForLastOperation>
 800472c:	4603      	mov	r3, r0
 800472e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004730:	7dfb      	ldrb	r3, [r7, #23]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d12b      	bne.n	800478e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d105      	bne.n	8004748 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800473c:	783b      	ldrb	r3, [r7, #0]
 800473e:	4619      	mov	r1, r3
 8004740:	68b8      	ldr	r0, [r7, #8]
 8004742:	f000 f925 	bl	8004990 <FLASH_Program_Byte>
 8004746:	e016      	b.n	8004776 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d105      	bne.n	800475a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800474e:	883b      	ldrh	r3, [r7, #0]
 8004750:	4619      	mov	r1, r3
 8004752:	68b8      	ldr	r0, [r7, #8]
 8004754:	f000 f8f8 	bl	8004948 <FLASH_Program_HalfWord>
 8004758:	e00d      	b.n	8004776 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b02      	cmp	r3, #2
 800475e:	d105      	bne.n	800476c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	4619      	mov	r1, r3
 8004764:	68b8      	ldr	r0, [r7, #8]
 8004766:	f000 f8cd 	bl	8004904 <FLASH_Program_Word>
 800476a:	e004      	b.n	8004776 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800476c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004770:	68b8      	ldr	r0, [r7, #8]
 8004772:	f000 f897 	bl	80048a4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004776:	f24c 3050 	movw	r0, #50000	; 0xc350
 800477a:	f000 f853 	bl	8004824 <FLASH_WaitForLastOperation>
 800477e:	4603      	mov	r3, r0
 8004780:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004782:	4b08      	ldr	r3, [pc, #32]	; (80047a4 <HAL_FLASH_Program+0xa4>)
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	4a07      	ldr	r2, [pc, #28]	; (80047a4 <HAL_FLASH_Program+0xa4>)
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800478e:	4b04      	ldr	r3, [pc, #16]	; (80047a0 <HAL_FLASH_Program+0xa0>)
 8004790:	2200      	movs	r2, #0
 8004792:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004794:	7dfb      	ldrb	r3, [r7, #23]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	2000054c 	.word	0x2000054c
 80047a4:	40023c00 	.word	0x40023c00

080047a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80047b2:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <HAL_FLASH_Unlock+0x38>)
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	da0b      	bge.n	80047d2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80047ba:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <HAL_FLASH_Unlock+0x38>)
 80047bc:	4a09      	ldr	r2, [pc, #36]	; (80047e4 <HAL_FLASH_Unlock+0x3c>)
 80047be:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80047c0:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <HAL_FLASH_Unlock+0x38>)
 80047c2:	4a09      	ldr	r2, [pc, #36]	; (80047e8 <HAL_FLASH_Unlock+0x40>)
 80047c4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80047c6:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <HAL_FLASH_Unlock+0x38>)
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	da01      	bge.n	80047d2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80047d2:	79fb      	ldrb	r3, [r7, #7]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	40023c00 	.word	0x40023c00
 80047e4:	45670123 	.word	0x45670123
 80047e8:	cdef89ab 	.word	0xcdef89ab

080047ec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <HAL_FLASH_Lock+0x1c>)
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	4a04      	ldr	r2, [pc, #16]	; (8004808 <HAL_FLASH_Lock+0x1c>)
 80047f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047fa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	40023c00 	.word	0x40023c00

0800480c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8004810:	4b03      	ldr	r3, [pc, #12]	; (8004820 <HAL_FLASH_GetError+0x14>)
 8004812:	69db      	ldr	r3, [r3, #28]
}  
 8004814:	4618      	mov	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	2000054c 	.word	0x2000054c

08004824 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004830:	4b1a      	ldr	r3, [pc, #104]	; (800489c <FLASH_WaitForLastOperation+0x78>)
 8004832:	2200      	movs	r2, #0
 8004834:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004836:	f7fe fd73 	bl	8003320 <HAL_GetTick>
 800483a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800483c:	e010      	b.n	8004860 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004844:	d00c      	beq.n	8004860 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d007      	beq.n	800485c <FLASH_WaitForLastOperation+0x38>
 800484c:	f7fe fd68 	bl	8003320 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	429a      	cmp	r2, r3
 800485a:	d201      	bcs.n	8004860 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e019      	b.n	8004894 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <FLASH_WaitForLastOperation+0x7c>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1e8      	bne.n	800483e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800486c:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <FLASH_WaitForLastOperation+0x7c>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004878:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <FLASH_WaitForLastOperation+0x7c>)
 800487a:	2201      	movs	r2, #1
 800487c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800487e:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <FLASH_WaitForLastOperation+0x7c>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800488a:	f000 f8a3 	bl	80049d4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
  
}  
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	2000054c 	.word	0x2000054c
 80048a0:	40023c00 	.word	0x40023c00

080048a4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80048a4:	b490      	push	{r4, r7}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80048b0:	4b13      	ldr	r3, [pc, #76]	; (8004900 <FLASH_Program_DoubleWord+0x5c>)
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	4a12      	ldr	r2, [pc, #72]	; (8004900 <FLASH_Program_DoubleWord+0x5c>)
 80048b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80048bc:	4b10      	ldr	r3, [pc, #64]	; (8004900 <FLASH_Program_DoubleWord+0x5c>)
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	4a0f      	ldr	r2, [pc, #60]	; (8004900 <FLASH_Program_DoubleWord+0x5c>)
 80048c2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80048c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80048c8:	4b0d      	ldr	r3, [pc, #52]	; (8004900 <FLASH_Program_DoubleWord+0x5c>)
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	4a0c      	ldr	r2, [pc, #48]	; (8004900 <FLASH_Program_DoubleWord+0x5c>)
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80048da:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80048de:	e9d7 1200 	ldrd	r1, r2, [r7]
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	f04f 0400 	mov.w	r4, #0
 80048ea:	0013      	movs	r3, r2
 80048ec:	2400      	movs	r4, #0
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	3204      	adds	r2, #4
 80048f2:	6013      	str	r3, [r2, #0]
}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bc90      	pop	{r4, r7}
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40023c00 	.word	0x40023c00

08004904 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800490e:	4b0d      	ldr	r3, [pc, #52]	; (8004944 <FLASH_Program_Word+0x40>)
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	4a0c      	ldr	r2, [pc, #48]	; (8004944 <FLASH_Program_Word+0x40>)
 8004914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004918:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800491a:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <FLASH_Program_Word+0x40>)
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	4a09      	ldr	r2, [pc, #36]	; (8004944 <FLASH_Program_Word+0x40>)
 8004920:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004924:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004926:	4b07      	ldr	r3, [pc, #28]	; (8004944 <FLASH_Program_Word+0x40>)
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	4a06      	ldr	r2, [pc, #24]	; (8004944 <FLASH_Program_Word+0x40>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	601a      	str	r2, [r3, #0]
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	40023c00 	.word	0x40023c00

08004948 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004954:	4b0d      	ldr	r3, [pc, #52]	; (800498c <FLASH_Program_HalfWord+0x44>)
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	4a0c      	ldr	r2, [pc, #48]	; (800498c <FLASH_Program_HalfWord+0x44>)
 800495a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800495e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004960:	4b0a      	ldr	r3, [pc, #40]	; (800498c <FLASH_Program_HalfWord+0x44>)
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	4a09      	ldr	r2, [pc, #36]	; (800498c <FLASH_Program_HalfWord+0x44>)
 8004966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800496a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800496c:	4b07      	ldr	r3, [pc, #28]	; (800498c <FLASH_Program_HalfWord+0x44>)
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	4a06      	ldr	r2, [pc, #24]	; (800498c <FLASH_Program_HalfWord+0x44>)
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	887a      	ldrh	r2, [r7, #2]
 800497c:	801a      	strh	r2, [r3, #0]
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40023c00 	.word	0x40023c00

08004990 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800499c:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <FLASH_Program_Byte+0x40>)
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	4a0b      	ldr	r2, [pc, #44]	; (80049d0 <FLASH_Program_Byte+0x40>)
 80049a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80049a8:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <FLASH_Program_Byte+0x40>)
 80049aa:	4a09      	ldr	r2, [pc, #36]	; (80049d0 <FLASH_Program_Byte+0x40>)
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80049b0:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <FLASH_Program_Byte+0x40>)
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	4a06      	ldr	r2, [pc, #24]	; (80049d0 <FLASH_Program_Byte+0x40>)
 80049b6:	f043 0301 	orr.w	r3, r3, #1
 80049ba:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	78fa      	ldrb	r2, [r7, #3]
 80049c0:	701a      	strb	r2, [r3, #0]
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40023c00 	.word	0x40023c00

080049d4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80049d8:	4b2f      	ldr	r3, [pc, #188]	; (8004a98 <FLASH_SetErrorCode+0xc4>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0310 	and.w	r3, r3, #16
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80049e4:	4b2d      	ldr	r3, [pc, #180]	; (8004a9c <FLASH_SetErrorCode+0xc8>)
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	f043 0310 	orr.w	r3, r3, #16
 80049ec:	4a2b      	ldr	r2, [pc, #172]	; (8004a9c <FLASH_SetErrorCode+0xc8>)
 80049ee:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80049f0:	4b29      	ldr	r3, [pc, #164]	; (8004a98 <FLASH_SetErrorCode+0xc4>)
 80049f2:	2210      	movs	r2, #16
 80049f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80049f6:	4b28      	ldr	r3, [pc, #160]	; (8004a98 <FLASH_SetErrorCode+0xc4>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d008      	beq.n	8004a14 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004a02:	4b26      	ldr	r3, [pc, #152]	; (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f043 0308 	orr.w	r3, r3, #8
 8004a0a:	4a24      	ldr	r2, [pc, #144]	; (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a0c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004a0e:	4b22      	ldr	r3, [pc, #136]	; (8004a98 <FLASH_SetErrorCode+0xc4>)
 8004a10:	2220      	movs	r2, #32
 8004a12:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004a14:	4b20      	ldr	r3, [pc, #128]	; (8004a98 <FLASH_SetErrorCode+0xc4>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004a20:	4b1e      	ldr	r3, [pc, #120]	; (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	f043 0304 	orr.w	r3, r3, #4
 8004a28:	4a1c      	ldr	r2, [pc, #112]	; (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a2a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004a2c:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <FLASH_SetErrorCode+0xc4>)
 8004a2e:	2240      	movs	r2, #64	; 0x40
 8004a30:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004a32:	4b19      	ldr	r3, [pc, #100]	; (8004a98 <FLASH_SetErrorCode+0xc4>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d008      	beq.n	8004a50 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004a3e:	4b17      	ldr	r3, [pc, #92]	; (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f043 0302 	orr.w	r3, r3, #2
 8004a46:	4a15      	ldr	r2, [pc, #84]	; (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a48:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004a4a:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <FLASH_SetErrorCode+0xc4>)
 8004a4c:	2280      	movs	r2, #128	; 0x80
 8004a4e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004a50:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <FLASH_SetErrorCode+0xc4>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d009      	beq.n	8004a70 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004a5c:	4b0f      	ldr	r3, [pc, #60]	; (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	4a0d      	ldr	r2, [pc, #52]	; (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a66:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <FLASH_SetErrorCode+0xc4>)
 8004a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a6e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004a70:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <FLASH_SetErrorCode+0xc4>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004a7c:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	f043 0320 	orr.w	r3, r3, #32
 8004a84:	4a05      	ldr	r2, [pc, #20]	; (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a86:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004a88:	4b03      	ldr	r3, [pc, #12]	; (8004a98 <FLASH_SetErrorCode+0xc4>)
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	60da      	str	r2, [r3, #12]
  }
}
 8004a8e:	bf00      	nop
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	40023c00 	.word	0x40023c00
 8004a9c:	2000054c 	.word	0x2000054c

08004aa0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004ab2:	4b31      	ldr	r3, [pc, #196]	; (8004b78 <HAL_FLASHEx_Erase+0xd8>)
 8004ab4:	7e1b      	ldrb	r3, [r3, #24]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_FLASHEx_Erase+0x1e>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e058      	b.n	8004b70 <HAL_FLASHEx_Erase+0xd0>
 8004abe:	4b2e      	ldr	r3, [pc, #184]	; (8004b78 <HAL_FLASHEx_Erase+0xd8>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ac4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ac8:	f7ff feac 	bl	8004824 <FLASH_WaitForLastOperation>
 8004acc:	4603      	mov	r3, r0
 8004ace:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d148      	bne.n	8004b68 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8004adc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d115      	bne.n	8004b12 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4619      	mov	r1, r3
 8004af2:	4610      	mov	r0, r2
 8004af4:	f000 f844 	bl	8004b80 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004af8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004afc:	f7ff fe92 	bl	8004824 <FLASH_WaitForLastOperation>
 8004b00:	4603      	mov	r3, r0
 8004b02:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004b04:	4b1d      	ldr	r3, [pc, #116]	; (8004b7c <HAL_FLASHEx_Erase+0xdc>)
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	4a1c      	ldr	r2, [pc, #112]	; (8004b7c <HAL_FLASHEx_Erase+0xdc>)
 8004b0a:	f023 0304 	bic.w	r3, r3, #4
 8004b0e:	6113      	str	r3, [r2, #16]
 8004b10:	e028      	b.n	8004b64 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	60bb      	str	r3, [r7, #8]
 8004b18:	e01c      	b.n	8004b54 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	4619      	mov	r1, r3
 8004b22:	68b8      	ldr	r0, [r7, #8]
 8004b24:	f000 f850 	bl	8004bc8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b2c:	f7ff fe7a 	bl	8004824 <FLASH_WaitForLastOperation>
 8004b30:	4603      	mov	r3, r0
 8004b32:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004b34:	4b11      	ldr	r3, [pc, #68]	; (8004b7c <HAL_FLASHEx_Erase+0xdc>)
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	4a10      	ldr	r2, [pc, #64]	; (8004b7c <HAL_FLASHEx_Erase+0xdc>)
 8004b3a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004b3e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	601a      	str	r2, [r3, #0]
          break;
 8004b4c:	e00a      	b.n	8004b64 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	3301      	adds	r3, #1
 8004b52:	60bb      	str	r3, [r7, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d3da      	bcc.n	8004b1a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8004b64:	f000 f878 	bl	8004c58 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004b68:	4b03      	ldr	r3, [pc, #12]	; (8004b78 <HAL_FLASHEx_Erase+0xd8>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	761a      	strb	r2, [r3, #24]

  return status;
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	2000054c 	.word	0x2000054c
 8004b7c:	40023c00 	.word	0x40023c00

08004b80 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	6039      	str	r1, [r7, #0]
 8004b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b8c:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <FLASH_MassErase+0x44>)
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	4a0c      	ldr	r2, [pc, #48]	; (8004bc4 <FLASH_MassErase+0x44>)
 8004b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <FLASH_MassErase+0x44>)
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	4a09      	ldr	r2, [pc, #36]	; (8004bc4 <FLASH_MassErase+0x44>)
 8004b9e:	f043 0304 	orr.w	r3, r3, #4
 8004ba2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8004ba4:	4b07      	ldr	r3, [pc, #28]	; (8004bc4 <FLASH_MassErase+0x44>)
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	4313      	orrs	r3, r2
 8004bae:	4a05      	ldr	r2, [pc, #20]	; (8004bc4 <FLASH_MassErase+0x44>)
 8004bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb4:	6113      	str	r3, [r2, #16]
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40023c00 	.word	0x40023c00

08004bc8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d102      	bne.n	8004be4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	e010      	b.n	8004c06 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d103      	bne.n	8004bf2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e009      	b.n	8004c06 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004bf2:	78fb      	ldrb	r3, [r7, #3]
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d103      	bne.n	8004c00 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	e002      	b.n	8004c06 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004c00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c04:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c06:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <FLASH_Erase_Sector+0x8c>)
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	4a12      	ldr	r2, [pc, #72]	; (8004c54 <FLASH_Erase_Sector+0x8c>)
 8004c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004c12:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <FLASH_Erase_Sector+0x8c>)
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	490f      	ldr	r1, [pc, #60]	; (8004c54 <FLASH_Erase_Sector+0x8c>)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <FLASH_Erase_Sector+0x8c>)
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	4a0c      	ldr	r2, [pc, #48]	; (8004c54 <FLASH_Erase_Sector+0x8c>)
 8004c24:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004c28:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004c2a:	4b0a      	ldr	r3, [pc, #40]	; (8004c54 <FLASH_Erase_Sector+0x8c>)
 8004c2c:	691a      	ldr	r2, [r3, #16]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	4313      	orrs	r3, r2
 8004c34:	4a07      	ldr	r2, [pc, #28]	; (8004c54 <FLASH_Erase_Sector+0x8c>)
 8004c36:	f043 0302 	orr.w	r3, r3, #2
 8004c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004c3c:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <FLASH_Erase_Sector+0x8c>)
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	4a04      	ldr	r2, [pc, #16]	; (8004c54 <FLASH_Erase_Sector+0x8c>)
 8004c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c46:	6113      	str	r3, [r2, #16]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	40023c00 	.word	0x40023c00

08004c58 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8004c5c:	4b20      	ldr	r3, [pc, #128]	; (8004ce0 <FLASH_FlushCaches+0x88>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d017      	beq.n	8004c98 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004c68:	4b1d      	ldr	r3, [pc, #116]	; (8004ce0 <FLASH_FlushCaches+0x88>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ce0 <FLASH_FlushCaches+0x88>)
 8004c6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c72:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004c74:	4b1a      	ldr	r3, [pc, #104]	; (8004ce0 <FLASH_FlushCaches+0x88>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a19      	ldr	r2, [pc, #100]	; (8004ce0 <FLASH_FlushCaches+0x88>)
 8004c7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	4b17      	ldr	r3, [pc, #92]	; (8004ce0 <FLASH_FlushCaches+0x88>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a16      	ldr	r2, [pc, #88]	; (8004ce0 <FLASH_FlushCaches+0x88>)
 8004c86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c8a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c8c:	4b14      	ldr	r3, [pc, #80]	; (8004ce0 <FLASH_FlushCaches+0x88>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a13      	ldr	r2, [pc, #76]	; (8004ce0 <FLASH_FlushCaches+0x88>)
 8004c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c96:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004c98:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <FLASH_FlushCaches+0x88>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d017      	beq.n	8004cd4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004ca4:	4b0e      	ldr	r3, [pc, #56]	; (8004ce0 <FLASH_FlushCaches+0x88>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a0d      	ldr	r2, [pc, #52]	; (8004ce0 <FLASH_FlushCaches+0x88>)
 8004caa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cae:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <FLASH_FlushCaches+0x88>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a0a      	ldr	r2, [pc, #40]	; (8004ce0 <FLASH_FlushCaches+0x88>)
 8004cb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	4b08      	ldr	r3, [pc, #32]	; (8004ce0 <FLASH_FlushCaches+0x88>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a07      	ldr	r2, [pc, #28]	; (8004ce0 <FLASH_FlushCaches+0x88>)
 8004cc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cc6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004cc8:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <FLASH_FlushCaches+0x88>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a04      	ldr	r2, [pc, #16]	; (8004ce0 <FLASH_FlushCaches+0x88>)
 8004cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cd2:	6013      	str	r3, [r2, #0]
  }
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40023c00 	.word	0x40023c00

08004ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b089      	sub	sp, #36	; 0x24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	e159      	b.n	8004fb4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d00:	2201      	movs	r2, #1
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	f040 8148 	bne.w	8004fae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d00b      	beq.n	8004d3e <HAL_GPIO_Init+0x5a>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d007      	beq.n	8004d3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d32:	2b11      	cmp	r3, #17
 8004d34:	d003      	beq.n	8004d3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b12      	cmp	r3, #18
 8004d3c:	d130      	bne.n	8004da0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	2203      	movs	r2, #3
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	43db      	mvns	r3, r3
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4013      	ands	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d74:	2201      	movs	r2, #1
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4013      	ands	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	091b      	lsrs	r3, r3, #4
 8004d8a:	f003 0201 	and.w	r2, r3, #1
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	2203      	movs	r2, #3
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	43db      	mvns	r3, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4013      	ands	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d003      	beq.n	8004de0 <HAL_GPIO_Init+0xfc>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b12      	cmp	r3, #18
 8004dde:	d123      	bne.n	8004e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	08da      	lsrs	r2, r3, #3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3208      	adds	r2, #8
 8004de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	220f      	movs	r2, #15
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	4013      	ands	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	08da      	lsrs	r2, r3, #3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3208      	adds	r2, #8
 8004e22:	69b9      	ldr	r1, [r7, #24]
 8004e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	2203      	movs	r2, #3
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 0203 	and.w	r2, r3, #3
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80a2 	beq.w	8004fae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	4b56      	ldr	r3, [pc, #344]	; (8004fc8 <HAL_GPIO_Init+0x2e4>)
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	4a55      	ldr	r2, [pc, #340]	; (8004fc8 <HAL_GPIO_Init+0x2e4>)
 8004e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e78:	6453      	str	r3, [r2, #68]	; 0x44
 8004e7a:	4b53      	ldr	r3, [pc, #332]	; (8004fc8 <HAL_GPIO_Init+0x2e4>)
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e86:	4a51      	ldr	r2, [pc, #324]	; (8004fcc <HAL_GPIO_Init+0x2e8>)
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	089b      	lsrs	r3, r3, #2
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	220f      	movs	r2, #15
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a48      	ldr	r2, [pc, #288]	; (8004fd0 <HAL_GPIO_Init+0x2ec>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d019      	beq.n	8004ee6 <HAL_GPIO_Init+0x202>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a47      	ldr	r2, [pc, #284]	; (8004fd4 <HAL_GPIO_Init+0x2f0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d013      	beq.n	8004ee2 <HAL_GPIO_Init+0x1fe>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a46      	ldr	r2, [pc, #280]	; (8004fd8 <HAL_GPIO_Init+0x2f4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00d      	beq.n	8004ede <HAL_GPIO_Init+0x1fa>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a45      	ldr	r2, [pc, #276]	; (8004fdc <HAL_GPIO_Init+0x2f8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d007      	beq.n	8004eda <HAL_GPIO_Init+0x1f6>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a44      	ldr	r2, [pc, #272]	; (8004fe0 <HAL_GPIO_Init+0x2fc>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d101      	bne.n	8004ed6 <HAL_GPIO_Init+0x1f2>
 8004ed2:	2304      	movs	r3, #4
 8004ed4:	e008      	b.n	8004ee8 <HAL_GPIO_Init+0x204>
 8004ed6:	2307      	movs	r3, #7
 8004ed8:	e006      	b.n	8004ee8 <HAL_GPIO_Init+0x204>
 8004eda:	2303      	movs	r3, #3
 8004edc:	e004      	b.n	8004ee8 <HAL_GPIO_Init+0x204>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e002      	b.n	8004ee8 <HAL_GPIO_Init+0x204>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <HAL_GPIO_Init+0x204>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	f002 0203 	and.w	r2, r2, #3
 8004eee:	0092      	lsls	r2, r2, #2
 8004ef0:	4093      	lsls	r3, r2
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ef8:	4934      	ldr	r1, [pc, #208]	; (8004fcc <HAL_GPIO_Init+0x2e8>)
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	089b      	lsrs	r3, r3, #2
 8004efe:	3302      	adds	r3, #2
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f06:	4b37      	ldr	r3, [pc, #220]	; (8004fe4 <HAL_GPIO_Init+0x300>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4013      	ands	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f2a:	4a2e      	ldr	r2, [pc, #184]	; (8004fe4 <HAL_GPIO_Init+0x300>)
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f30:	4b2c      	ldr	r3, [pc, #176]	; (8004fe4 <HAL_GPIO_Init+0x300>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f54:	4a23      	ldr	r2, [pc, #140]	; (8004fe4 <HAL_GPIO_Init+0x300>)
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f5a:	4b22      	ldr	r3, [pc, #136]	; (8004fe4 <HAL_GPIO_Init+0x300>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	43db      	mvns	r3, r3
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	4013      	ands	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f7e:	4a19      	ldr	r2, [pc, #100]	; (8004fe4 <HAL_GPIO_Init+0x300>)
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f84:	4b17      	ldr	r3, [pc, #92]	; (8004fe4 <HAL_GPIO_Init+0x300>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	4013      	ands	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fa8:	4a0e      	ldr	r2, [pc, #56]	; (8004fe4 <HAL_GPIO_Init+0x300>)
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2b0f      	cmp	r3, #15
 8004fb8:	f67f aea2 	bls.w	8004d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fbc:	bf00      	nop
 8004fbe:	3724      	adds	r7, #36	; 0x24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	40013800 	.word	0x40013800
 8004fd0:	40020000 	.word	0x40020000
 8004fd4:	40020400 	.word	0x40020400
 8004fd8:	40020800 	.word	0x40020800
 8004fdc:	40020c00 	.word	0x40020c00
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	40013c00 	.word	0x40013c00

08004fe8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	887b      	ldrh	r3, [r7, #2]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005000:	2301      	movs	r3, #1
 8005002:	73fb      	strb	r3, [r7, #15]
 8005004:	e001      	b.n	800500a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005006:	2300      	movs	r3, #0
 8005008:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800500a:	7bfb      	ldrb	r3, [r7, #15]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	807b      	strh	r3, [r7, #2]
 8005024:	4613      	mov	r3, r2
 8005026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005028:	787b      	ldrb	r3, [r7, #1]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800502e:	887a      	ldrh	r2, [r7, #2]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005034:	e003      	b.n	800503e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005036:	887b      	ldrh	r3, [r7, #2]
 8005038:	041a      	lsls	r2, r3, #16
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	619a      	str	r2, [r3, #24]
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
	...

0800504c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005056:	4b08      	ldr	r3, [pc, #32]	; (8005078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005058:	695a      	ldr	r2, [r3, #20]
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	4013      	ands	r3, r2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d006      	beq.n	8005070 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005062:	4a05      	ldr	r2, [pc, #20]	; (8005078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005064:	88fb      	ldrh	r3, [r7, #6]
 8005066:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005068:	88fb      	ldrh	r3, [r7, #6]
 800506a:	4618      	mov	r0, r3
 800506c:	f7fd fd16 	bl	8002a9c <HAL_GPIO_EXTI_Callback>
  }
}
 8005070:	bf00      	nop
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	40013c00 	.word	0x40013c00

0800507c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e11f      	b.n	80052ce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d106      	bne.n	80050a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7fd fe42 	bl	8002d2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2224      	movs	r2, #36	; 0x24
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0201 	bic.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050e0:	f001 f846 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 80050e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	4a7b      	ldr	r2, [pc, #492]	; (80052d8 <HAL_I2C_Init+0x25c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d807      	bhi.n	8005100 <HAL_I2C_Init+0x84>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4a7a      	ldr	r2, [pc, #488]	; (80052dc <HAL_I2C_Init+0x260>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	bf94      	ite	ls
 80050f8:	2301      	movls	r3, #1
 80050fa:	2300      	movhi	r3, #0
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	e006      	b.n	800510e <HAL_I2C_Init+0x92>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4a77      	ldr	r2, [pc, #476]	; (80052e0 <HAL_I2C_Init+0x264>)
 8005104:	4293      	cmp	r3, r2
 8005106:	bf94      	ite	ls
 8005108:	2301      	movls	r3, #1
 800510a:	2300      	movhi	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e0db      	b.n	80052ce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4a72      	ldr	r2, [pc, #456]	; (80052e4 <HAL_I2C_Init+0x268>)
 800511a:	fba2 2303 	umull	r2, r3, r2, r3
 800511e:	0c9b      	lsrs	r3, r3, #18
 8005120:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	4a64      	ldr	r2, [pc, #400]	; (80052d8 <HAL_I2C_Init+0x25c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d802      	bhi.n	8005150 <HAL_I2C_Init+0xd4>
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	3301      	adds	r3, #1
 800514e:	e009      	b.n	8005164 <HAL_I2C_Init+0xe8>
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005156:	fb02 f303 	mul.w	r3, r2, r3
 800515a:	4a63      	ldr	r2, [pc, #396]	; (80052e8 <HAL_I2C_Init+0x26c>)
 800515c:	fba2 2303 	umull	r2, r3, r2, r3
 8005160:	099b      	lsrs	r3, r3, #6
 8005162:	3301      	adds	r3, #1
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	430b      	orrs	r3, r1
 800516a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005176:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	4956      	ldr	r1, [pc, #344]	; (80052d8 <HAL_I2C_Init+0x25c>)
 8005180:	428b      	cmp	r3, r1
 8005182:	d80d      	bhi.n	80051a0 <HAL_I2C_Init+0x124>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	1e59      	subs	r1, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005192:	3301      	adds	r3, #1
 8005194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005198:	2b04      	cmp	r3, #4
 800519a:	bf38      	it	cc
 800519c:	2304      	movcc	r3, #4
 800519e:	e04f      	b.n	8005240 <HAL_I2C_Init+0x1c4>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d111      	bne.n	80051cc <HAL_I2C_Init+0x150>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	1e58      	subs	r0, r3, #1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6859      	ldr	r1, [r3, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	440b      	add	r3, r1
 80051b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ba:	3301      	adds	r3, #1
 80051bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	bf0c      	ite	eq
 80051c4:	2301      	moveq	r3, #1
 80051c6:	2300      	movne	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	e012      	b.n	80051f2 <HAL_I2C_Init+0x176>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	1e58      	subs	r0, r3, #1
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6859      	ldr	r1, [r3, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	0099      	lsls	r1, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	fbb0 f3f3 	udiv	r3, r0, r3
 80051e2:	3301      	adds	r3, #1
 80051e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bf0c      	ite	eq
 80051ec:	2301      	moveq	r3, #1
 80051ee:	2300      	movne	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <HAL_I2C_Init+0x17e>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e022      	b.n	8005240 <HAL_I2C_Init+0x1c4>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10e      	bne.n	8005220 <HAL_I2C_Init+0x1a4>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	1e58      	subs	r0, r3, #1
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6859      	ldr	r1, [r3, #4]
 800520a:	460b      	mov	r3, r1
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	440b      	add	r3, r1
 8005210:	fbb0 f3f3 	udiv	r3, r0, r3
 8005214:	3301      	adds	r3, #1
 8005216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800521a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800521e:	e00f      	b.n	8005240 <HAL_I2C_Init+0x1c4>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	1e58      	subs	r0, r3, #1
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6859      	ldr	r1, [r3, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	0099      	lsls	r1, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	fbb0 f3f3 	udiv	r3, r0, r3
 8005236:	3301      	adds	r3, #1
 8005238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800523c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	6809      	ldr	r1, [r1, #0]
 8005244:	4313      	orrs	r3, r2
 8005246:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69da      	ldr	r2, [r3, #28]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800526e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6911      	ldr	r1, [r2, #16]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	68d2      	ldr	r2, [r2, #12]
 800527a:	4311      	orrs	r1, r2
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	430b      	orrs	r3, r1
 8005282:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695a      	ldr	r2, [r3, #20]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	000186a0 	.word	0x000186a0
 80052dc:	001e847f 	.word	0x001e847f
 80052e0:	003d08ff 	.word	0x003d08ff
 80052e4:	431bde83 	.word	0x431bde83
 80052e8:	10624dd3 	.word	0x10624dd3

080052ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	607a      	str	r2, [r7, #4]
 80052f6:	461a      	mov	r2, r3
 80052f8:	460b      	mov	r3, r1
 80052fa:	817b      	strh	r3, [r7, #10]
 80052fc:	4613      	mov	r3, r2
 80052fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005300:	f7fe f80e 	bl	8003320 <HAL_GetTick>
 8005304:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b20      	cmp	r3, #32
 8005310:	f040 80e0 	bne.w	80054d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	2319      	movs	r3, #25
 800531a:	2201      	movs	r2, #1
 800531c:	4970      	ldr	r1, [pc, #448]	; (80054e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f964 	bl	80055ec <I2C_WaitOnFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800532a:	2302      	movs	r3, #2
 800532c:	e0d3      	b.n	80054d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_I2C_Master_Transmit+0x50>
 8005338:	2302      	movs	r3, #2
 800533a:	e0cc      	b.n	80054d6 <HAL_I2C_Master_Transmit+0x1ea>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b01      	cmp	r3, #1
 8005350:	d007      	beq.n	8005362 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0201 	orr.w	r2, r2, #1
 8005360:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005370:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2221      	movs	r2, #33	; 0x21
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2210      	movs	r2, #16
 800537e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	893a      	ldrh	r2, [r7, #8]
 8005392:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4a50      	ldr	r2, [pc, #320]	; (80054e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80053a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80053a4:	8979      	ldrh	r1, [r7, #10]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	6a3a      	ldr	r2, [r7, #32]
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 f89c 	bl	80054e8 <I2C_MasterRequestWrite>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e08d      	b.n	80054d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80053d0:	e066      	b.n	80054a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	6a39      	ldr	r1, [r7, #32]
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 f9de 	bl	8005798 <I2C_WaitOnTXEFlagUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00d      	beq.n	80053fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d107      	bne.n	80053fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e06b      	b.n	80054d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	781a      	ldrb	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005426:	3b01      	subs	r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b04      	cmp	r3, #4
 800543a:	d11b      	bne.n	8005474 <HAL_I2C_Master_Transmit+0x188>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005440:	2b00      	cmp	r3, #0
 8005442:	d017      	beq.n	8005474 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	781a      	ldrb	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	6a39      	ldr	r1, [r7, #32]
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 f9ce 	bl	800581a <I2C_WaitOnBTFFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00d      	beq.n	80054a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	2b04      	cmp	r3, #4
 800548a:	d107      	bne.n	800549c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e01a      	b.n	80054d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d194      	bne.n	80053d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	e000      	b.n	80054d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80054d4:	2302      	movs	r3, #2
  }
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	00100002 	.word	0x00100002
 80054e4:	ffff0000 	.word	0xffff0000

080054e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b088      	sub	sp, #32
 80054ec:	af02      	add	r7, sp, #8
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	460b      	mov	r3, r1
 80054f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b08      	cmp	r3, #8
 8005502:	d006      	beq.n	8005512 <I2C_MasterRequestWrite+0x2a>
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d003      	beq.n	8005512 <I2C_MasterRequestWrite+0x2a>
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005510:	d108      	bne.n	8005524 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	e00b      	b.n	800553c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005528:	2b12      	cmp	r3, #18
 800552a:	d107      	bne.n	800553c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800553a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 f84f 	bl	80055ec <I2C_WaitOnFlagUntilTimeout>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00d      	beq.n	8005570 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005562:	d103      	bne.n	800556c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800556a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e035      	b.n	80055dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005578:	d108      	bne.n	800558c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800557a:	897b      	ldrh	r3, [r7, #10]
 800557c:	b2db      	uxtb	r3, r3
 800557e:	461a      	mov	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005588:	611a      	str	r2, [r3, #16]
 800558a:	e01b      	b.n	80055c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800558c:	897b      	ldrh	r3, [r7, #10]
 800558e:	11db      	asrs	r3, r3, #7
 8005590:	b2db      	uxtb	r3, r3
 8005592:	f003 0306 	and.w	r3, r3, #6
 8005596:	b2db      	uxtb	r3, r3
 8005598:	f063 030f 	orn	r3, r3, #15
 800559c:	b2da      	uxtb	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	490e      	ldr	r1, [pc, #56]	; (80055e4 <I2C_MasterRequestWrite+0xfc>)
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f875 	bl	800569a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e010      	b.n	80055dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80055ba:	897b      	ldrh	r3, [r7, #10]
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	4907      	ldr	r1, [pc, #28]	; (80055e8 <I2C_MasterRequestWrite+0x100>)
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 f865 	bl	800569a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	00010008 	.word	0x00010008
 80055e8:	00010002 	.word	0x00010002

080055ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	4613      	mov	r3, r2
 80055fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055fc:	e025      	b.n	800564a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005604:	d021      	beq.n	800564a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005606:	f7fd fe8b 	bl	8003320 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	429a      	cmp	r2, r3
 8005614:	d302      	bcc.n	800561c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d116      	bne.n	800564a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2220      	movs	r2, #32
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f043 0220 	orr.w	r2, r3, #32
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e023      	b.n	8005692 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	0c1b      	lsrs	r3, r3, #16
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b01      	cmp	r3, #1
 8005652:	d10d      	bne.n	8005670 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	43da      	mvns	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4013      	ands	r3, r2
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	bf0c      	ite	eq
 8005666:	2301      	moveq	r3, #1
 8005668:	2300      	movne	r3, #0
 800566a:	b2db      	uxtb	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	e00c      	b.n	800568a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	43da      	mvns	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4013      	ands	r3, r2
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	bf0c      	ite	eq
 8005682:	2301      	moveq	r3, #1
 8005684:	2300      	movne	r3, #0
 8005686:	b2db      	uxtb	r3, r3
 8005688:	461a      	mov	r2, r3
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	429a      	cmp	r2, r3
 800568e:	d0b6      	beq.n	80055fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	607a      	str	r2, [r7, #4]
 80056a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056a8:	e051      	b.n	800574e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b8:	d123      	bne.n	8005702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	f043 0204 	orr.w	r2, r3, #4
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e046      	b.n	8005790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005708:	d021      	beq.n	800574e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800570a:	f7fd fe09 	bl	8003320 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	429a      	cmp	r2, r3
 8005718:	d302      	bcc.n	8005720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d116      	bne.n	800574e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f043 0220 	orr.w	r2, r3, #32
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e020      	b.n	8005790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	0c1b      	lsrs	r3, r3, #16
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b01      	cmp	r3, #1
 8005756:	d10c      	bne.n	8005772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	43da      	mvns	r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4013      	ands	r3, r2
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	bf14      	ite	ne
 800576a:	2301      	movne	r3, #1
 800576c:	2300      	moveq	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	e00b      	b.n	800578a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	43da      	mvns	r2, r3
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	4013      	ands	r3, r2
 800577e:	b29b      	uxth	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	bf14      	ite	ne
 8005784:	2301      	movne	r3, #1
 8005786:	2300      	moveq	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d18d      	bne.n	80056aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057a4:	e02d      	b.n	8005802 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f878 	bl	800589c <I2C_IsAcknowledgeFailed>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e02d      	b.n	8005812 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057bc:	d021      	beq.n	8005802 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057be:	f7fd fdaf 	bl	8003320 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d302      	bcc.n	80057d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d116      	bne.n	8005802 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	f043 0220 	orr.w	r2, r3, #32
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e007      	b.n	8005812 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580c:	2b80      	cmp	r3, #128	; 0x80
 800580e:	d1ca      	bne.n	80057a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005826:	e02d      	b.n	8005884 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f837 	bl	800589c <I2C_IsAcknowledgeFailed>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e02d      	b.n	8005894 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583e:	d021      	beq.n	8005884 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005840:	f7fd fd6e 	bl	8003320 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	429a      	cmp	r2, r3
 800584e:	d302      	bcc.n	8005856 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d116      	bne.n	8005884 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005870:	f043 0220 	orr.w	r2, r3, #32
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e007      	b.n	8005894 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f003 0304 	and.w	r3, r3, #4
 800588e:	2b04      	cmp	r3, #4
 8005890:	d1ca      	bne.n	8005828 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b2:	d11b      	bne.n	80058ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	f043 0204 	orr.w	r2, r3, #4
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e25b      	b.n	8005dc6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d075      	beq.n	8005a06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800591a:	4ba3      	ldr	r3, [pc, #652]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 030c 	and.w	r3, r3, #12
 8005922:	2b04      	cmp	r3, #4
 8005924:	d00c      	beq.n	8005940 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005926:	4ba0      	ldr	r3, [pc, #640]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800592e:	2b08      	cmp	r3, #8
 8005930:	d112      	bne.n	8005958 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005932:	4b9d      	ldr	r3, [pc, #628]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800593a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800593e:	d10b      	bne.n	8005958 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005940:	4b99      	ldr	r3, [pc, #612]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d05b      	beq.n	8005a04 <HAL_RCC_OscConfig+0x108>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d157      	bne.n	8005a04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e236      	b.n	8005dc6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005960:	d106      	bne.n	8005970 <HAL_RCC_OscConfig+0x74>
 8005962:	4b91      	ldr	r3, [pc, #580]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a90      	ldr	r2, [pc, #576]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	e01d      	b.n	80059ac <HAL_RCC_OscConfig+0xb0>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005978:	d10c      	bne.n	8005994 <HAL_RCC_OscConfig+0x98>
 800597a:	4b8b      	ldr	r3, [pc, #556]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a8a      	ldr	r2, [pc, #552]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	4b88      	ldr	r3, [pc, #544]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a87      	ldr	r2, [pc, #540]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 800598c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	e00b      	b.n	80059ac <HAL_RCC_OscConfig+0xb0>
 8005994:	4b84      	ldr	r3, [pc, #528]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a83      	ldr	r2, [pc, #524]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 800599a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	4b81      	ldr	r3, [pc, #516]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a80      	ldr	r2, [pc, #512]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 80059a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d013      	beq.n	80059dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b4:	f7fd fcb4 	bl	8003320 <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059bc:	f7fd fcb0 	bl	8003320 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b64      	cmp	r3, #100	; 0x64
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e1fb      	b.n	8005dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ce:	4b76      	ldr	r3, [pc, #472]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0f0      	beq.n	80059bc <HAL_RCC_OscConfig+0xc0>
 80059da:	e014      	b.n	8005a06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059dc:	f7fd fca0 	bl	8003320 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059e4:	f7fd fc9c 	bl	8003320 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b64      	cmp	r3, #100	; 0x64
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e1e7      	b.n	8005dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059f6:	4b6c      	ldr	r3, [pc, #432]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1f0      	bne.n	80059e4 <HAL_RCC_OscConfig+0xe8>
 8005a02:	e000      	b.n	8005a06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d063      	beq.n	8005ada <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a12:	4b65      	ldr	r3, [pc, #404]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 030c 	and.w	r3, r3, #12
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00b      	beq.n	8005a36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a1e:	4b62      	ldr	r3, [pc, #392]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d11c      	bne.n	8005a64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a2a:	4b5f      	ldr	r3, [pc, #380]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d116      	bne.n	8005a64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a36:	4b5c      	ldr	r3, [pc, #368]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_RCC_OscConfig+0x152>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d001      	beq.n	8005a4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e1bb      	b.n	8005dc6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a4e:	4b56      	ldr	r3, [pc, #344]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	4952      	ldr	r1, [pc, #328]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a62:	e03a      	b.n	8005ada <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d020      	beq.n	8005aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a6c:	4b4f      	ldr	r3, [pc, #316]	; (8005bac <HAL_RCC_OscConfig+0x2b0>)
 8005a6e:	2201      	movs	r2, #1
 8005a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a72:	f7fd fc55 	bl	8003320 <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a7a:	f7fd fc51 	bl	8003320 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e19c      	b.n	8005dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a8c:	4b46      	ldr	r3, [pc, #280]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0f0      	beq.n	8005a7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a98:	4b43      	ldr	r3, [pc, #268]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	4940      	ldr	r1, [pc, #256]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	600b      	str	r3, [r1, #0]
 8005aac:	e015      	b.n	8005ada <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aae:	4b3f      	ldr	r3, [pc, #252]	; (8005bac <HAL_RCC_OscConfig+0x2b0>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab4:	f7fd fc34 	bl	8003320 <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005abc:	f7fd fc30 	bl	8003320 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e17b      	b.n	8005dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ace:	4b36      	ldr	r3, [pc, #216]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1f0      	bne.n	8005abc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d030      	beq.n	8005b48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d016      	beq.n	8005b1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aee:	4b30      	ldr	r3, [pc, #192]	; (8005bb0 <HAL_RCC_OscConfig+0x2b4>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af4:	f7fd fc14 	bl	8003320 <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005afc:	f7fd fc10 	bl	8003320 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e15b      	b.n	8005dc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b0e:	4b26      	ldr	r3, [pc, #152]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCC_OscConfig+0x200>
 8005b1a:	e015      	b.n	8005b48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b1c:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <HAL_RCC_OscConfig+0x2b4>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b22:	f7fd fbfd 	bl	8003320 <HAL_GetTick>
 8005b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b2a:	f7fd fbf9 	bl	8003320 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e144      	b.n	8005dc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1f0      	bne.n	8005b2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 80a0 	beq.w	8005c96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b56:	2300      	movs	r3, #0
 8005b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b5a:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10f      	bne.n	8005b86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b66:	2300      	movs	r3, #0
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	4a0e      	ldr	r2, [pc, #56]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b74:	6413      	str	r3, [r2, #64]	; 0x40
 8005b76:	4b0c      	ldr	r3, [pc, #48]	; (8005ba8 <HAL_RCC_OscConfig+0x2ac>)
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b7e:	60bb      	str	r3, [r7, #8]
 8005b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b82:	2301      	movs	r3, #1
 8005b84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b86:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <HAL_RCC_OscConfig+0x2b8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d121      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b92:	4b08      	ldr	r3, [pc, #32]	; (8005bb4 <HAL_RCC_OscConfig+0x2b8>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a07      	ldr	r2, [pc, #28]	; (8005bb4 <HAL_RCC_OscConfig+0x2b8>)
 8005b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b9e:	f7fd fbbf 	bl	8003320 <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba4:	e011      	b.n	8005bca <HAL_RCC_OscConfig+0x2ce>
 8005ba6:	bf00      	nop
 8005ba8:	40023800 	.word	0x40023800
 8005bac:	42470000 	.word	0x42470000
 8005bb0:	42470e80 	.word	0x42470e80
 8005bb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bb8:	f7fd fbb2 	bl	8003320 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e0fd      	b.n	8005dc6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bca:	4b81      	ldr	r3, [pc, #516]	; (8005dd0 <HAL_RCC_OscConfig+0x4d4>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0f0      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d106      	bne.n	8005bec <HAL_RCC_OscConfig+0x2f0>
 8005bde:	4b7d      	ldr	r3, [pc, #500]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be2:	4a7c      	ldr	r2, [pc, #496]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005be4:	f043 0301 	orr.w	r3, r3, #1
 8005be8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bea:	e01c      	b.n	8005c26 <HAL_RCC_OscConfig+0x32a>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2b05      	cmp	r3, #5
 8005bf2:	d10c      	bne.n	8005c0e <HAL_RCC_OscConfig+0x312>
 8005bf4:	4b77      	ldr	r3, [pc, #476]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf8:	4a76      	ldr	r2, [pc, #472]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005bfa:	f043 0304 	orr.w	r3, r3, #4
 8005bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8005c00:	4b74      	ldr	r3, [pc, #464]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c04:	4a73      	ldr	r2, [pc, #460]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005c06:	f043 0301 	orr.w	r3, r3, #1
 8005c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c0c:	e00b      	b.n	8005c26 <HAL_RCC_OscConfig+0x32a>
 8005c0e:	4b71      	ldr	r3, [pc, #452]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c12:	4a70      	ldr	r2, [pc, #448]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005c14:	f023 0301 	bic.w	r3, r3, #1
 8005c18:	6713      	str	r3, [r2, #112]	; 0x70
 8005c1a:	4b6e      	ldr	r3, [pc, #440]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	4a6d      	ldr	r2, [pc, #436]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005c20:	f023 0304 	bic.w	r3, r3, #4
 8005c24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d015      	beq.n	8005c5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c2e:	f7fd fb77 	bl	8003320 <HAL_GetTick>
 8005c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c34:	e00a      	b.n	8005c4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c36:	f7fd fb73 	bl	8003320 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e0bc      	b.n	8005dc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c4c:	4b61      	ldr	r3, [pc, #388]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0ee      	beq.n	8005c36 <HAL_RCC_OscConfig+0x33a>
 8005c58:	e014      	b.n	8005c84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c5a:	f7fd fb61 	bl	8003320 <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c60:	e00a      	b.n	8005c78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c62:	f7fd fb5d 	bl	8003320 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e0a6      	b.n	8005dc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c78:	4b56      	ldr	r3, [pc, #344]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1ee      	bne.n	8005c62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d105      	bne.n	8005c96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c8a:	4b52      	ldr	r3, [pc, #328]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	4a51      	ldr	r2, [pc, #324]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 8092 	beq.w	8005dc4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ca0:	4b4c      	ldr	r3, [pc, #304]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 030c 	and.w	r3, r3, #12
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d05c      	beq.n	8005d66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d141      	bne.n	8005d38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cb4:	4b48      	ldr	r3, [pc, #288]	; (8005dd8 <HAL_RCC_OscConfig+0x4dc>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cba:	f7fd fb31 	bl	8003320 <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cc2:	f7fd fb2d 	bl	8003320 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e078      	b.n	8005dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd4:	4b3f      	ldr	r3, [pc, #252]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1f0      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	019b      	lsls	r3, r3, #6
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf6:	085b      	lsrs	r3, r3, #1
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	041b      	lsls	r3, r3, #16
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	061b      	lsls	r3, r3, #24
 8005d04:	4933      	ldr	r1, [pc, #204]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d0a:	4b33      	ldr	r3, [pc, #204]	; (8005dd8 <HAL_RCC_OscConfig+0x4dc>)
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d10:	f7fd fb06 	bl	8003320 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d18:	f7fd fb02 	bl	8003320 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e04d      	b.n	8005dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d2a:	4b2a      	ldr	r3, [pc, #168]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0f0      	beq.n	8005d18 <HAL_RCC_OscConfig+0x41c>
 8005d36:	e045      	b.n	8005dc4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d38:	4b27      	ldr	r3, [pc, #156]	; (8005dd8 <HAL_RCC_OscConfig+0x4dc>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d3e:	f7fd faef 	bl	8003320 <HAL_GetTick>
 8005d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d44:	e008      	b.n	8005d58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d46:	f7fd faeb 	bl	8003320 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e036      	b.n	8005dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d58:	4b1e      	ldr	r3, [pc, #120]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1f0      	bne.n	8005d46 <HAL_RCC_OscConfig+0x44a>
 8005d64:	e02e      	b.n	8005dc4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e029      	b.n	8005dc6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d72:	4b18      	ldr	r3, [pc, #96]	; (8005dd4 <HAL_RCC_OscConfig+0x4d8>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d11c      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d115      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d10d      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d106      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d001      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e000      	b.n	8005dc6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40007000 	.word	0x40007000
 8005dd4:	40023800 	.word	0x40023800
 8005dd8:	42470060 	.word	0x42470060

08005ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e0cc      	b.n	8005f8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005df0:	4b68      	ldr	r3, [pc, #416]	; (8005f94 <HAL_RCC_ClockConfig+0x1b8>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 030f 	and.w	r3, r3, #15
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d90c      	bls.n	8005e18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dfe:	4b65      	ldr	r3, [pc, #404]	; (8005f94 <HAL_RCC_ClockConfig+0x1b8>)
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e06:	4b63      	ldr	r3, [pc, #396]	; (8005f94 <HAL_RCC_ClockConfig+0x1b8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d001      	beq.n	8005e18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e0b8      	b.n	8005f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d020      	beq.n	8005e66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e30:	4b59      	ldr	r3, [pc, #356]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	4a58      	ldr	r2, [pc, #352]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e48:	4b53      	ldr	r3, [pc, #332]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	4a52      	ldr	r2, [pc, #328]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e54:	4b50      	ldr	r3, [pc, #320]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	494d      	ldr	r1, [pc, #308]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d044      	beq.n	8005efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d107      	bne.n	8005e8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e7a:	4b47      	ldr	r3, [pc, #284]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d119      	bne.n	8005eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e07f      	b.n	8005f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d003      	beq.n	8005e9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d107      	bne.n	8005eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e9a:	4b3f      	ldr	r3, [pc, #252]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d109      	bne.n	8005eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e06f      	b.n	8005f8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eaa:	4b3b      	ldr	r3, [pc, #236]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e067      	b.n	8005f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eba:	4b37      	ldr	r3, [pc, #220]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f023 0203 	bic.w	r2, r3, #3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	4934      	ldr	r1, [pc, #208]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ecc:	f7fd fa28 	bl	8003320 <HAL_GetTick>
 8005ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ed2:	e00a      	b.n	8005eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ed4:	f7fd fa24 	bl	8003320 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e04f      	b.n	8005f8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eea:	4b2b      	ldr	r3, [pc, #172]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 020c 	and.w	r2, r3, #12
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d1eb      	bne.n	8005ed4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005efc:	4b25      	ldr	r3, [pc, #148]	; (8005f94 <HAL_RCC_ClockConfig+0x1b8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 030f 	and.w	r3, r3, #15
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d20c      	bcs.n	8005f24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f0a:	4b22      	ldr	r3, [pc, #136]	; (8005f94 <HAL_RCC_ClockConfig+0x1b8>)
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f12:	4b20      	ldr	r3, [pc, #128]	; (8005f94 <HAL_RCC_ClockConfig+0x1b8>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d001      	beq.n	8005f24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e032      	b.n	8005f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d008      	beq.n	8005f42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f30:	4b19      	ldr	r3, [pc, #100]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	4916      	ldr	r1, [pc, #88]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d009      	beq.n	8005f62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f4e:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	490e      	ldr	r1, [pc, #56]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f62:	f000 f821 	bl	8005fa8 <HAL_RCC_GetSysClockFreq>
 8005f66:	4601      	mov	r1, r0
 8005f68:	4b0b      	ldr	r3, [pc, #44]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	091b      	lsrs	r3, r3, #4
 8005f6e:	f003 030f 	and.w	r3, r3, #15
 8005f72:	4a0a      	ldr	r2, [pc, #40]	; (8005f9c <HAL_RCC_ClockConfig+0x1c0>)
 8005f74:	5cd3      	ldrb	r3, [r2, r3]
 8005f76:	fa21 f303 	lsr.w	r3, r1, r3
 8005f7a:	4a09      	ldr	r2, [pc, #36]	; (8005fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f7e:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fd f988 	bl	8003298 <HAL_InitTick>

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	40023c00 	.word	0x40023c00
 8005f98:	40023800 	.word	0x40023800
 8005f9c:	0800b244 	.word	0x0800b244
 8005fa0:	20000018 	.word	0x20000018
 8005fa4:	2000001c 	.word	0x2000001c

08005fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	607b      	str	r3, [r7, #4]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fbe:	4b63      	ldr	r3, [pc, #396]	; (800614c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 030c 	and.w	r3, r3, #12
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d007      	beq.n	8005fda <HAL_RCC_GetSysClockFreq+0x32>
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d008      	beq.n	8005fe0 <HAL_RCC_GetSysClockFreq+0x38>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f040 80b4 	bne.w	800613c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fd4:	4b5e      	ldr	r3, [pc, #376]	; (8006150 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005fd6:	60bb      	str	r3, [r7, #8]
       break;
 8005fd8:	e0b3      	b.n	8006142 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fda:	4b5e      	ldr	r3, [pc, #376]	; (8006154 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005fdc:	60bb      	str	r3, [r7, #8]
      break;
 8005fde:	e0b0      	b.n	8006142 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fe0:	4b5a      	ldr	r3, [pc, #360]	; (800614c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fe8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fea:	4b58      	ldr	r3, [pc, #352]	; (800614c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d04a      	beq.n	800608c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ff6:	4b55      	ldr	r3, [pc, #340]	; (800614c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	099b      	lsrs	r3, r3, #6
 8005ffc:	f04f 0400 	mov.w	r4, #0
 8006000:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	ea03 0501 	and.w	r5, r3, r1
 800600c:	ea04 0602 	and.w	r6, r4, r2
 8006010:	4629      	mov	r1, r5
 8006012:	4632      	mov	r2, r6
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	f04f 0400 	mov.w	r4, #0
 800601c:	0154      	lsls	r4, r2, #5
 800601e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006022:	014b      	lsls	r3, r1, #5
 8006024:	4619      	mov	r1, r3
 8006026:	4622      	mov	r2, r4
 8006028:	1b49      	subs	r1, r1, r5
 800602a:	eb62 0206 	sbc.w	r2, r2, r6
 800602e:	f04f 0300 	mov.w	r3, #0
 8006032:	f04f 0400 	mov.w	r4, #0
 8006036:	0194      	lsls	r4, r2, #6
 8006038:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800603c:	018b      	lsls	r3, r1, #6
 800603e:	1a5b      	subs	r3, r3, r1
 8006040:	eb64 0402 	sbc.w	r4, r4, r2
 8006044:	f04f 0100 	mov.w	r1, #0
 8006048:	f04f 0200 	mov.w	r2, #0
 800604c:	00e2      	lsls	r2, r4, #3
 800604e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006052:	00d9      	lsls	r1, r3, #3
 8006054:	460b      	mov	r3, r1
 8006056:	4614      	mov	r4, r2
 8006058:	195b      	adds	r3, r3, r5
 800605a:	eb44 0406 	adc.w	r4, r4, r6
 800605e:	f04f 0100 	mov.w	r1, #0
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	0262      	lsls	r2, r4, #9
 8006068:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800606c:	0259      	lsls	r1, r3, #9
 800606e:	460b      	mov	r3, r1
 8006070:	4614      	mov	r4, r2
 8006072:	4618      	mov	r0, r3
 8006074:	4621      	mov	r1, r4
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f04f 0400 	mov.w	r4, #0
 800607c:	461a      	mov	r2, r3
 800607e:	4623      	mov	r3, r4
 8006080:	f7fa fe0a 	bl	8000c98 <__aeabi_uldivmod>
 8006084:	4603      	mov	r3, r0
 8006086:	460c      	mov	r4, r1
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	e049      	b.n	8006120 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800608c:	4b2f      	ldr	r3, [pc, #188]	; (800614c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	099b      	lsrs	r3, r3, #6
 8006092:	f04f 0400 	mov.w	r4, #0
 8006096:	f240 11ff 	movw	r1, #511	; 0x1ff
 800609a:	f04f 0200 	mov.w	r2, #0
 800609e:	ea03 0501 	and.w	r5, r3, r1
 80060a2:	ea04 0602 	and.w	r6, r4, r2
 80060a6:	4629      	mov	r1, r5
 80060a8:	4632      	mov	r2, r6
 80060aa:	f04f 0300 	mov.w	r3, #0
 80060ae:	f04f 0400 	mov.w	r4, #0
 80060b2:	0154      	lsls	r4, r2, #5
 80060b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80060b8:	014b      	lsls	r3, r1, #5
 80060ba:	4619      	mov	r1, r3
 80060bc:	4622      	mov	r2, r4
 80060be:	1b49      	subs	r1, r1, r5
 80060c0:	eb62 0206 	sbc.w	r2, r2, r6
 80060c4:	f04f 0300 	mov.w	r3, #0
 80060c8:	f04f 0400 	mov.w	r4, #0
 80060cc:	0194      	lsls	r4, r2, #6
 80060ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80060d2:	018b      	lsls	r3, r1, #6
 80060d4:	1a5b      	subs	r3, r3, r1
 80060d6:	eb64 0402 	sbc.w	r4, r4, r2
 80060da:	f04f 0100 	mov.w	r1, #0
 80060de:	f04f 0200 	mov.w	r2, #0
 80060e2:	00e2      	lsls	r2, r4, #3
 80060e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80060e8:	00d9      	lsls	r1, r3, #3
 80060ea:	460b      	mov	r3, r1
 80060ec:	4614      	mov	r4, r2
 80060ee:	195b      	adds	r3, r3, r5
 80060f0:	eb44 0406 	adc.w	r4, r4, r6
 80060f4:	f04f 0100 	mov.w	r1, #0
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	02a2      	lsls	r2, r4, #10
 80060fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006102:	0299      	lsls	r1, r3, #10
 8006104:	460b      	mov	r3, r1
 8006106:	4614      	mov	r4, r2
 8006108:	4618      	mov	r0, r3
 800610a:	4621      	mov	r1, r4
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f04f 0400 	mov.w	r4, #0
 8006112:	461a      	mov	r2, r3
 8006114:	4623      	mov	r3, r4
 8006116:	f7fa fdbf 	bl	8000c98 <__aeabi_uldivmod>
 800611a:	4603      	mov	r3, r0
 800611c:	460c      	mov	r4, r1
 800611e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006120:	4b0a      	ldr	r3, [pc, #40]	; (800614c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	0c1b      	lsrs	r3, r3, #16
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	3301      	adds	r3, #1
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	fbb2 f3f3 	udiv	r3, r2, r3
 8006138:	60bb      	str	r3, [r7, #8]
      break;
 800613a:	e002      	b.n	8006142 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800613c:	4b04      	ldr	r3, [pc, #16]	; (8006150 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800613e:	60bb      	str	r3, [r7, #8]
      break;
 8006140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006142:	68bb      	ldr	r3, [r7, #8]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800614c:	40023800 	.word	0x40023800
 8006150:	00f42400 	.word	0x00f42400
 8006154:	007a1200 	.word	0x007a1200

08006158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800615c:	4b03      	ldr	r3, [pc, #12]	; (800616c <HAL_RCC_GetHCLKFreq+0x14>)
 800615e:	681b      	ldr	r3, [r3, #0]
}
 8006160:	4618      	mov	r0, r3
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	20000018 	.word	0x20000018

08006170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006174:	f7ff fff0 	bl	8006158 <HAL_RCC_GetHCLKFreq>
 8006178:	4601      	mov	r1, r0
 800617a:	4b05      	ldr	r3, [pc, #20]	; (8006190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	0a9b      	lsrs	r3, r3, #10
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	4a03      	ldr	r2, [pc, #12]	; (8006194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006186:	5cd3      	ldrb	r3, [r2, r3]
 8006188:	fa21 f303 	lsr.w	r3, r1, r3
}
 800618c:	4618      	mov	r0, r3
 800618e:	bd80      	pop	{r7, pc}
 8006190:	40023800 	.word	0x40023800
 8006194:	0800b254 	.word	0x0800b254

08006198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800619c:	f7ff ffdc 	bl	8006158 <HAL_RCC_GetHCLKFreq>
 80061a0:	4601      	mov	r1, r0
 80061a2:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	0b5b      	lsrs	r3, r3, #13
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	4a03      	ldr	r2, [pc, #12]	; (80061bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80061ae:	5cd3      	ldrb	r3, [r2, r3]
 80061b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	40023800 	.word	0x40023800
 80061bc:	0800b254 	.word	0x0800b254

080061c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e01d      	b.n	800620e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d106      	bne.n	80061ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7fc fec4 	bl	8002f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3304      	adds	r3, #4
 80061fc:	4619      	mov	r1, r3
 80061fe:	4610      	mov	r0, r2
 8006200:	f000 fbf6 	bl	80069f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006216:	b480      	push	{r7}
 8006218:	b085      	sub	sp, #20
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0201 	orr.w	r2, r2, #1
 800622c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b06      	cmp	r3, #6
 800623e:	d007      	beq.n	8006250 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68da      	ldr	r2, [r3, #12]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0201 	bic.w	r2, r2, #1
 8006274:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6a1a      	ldr	r2, [r3, #32]
 800627c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006280:	4013      	ands	r3, r2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10f      	bne.n	80062a6 <HAL_TIM_Base_Stop_IT+0x48>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6a1a      	ldr	r2, [r3, #32]
 800628c:	f240 4344 	movw	r3, #1092	; 0x444
 8006290:	4013      	ands	r3, r2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d107      	bne.n	80062a6 <HAL_TIM_Base_Stop_IT+0x48>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0201 	bic.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e01d      	b.n	8006302 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d106      	bne.n	80062e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fc fe28 	bl	8002f30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3304      	adds	r3, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f000 fb7c 	bl	80069f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2201      	movs	r2, #1
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fe0c 	bl	8006f3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a10      	ldr	r2, [pc, #64]	; (800636c <HAL_TIM_PWM_Start+0x60>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d107      	bne.n	800633e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800633c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b06      	cmp	r3, #6
 800634e:	d007      	beq.n	8006360 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0201 	orr.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	40010000 	.word	0x40010000

08006370 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e083      	b.n	800648c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7fc fd2f 	bl	8002dfc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2202      	movs	r2, #2
 80063a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	6812      	ldr	r2, [r2, #0]
 80063b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063b4:	f023 0307 	bic.w	r3, r3, #7
 80063b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3304      	adds	r3, #4
 80063c2:	4619      	mov	r1, r3
 80063c4:	4610      	mov	r0, r2
 80063c6:	f000 fb13 	bl	80069f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063f2:	f023 0303 	bic.w	r3, r3, #3
 80063f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	4313      	orrs	r3, r2
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006410:	f023 030c 	bic.w	r3, r3, #12
 8006414:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800641c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006420:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	021b      	lsls	r3, r3, #8
 800642c:	4313      	orrs	r3, r2
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	4313      	orrs	r3, r2
 8006432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	011a      	lsls	r2, r3, #4
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	031b      	lsls	r3, r3, #12
 8006440:	4313      	orrs	r3, r2
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800644e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006456:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	4313      	orrs	r3, r2
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d122      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d11b      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0202 	mvn.w	r2, #2
 80064c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fa6b 	bl	80069b2 <HAL_TIM_IC_CaptureCallback>
 80064dc:	e005      	b.n	80064ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fa5d 	bl	800699e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fa6e 	bl	80069c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0304 	and.w	r3, r3, #4
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d122      	bne.n	8006544 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b04      	cmp	r3, #4
 800650a:	d11b      	bne.n	8006544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f06f 0204 	mvn.w	r2, #4
 8006514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2202      	movs	r2, #2
 800651a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fa41 	bl	80069b2 <HAL_TIM_IC_CaptureCallback>
 8006530:	e005      	b.n	800653e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fa33 	bl	800699e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fa44 	bl	80069c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b08      	cmp	r3, #8
 8006550:	d122      	bne.n	8006598 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b08      	cmp	r3, #8
 800655e:	d11b      	bne.n	8006598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f06f 0208 	mvn.w	r2, #8
 8006568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2204      	movs	r2, #4
 800656e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fa17 	bl	80069b2 <HAL_TIM_IC_CaptureCallback>
 8006584:	e005      	b.n	8006592 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fa09 	bl	800699e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fa1a 	bl	80069c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f003 0310 	and.w	r3, r3, #16
 80065a2:	2b10      	cmp	r3, #16
 80065a4:	d122      	bne.n	80065ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	2b10      	cmp	r3, #16
 80065b2:	d11b      	bne.n	80065ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0210 	mvn.w	r2, #16
 80065bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2208      	movs	r2, #8
 80065c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f9ed 	bl	80069b2 <HAL_TIM_IC_CaptureCallback>
 80065d8:	e005      	b.n	80065e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f9df 	bl	800699e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f9f0 	bl	80069c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d10e      	bne.n	8006618 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b01      	cmp	r3, #1
 8006606:	d107      	bne.n	8006618 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f06f 0201 	mvn.w	r2, #1
 8006610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fc fa60 	bl	8002ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006622:	2b80      	cmp	r3, #128	; 0x80
 8006624:	d10e      	bne.n	8006644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006630:	2b80      	cmp	r3, #128	; 0x80
 8006632:	d107      	bne.n	8006644 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800663c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fd1a 	bl	8007078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664e:	2b40      	cmp	r3, #64	; 0x40
 8006650:	d10e      	bne.n	8006670 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665c:	2b40      	cmp	r3, #64	; 0x40
 800665e:	d107      	bne.n	8006670 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f9b5 	bl	80069da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f003 0320 	and.w	r3, r3, #32
 800667a:	2b20      	cmp	r3, #32
 800667c:	d10e      	bne.n	800669c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f003 0320 	and.w	r3, r3, #32
 8006688:	2b20      	cmp	r3, #32
 800668a:	d107      	bne.n	800669c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f06f 0220 	mvn.w	r2, #32
 8006694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fce4 	bl	8007064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800669c:	bf00      	nop
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e0b4      	b.n	8006828 <HAL_TIM_PWM_ConfigChannel+0x184>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2202      	movs	r2, #2
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b0c      	cmp	r3, #12
 80066d2:	f200 809f 	bhi.w	8006814 <HAL_TIM_PWM_ConfigChannel+0x170>
 80066d6:	a201      	add	r2, pc, #4	; (adr r2, 80066dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80066d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066dc:	08006711 	.word	0x08006711
 80066e0:	08006815 	.word	0x08006815
 80066e4:	08006815 	.word	0x08006815
 80066e8:	08006815 	.word	0x08006815
 80066ec:	08006751 	.word	0x08006751
 80066f0:	08006815 	.word	0x08006815
 80066f4:	08006815 	.word	0x08006815
 80066f8:	08006815 	.word	0x08006815
 80066fc:	08006793 	.word	0x08006793
 8006700:	08006815 	.word	0x08006815
 8006704:	08006815 	.word	0x08006815
 8006708:	08006815 	.word	0x08006815
 800670c:	080067d3 	.word	0x080067d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68b9      	ldr	r1, [r7, #8]
 8006716:	4618      	mov	r0, r3
 8006718:	f000 f9ea 	bl	8006af0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699a      	ldr	r2, [r3, #24]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0208 	orr.w	r2, r2, #8
 800672a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699a      	ldr	r2, [r3, #24]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0204 	bic.w	r2, r2, #4
 800673a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6999      	ldr	r1, [r3, #24]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	691a      	ldr	r2, [r3, #16]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	619a      	str	r2, [r3, #24]
      break;
 800674e:	e062      	b.n	8006816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68b9      	ldr	r1, [r7, #8]
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fa30 	bl	8006bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699a      	ldr	r2, [r3, #24]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800676a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699a      	ldr	r2, [r3, #24]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800677a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6999      	ldr	r1, [r3, #24]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	021a      	lsls	r2, r3, #8
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	619a      	str	r2, [r3, #24]
      break;
 8006790:	e041      	b.n	8006816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68b9      	ldr	r1, [r7, #8]
 8006798:	4618      	mov	r0, r3
 800679a:	f000 fa7b 	bl	8006c94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	69da      	ldr	r2, [r3, #28]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f042 0208 	orr.w	r2, r2, #8
 80067ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	69da      	ldr	r2, [r3, #28]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 0204 	bic.w	r2, r2, #4
 80067bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	69d9      	ldr	r1, [r3, #28]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	691a      	ldr	r2, [r3, #16]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	61da      	str	r2, [r3, #28]
      break;
 80067d0:	e021      	b.n	8006816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68b9      	ldr	r1, [r7, #8]
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fac5 	bl	8006d68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69da      	ldr	r2, [r3, #28]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	69da      	ldr	r2, [r3, #28]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69d9      	ldr	r1, [r3, #28]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	021a      	lsls	r2, r3, #8
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	61da      	str	r2, [r3, #28]
      break;
 8006812:	e000      	b.n	8006816 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006814:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006840:	2b01      	cmp	r3, #1
 8006842:	d101      	bne.n	8006848 <HAL_TIM_ConfigClockSource+0x18>
 8006844:	2302      	movs	r3, #2
 8006846:	e0a6      	b.n	8006996 <HAL_TIM_ConfigClockSource+0x166>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006866:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800686e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b40      	cmp	r3, #64	; 0x40
 800687e:	d067      	beq.n	8006950 <HAL_TIM_ConfigClockSource+0x120>
 8006880:	2b40      	cmp	r3, #64	; 0x40
 8006882:	d80b      	bhi.n	800689c <HAL_TIM_ConfigClockSource+0x6c>
 8006884:	2b10      	cmp	r3, #16
 8006886:	d073      	beq.n	8006970 <HAL_TIM_ConfigClockSource+0x140>
 8006888:	2b10      	cmp	r3, #16
 800688a:	d802      	bhi.n	8006892 <HAL_TIM_ConfigClockSource+0x62>
 800688c:	2b00      	cmp	r3, #0
 800688e:	d06f      	beq.n	8006970 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006890:	e078      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006892:	2b20      	cmp	r3, #32
 8006894:	d06c      	beq.n	8006970 <HAL_TIM_ConfigClockSource+0x140>
 8006896:	2b30      	cmp	r3, #48	; 0x30
 8006898:	d06a      	beq.n	8006970 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800689a:	e073      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800689c:	2b70      	cmp	r3, #112	; 0x70
 800689e:	d00d      	beq.n	80068bc <HAL_TIM_ConfigClockSource+0x8c>
 80068a0:	2b70      	cmp	r3, #112	; 0x70
 80068a2:	d804      	bhi.n	80068ae <HAL_TIM_ConfigClockSource+0x7e>
 80068a4:	2b50      	cmp	r3, #80	; 0x50
 80068a6:	d033      	beq.n	8006910 <HAL_TIM_ConfigClockSource+0xe0>
 80068a8:	2b60      	cmp	r3, #96	; 0x60
 80068aa:	d041      	beq.n	8006930 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80068ac:	e06a      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80068ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b2:	d066      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0x152>
 80068b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b8:	d017      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0xba>
      break;
 80068ba:	e063      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6818      	ldr	r0, [r3, #0]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	6899      	ldr	r1, [r3, #8]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f000 fb16 	bl	8006efc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	609a      	str	r2, [r3, #8]
      break;
 80068e8:	e04c      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	6899      	ldr	r1, [r3, #8]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f000 faff 	bl	8006efc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800690c:	609a      	str	r2, [r3, #8]
      break;
 800690e:	e039      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	6859      	ldr	r1, [r3, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	461a      	mov	r2, r3
 800691e:	f000 fa73 	bl	8006e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2150      	movs	r1, #80	; 0x50
 8006928:	4618      	mov	r0, r3
 800692a:	f000 facc 	bl	8006ec6 <TIM_ITRx_SetConfig>
      break;
 800692e:	e029      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6818      	ldr	r0, [r3, #0]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	6859      	ldr	r1, [r3, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	461a      	mov	r2, r3
 800693e:	f000 fa92 	bl	8006e66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2160      	movs	r1, #96	; 0x60
 8006948:	4618      	mov	r0, r3
 800694a:	f000 fabc 	bl	8006ec6 <TIM_ITRx_SetConfig>
      break;
 800694e:	e019      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6818      	ldr	r0, [r3, #0]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	6859      	ldr	r1, [r3, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	461a      	mov	r2, r3
 800695e:	f000 fa53 	bl	8006e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2140      	movs	r1, #64	; 0x40
 8006968:	4618      	mov	r0, r3
 800696a:	f000 faac 	bl	8006ec6 <TIM_ITRx_SetConfig>
      break;
 800696e:	e009      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4619      	mov	r1, r3
 800697a:	4610      	mov	r0, r2
 800697c:	f000 faa3 	bl	8006ec6 <TIM_ITRx_SetConfig>
      break;
 8006980:	e000      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b083      	sub	sp, #12
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069e2:	bf00      	nop
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
	...

080069f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a34      	ldr	r2, [pc, #208]	; (8006ad4 <TIM_Base_SetConfig+0xe4>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d00f      	beq.n	8006a28 <TIM_Base_SetConfig+0x38>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a0e:	d00b      	beq.n	8006a28 <TIM_Base_SetConfig+0x38>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a31      	ldr	r2, [pc, #196]	; (8006ad8 <TIM_Base_SetConfig+0xe8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d007      	beq.n	8006a28 <TIM_Base_SetConfig+0x38>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a30      	ldr	r2, [pc, #192]	; (8006adc <TIM_Base_SetConfig+0xec>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d003      	beq.n	8006a28 <TIM_Base_SetConfig+0x38>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a2f      	ldr	r2, [pc, #188]	; (8006ae0 <TIM_Base_SetConfig+0xf0>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d108      	bne.n	8006a3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a25      	ldr	r2, [pc, #148]	; (8006ad4 <TIM_Base_SetConfig+0xe4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d01b      	beq.n	8006a7a <TIM_Base_SetConfig+0x8a>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a48:	d017      	beq.n	8006a7a <TIM_Base_SetConfig+0x8a>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a22      	ldr	r2, [pc, #136]	; (8006ad8 <TIM_Base_SetConfig+0xe8>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d013      	beq.n	8006a7a <TIM_Base_SetConfig+0x8a>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a21      	ldr	r2, [pc, #132]	; (8006adc <TIM_Base_SetConfig+0xec>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d00f      	beq.n	8006a7a <TIM_Base_SetConfig+0x8a>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a20      	ldr	r2, [pc, #128]	; (8006ae0 <TIM_Base_SetConfig+0xf0>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00b      	beq.n	8006a7a <TIM_Base_SetConfig+0x8a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a1f      	ldr	r2, [pc, #124]	; (8006ae4 <TIM_Base_SetConfig+0xf4>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d007      	beq.n	8006a7a <TIM_Base_SetConfig+0x8a>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a1e      	ldr	r2, [pc, #120]	; (8006ae8 <TIM_Base_SetConfig+0xf8>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d003      	beq.n	8006a7a <TIM_Base_SetConfig+0x8a>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a1d      	ldr	r2, [pc, #116]	; (8006aec <TIM_Base_SetConfig+0xfc>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d108      	bne.n	8006a8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a08      	ldr	r2, [pc, #32]	; (8006ad4 <TIM_Base_SetConfig+0xe4>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d103      	bne.n	8006ac0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	615a      	str	r2, [r3, #20]
}
 8006ac6:	bf00      	nop
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	40010000 	.word	0x40010000
 8006ad8:	40000400 	.word	0x40000400
 8006adc:	40000800 	.word	0x40000800
 8006ae0:	40000c00 	.word	0x40000c00
 8006ae4:	40014000 	.word	0x40014000
 8006ae8:	40014400 	.word	0x40014400
 8006aec:	40014800 	.word	0x40014800

08006af0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	f023 0201 	bic.w	r2, r3, #1
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0303 	bic.w	r3, r3, #3
 8006b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f023 0302 	bic.w	r3, r3, #2
 8006b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a1c      	ldr	r2, [pc, #112]	; (8006bb8 <TIM_OC1_SetConfig+0xc8>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d10c      	bne.n	8006b66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f023 0308 	bic.w	r3, r3, #8
 8006b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f023 0304 	bic.w	r3, r3, #4
 8006b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a13      	ldr	r2, [pc, #76]	; (8006bb8 <TIM_OC1_SetConfig+0xc8>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d111      	bne.n	8006b92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	621a      	str	r2, [r3, #32]
}
 8006bac:	bf00      	nop
 8006bae:	371c      	adds	r7, #28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	40010000 	.word	0x40010000

08006bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f023 0210 	bic.w	r2, r3, #16
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	021b      	lsls	r3, r3, #8
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f023 0320 	bic.w	r3, r3, #32
 8006c06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	011b      	lsls	r3, r3, #4
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a1e      	ldr	r2, [pc, #120]	; (8006c90 <TIM_OC2_SetConfig+0xd4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d10d      	bne.n	8006c38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a15      	ldr	r2, [pc, #84]	; (8006c90 <TIM_OC2_SetConfig+0xd4>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d113      	bne.n	8006c68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	621a      	str	r2, [r3, #32]
}
 8006c82:	bf00      	nop
 8006c84:	371c      	adds	r7, #28
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	40010000 	.word	0x40010000

08006c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0303 	bic.w	r3, r3, #3
 8006cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	021b      	lsls	r3, r3, #8
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a1d      	ldr	r2, [pc, #116]	; (8006d64 <TIM_OC3_SetConfig+0xd0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d10d      	bne.n	8006d0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	021b      	lsls	r3, r3, #8
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a14      	ldr	r2, [pc, #80]	; (8006d64 <TIM_OC3_SetConfig+0xd0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d113      	bne.n	8006d3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	011b      	lsls	r3, r3, #4
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	621a      	str	r2, [r3, #32]
}
 8006d58:	bf00      	nop
 8006d5a:	371c      	adds	r7, #28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	40010000 	.word	0x40010000

08006d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	021b      	lsls	r3, r3, #8
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006db2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	031b      	lsls	r3, r3, #12
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a10      	ldr	r2, [pc, #64]	; (8006e04 <TIM_OC4_SetConfig+0x9c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d109      	bne.n	8006ddc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	019b      	lsls	r3, r3, #6
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	621a      	str	r2, [r3, #32]
}
 8006df6:	bf00      	nop
 8006df8:	371c      	adds	r7, #28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	40010000 	.word	0x40010000

08006e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	f023 0201 	bic.w	r2, r3, #1
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	011b      	lsls	r3, r3, #4
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f023 030a 	bic.w	r3, r3, #10
 8006e44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	621a      	str	r2, [r3, #32]
}
 8006e5a:	bf00      	nop
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b087      	sub	sp, #28
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	60b9      	str	r1, [r7, #8]
 8006e70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	f023 0210 	bic.w	r2, r3, #16
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	031b      	lsls	r3, r3, #12
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ea2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	011b      	lsls	r3, r3, #4
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	621a      	str	r2, [r3, #32]
}
 8006eba:	bf00      	nop
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b085      	sub	sp, #20
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	f043 0307 	orr.w	r3, r3, #7
 8006ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	609a      	str	r2, [r3, #8]
}
 8006ef0:	bf00      	nop
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	021a      	lsls	r2, r3, #8
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	609a      	str	r2, [r3, #8]
}
 8006f30:	bf00      	nop
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	2201      	movs	r2, #1
 8006f50:	fa02 f303 	lsl.w	r3, r2, r3
 8006f54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6a1a      	ldr	r2, [r3, #32]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	43db      	mvns	r3, r3
 8006f5e:	401a      	ands	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6a1a      	ldr	r2, [r3, #32]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f003 031f 	and.w	r3, r3, #31
 8006f6e:	6879      	ldr	r1, [r7, #4]
 8006f70:	fa01 f303 	lsl.w	r3, r1, r3
 8006f74:	431a      	orrs	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	621a      	str	r2, [r3, #32]
}
 8006f7a:	bf00      	nop
 8006f7c:	371c      	adds	r7, #28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
	...

08006f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e050      	b.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a1c      	ldr	r2, [pc, #112]	; (8007050 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d018      	beq.n	8007016 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fec:	d013      	beq.n	8007016 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a18      	ldr	r2, [pc, #96]	; (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00e      	beq.n	8007016 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a16      	ldr	r2, [pc, #88]	; (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d009      	beq.n	8007016 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a15      	ldr	r2, [pc, #84]	; (800705c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d004      	beq.n	8007016 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a13      	ldr	r2, [pc, #76]	; (8007060 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d10c      	bne.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800701c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	4313      	orrs	r3, r2
 8007026:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40010000 	.word	0x40010000
 8007054:	40000400 	.word	0x40000400
 8007058:	40000800 	.word	0x40000800
 800705c:	40000c00 	.word	0x40000c00
 8007060:	40014000 	.word	0x40014000

08007064 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e03f      	b.n	800711e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d106      	bne.n	80070b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7fb ffc0 	bl	8003038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2224      	movs	r2, #36	; 0x24
 80070bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f829 	bl	8007128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	691a      	ldr	r2, [r3, #16]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	695a      	ldr	r2, [r3, #20]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2220      	movs	r2, #32
 8007110:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2220      	movs	r2, #32
 8007118:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	b085      	sub	sp, #20
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68da      	ldr	r2, [r3, #12]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	431a      	orrs	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	431a      	orrs	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	4313      	orrs	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800716a:	f023 030c 	bic.w	r3, r3, #12
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6812      	ldr	r2, [r2, #0]
 8007172:	68f9      	ldr	r1, [r7, #12]
 8007174:	430b      	orrs	r3, r1
 8007176:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699a      	ldr	r2, [r3, #24]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007196:	f040 818b 	bne.w	80074b0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4ac1      	ldr	r2, [pc, #772]	; (80074a4 <UART_SetConfig+0x37c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d005      	beq.n	80071b0 <UART_SetConfig+0x88>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4abf      	ldr	r2, [pc, #764]	; (80074a8 <UART_SetConfig+0x380>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	f040 80bd 	bne.w	800732a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071b0:	f7fe fff2 	bl	8006198 <HAL_RCC_GetPCLK2Freq>
 80071b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	461d      	mov	r5, r3
 80071ba:	f04f 0600 	mov.w	r6, #0
 80071be:	46a8      	mov	r8, r5
 80071c0:	46b1      	mov	r9, r6
 80071c2:	eb18 0308 	adds.w	r3, r8, r8
 80071c6:	eb49 0409 	adc.w	r4, r9, r9
 80071ca:	4698      	mov	r8, r3
 80071cc:	46a1      	mov	r9, r4
 80071ce:	eb18 0805 	adds.w	r8, r8, r5
 80071d2:	eb49 0906 	adc.w	r9, r9, r6
 80071d6:	f04f 0100 	mov.w	r1, #0
 80071da:	f04f 0200 	mov.w	r2, #0
 80071de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80071e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80071e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80071ea:	4688      	mov	r8, r1
 80071ec:	4691      	mov	r9, r2
 80071ee:	eb18 0005 	adds.w	r0, r8, r5
 80071f2:	eb49 0106 	adc.w	r1, r9, r6
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	461d      	mov	r5, r3
 80071fc:	f04f 0600 	mov.w	r6, #0
 8007200:	196b      	adds	r3, r5, r5
 8007202:	eb46 0406 	adc.w	r4, r6, r6
 8007206:	461a      	mov	r2, r3
 8007208:	4623      	mov	r3, r4
 800720a:	f7f9 fd45 	bl	8000c98 <__aeabi_uldivmod>
 800720e:	4603      	mov	r3, r0
 8007210:	460c      	mov	r4, r1
 8007212:	461a      	mov	r2, r3
 8007214:	4ba5      	ldr	r3, [pc, #660]	; (80074ac <UART_SetConfig+0x384>)
 8007216:	fba3 2302 	umull	r2, r3, r3, r2
 800721a:	095b      	lsrs	r3, r3, #5
 800721c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	461d      	mov	r5, r3
 8007224:	f04f 0600 	mov.w	r6, #0
 8007228:	46a9      	mov	r9, r5
 800722a:	46b2      	mov	sl, r6
 800722c:	eb19 0309 	adds.w	r3, r9, r9
 8007230:	eb4a 040a 	adc.w	r4, sl, sl
 8007234:	4699      	mov	r9, r3
 8007236:	46a2      	mov	sl, r4
 8007238:	eb19 0905 	adds.w	r9, r9, r5
 800723c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007240:	f04f 0100 	mov.w	r1, #0
 8007244:	f04f 0200 	mov.w	r2, #0
 8007248:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800724c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007250:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007254:	4689      	mov	r9, r1
 8007256:	4692      	mov	sl, r2
 8007258:	eb19 0005 	adds.w	r0, r9, r5
 800725c:	eb4a 0106 	adc.w	r1, sl, r6
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	461d      	mov	r5, r3
 8007266:	f04f 0600 	mov.w	r6, #0
 800726a:	196b      	adds	r3, r5, r5
 800726c:	eb46 0406 	adc.w	r4, r6, r6
 8007270:	461a      	mov	r2, r3
 8007272:	4623      	mov	r3, r4
 8007274:	f7f9 fd10 	bl	8000c98 <__aeabi_uldivmod>
 8007278:	4603      	mov	r3, r0
 800727a:	460c      	mov	r4, r1
 800727c:	461a      	mov	r2, r3
 800727e:	4b8b      	ldr	r3, [pc, #556]	; (80074ac <UART_SetConfig+0x384>)
 8007280:	fba3 1302 	umull	r1, r3, r3, r2
 8007284:	095b      	lsrs	r3, r3, #5
 8007286:	2164      	movs	r1, #100	; 0x64
 8007288:	fb01 f303 	mul.w	r3, r1, r3
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	00db      	lsls	r3, r3, #3
 8007290:	3332      	adds	r3, #50	; 0x32
 8007292:	4a86      	ldr	r2, [pc, #536]	; (80074ac <UART_SetConfig+0x384>)
 8007294:	fba2 2303 	umull	r2, r3, r2, r3
 8007298:	095b      	lsrs	r3, r3, #5
 800729a:	005b      	lsls	r3, r3, #1
 800729c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80072a0:	4498      	add	r8, r3
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	461d      	mov	r5, r3
 80072a6:	f04f 0600 	mov.w	r6, #0
 80072aa:	46a9      	mov	r9, r5
 80072ac:	46b2      	mov	sl, r6
 80072ae:	eb19 0309 	adds.w	r3, r9, r9
 80072b2:	eb4a 040a 	adc.w	r4, sl, sl
 80072b6:	4699      	mov	r9, r3
 80072b8:	46a2      	mov	sl, r4
 80072ba:	eb19 0905 	adds.w	r9, r9, r5
 80072be:	eb4a 0a06 	adc.w	sl, sl, r6
 80072c2:	f04f 0100 	mov.w	r1, #0
 80072c6:	f04f 0200 	mov.w	r2, #0
 80072ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072d6:	4689      	mov	r9, r1
 80072d8:	4692      	mov	sl, r2
 80072da:	eb19 0005 	adds.w	r0, r9, r5
 80072de:	eb4a 0106 	adc.w	r1, sl, r6
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	461d      	mov	r5, r3
 80072e8:	f04f 0600 	mov.w	r6, #0
 80072ec:	196b      	adds	r3, r5, r5
 80072ee:	eb46 0406 	adc.w	r4, r6, r6
 80072f2:	461a      	mov	r2, r3
 80072f4:	4623      	mov	r3, r4
 80072f6:	f7f9 fccf 	bl	8000c98 <__aeabi_uldivmod>
 80072fa:	4603      	mov	r3, r0
 80072fc:	460c      	mov	r4, r1
 80072fe:	461a      	mov	r2, r3
 8007300:	4b6a      	ldr	r3, [pc, #424]	; (80074ac <UART_SetConfig+0x384>)
 8007302:	fba3 1302 	umull	r1, r3, r3, r2
 8007306:	095b      	lsrs	r3, r3, #5
 8007308:	2164      	movs	r1, #100	; 0x64
 800730a:	fb01 f303 	mul.w	r3, r1, r3
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	3332      	adds	r3, #50	; 0x32
 8007314:	4a65      	ldr	r2, [pc, #404]	; (80074ac <UART_SetConfig+0x384>)
 8007316:	fba2 2303 	umull	r2, r3, r2, r3
 800731a:	095b      	lsrs	r3, r3, #5
 800731c:	f003 0207 	and.w	r2, r3, #7
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4442      	add	r2, r8
 8007326:	609a      	str	r2, [r3, #8]
 8007328:	e26f      	b.n	800780a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800732a:	f7fe ff21 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 800732e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	461d      	mov	r5, r3
 8007334:	f04f 0600 	mov.w	r6, #0
 8007338:	46a8      	mov	r8, r5
 800733a:	46b1      	mov	r9, r6
 800733c:	eb18 0308 	adds.w	r3, r8, r8
 8007340:	eb49 0409 	adc.w	r4, r9, r9
 8007344:	4698      	mov	r8, r3
 8007346:	46a1      	mov	r9, r4
 8007348:	eb18 0805 	adds.w	r8, r8, r5
 800734c:	eb49 0906 	adc.w	r9, r9, r6
 8007350:	f04f 0100 	mov.w	r1, #0
 8007354:	f04f 0200 	mov.w	r2, #0
 8007358:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800735c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007360:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007364:	4688      	mov	r8, r1
 8007366:	4691      	mov	r9, r2
 8007368:	eb18 0005 	adds.w	r0, r8, r5
 800736c:	eb49 0106 	adc.w	r1, r9, r6
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	461d      	mov	r5, r3
 8007376:	f04f 0600 	mov.w	r6, #0
 800737a:	196b      	adds	r3, r5, r5
 800737c:	eb46 0406 	adc.w	r4, r6, r6
 8007380:	461a      	mov	r2, r3
 8007382:	4623      	mov	r3, r4
 8007384:	f7f9 fc88 	bl	8000c98 <__aeabi_uldivmod>
 8007388:	4603      	mov	r3, r0
 800738a:	460c      	mov	r4, r1
 800738c:	461a      	mov	r2, r3
 800738e:	4b47      	ldr	r3, [pc, #284]	; (80074ac <UART_SetConfig+0x384>)
 8007390:	fba3 2302 	umull	r2, r3, r3, r2
 8007394:	095b      	lsrs	r3, r3, #5
 8007396:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	461d      	mov	r5, r3
 800739e:	f04f 0600 	mov.w	r6, #0
 80073a2:	46a9      	mov	r9, r5
 80073a4:	46b2      	mov	sl, r6
 80073a6:	eb19 0309 	adds.w	r3, r9, r9
 80073aa:	eb4a 040a 	adc.w	r4, sl, sl
 80073ae:	4699      	mov	r9, r3
 80073b0:	46a2      	mov	sl, r4
 80073b2:	eb19 0905 	adds.w	r9, r9, r5
 80073b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80073ba:	f04f 0100 	mov.w	r1, #0
 80073be:	f04f 0200 	mov.w	r2, #0
 80073c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073ce:	4689      	mov	r9, r1
 80073d0:	4692      	mov	sl, r2
 80073d2:	eb19 0005 	adds.w	r0, r9, r5
 80073d6:	eb4a 0106 	adc.w	r1, sl, r6
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	461d      	mov	r5, r3
 80073e0:	f04f 0600 	mov.w	r6, #0
 80073e4:	196b      	adds	r3, r5, r5
 80073e6:	eb46 0406 	adc.w	r4, r6, r6
 80073ea:	461a      	mov	r2, r3
 80073ec:	4623      	mov	r3, r4
 80073ee:	f7f9 fc53 	bl	8000c98 <__aeabi_uldivmod>
 80073f2:	4603      	mov	r3, r0
 80073f4:	460c      	mov	r4, r1
 80073f6:	461a      	mov	r2, r3
 80073f8:	4b2c      	ldr	r3, [pc, #176]	; (80074ac <UART_SetConfig+0x384>)
 80073fa:	fba3 1302 	umull	r1, r3, r3, r2
 80073fe:	095b      	lsrs	r3, r3, #5
 8007400:	2164      	movs	r1, #100	; 0x64
 8007402:	fb01 f303 	mul.w	r3, r1, r3
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	3332      	adds	r3, #50	; 0x32
 800740c:	4a27      	ldr	r2, [pc, #156]	; (80074ac <UART_SetConfig+0x384>)
 800740e:	fba2 2303 	umull	r2, r3, r2, r3
 8007412:	095b      	lsrs	r3, r3, #5
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800741a:	4498      	add	r8, r3
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	461d      	mov	r5, r3
 8007420:	f04f 0600 	mov.w	r6, #0
 8007424:	46a9      	mov	r9, r5
 8007426:	46b2      	mov	sl, r6
 8007428:	eb19 0309 	adds.w	r3, r9, r9
 800742c:	eb4a 040a 	adc.w	r4, sl, sl
 8007430:	4699      	mov	r9, r3
 8007432:	46a2      	mov	sl, r4
 8007434:	eb19 0905 	adds.w	r9, r9, r5
 8007438:	eb4a 0a06 	adc.w	sl, sl, r6
 800743c:	f04f 0100 	mov.w	r1, #0
 8007440:	f04f 0200 	mov.w	r2, #0
 8007444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007448:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800744c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007450:	4689      	mov	r9, r1
 8007452:	4692      	mov	sl, r2
 8007454:	eb19 0005 	adds.w	r0, r9, r5
 8007458:	eb4a 0106 	adc.w	r1, sl, r6
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	461d      	mov	r5, r3
 8007462:	f04f 0600 	mov.w	r6, #0
 8007466:	196b      	adds	r3, r5, r5
 8007468:	eb46 0406 	adc.w	r4, r6, r6
 800746c:	461a      	mov	r2, r3
 800746e:	4623      	mov	r3, r4
 8007470:	f7f9 fc12 	bl	8000c98 <__aeabi_uldivmod>
 8007474:	4603      	mov	r3, r0
 8007476:	460c      	mov	r4, r1
 8007478:	461a      	mov	r2, r3
 800747a:	4b0c      	ldr	r3, [pc, #48]	; (80074ac <UART_SetConfig+0x384>)
 800747c:	fba3 1302 	umull	r1, r3, r3, r2
 8007480:	095b      	lsrs	r3, r3, #5
 8007482:	2164      	movs	r1, #100	; 0x64
 8007484:	fb01 f303 	mul.w	r3, r1, r3
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	3332      	adds	r3, #50	; 0x32
 800748e:	4a07      	ldr	r2, [pc, #28]	; (80074ac <UART_SetConfig+0x384>)
 8007490:	fba2 2303 	umull	r2, r3, r2, r3
 8007494:	095b      	lsrs	r3, r3, #5
 8007496:	f003 0207 	and.w	r2, r3, #7
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4442      	add	r2, r8
 80074a0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80074a2:	e1b2      	b.n	800780a <UART_SetConfig+0x6e2>
 80074a4:	40011000 	.word	0x40011000
 80074a8:	40011400 	.word	0x40011400
 80074ac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4ad7      	ldr	r2, [pc, #860]	; (8007814 <UART_SetConfig+0x6ec>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d005      	beq.n	80074c6 <UART_SetConfig+0x39e>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4ad6      	ldr	r2, [pc, #856]	; (8007818 <UART_SetConfig+0x6f0>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	f040 80d1 	bne.w	8007668 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80074c6:	f7fe fe67 	bl	8006198 <HAL_RCC_GetPCLK2Freq>
 80074ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	469a      	mov	sl, r3
 80074d0:	f04f 0b00 	mov.w	fp, #0
 80074d4:	46d0      	mov	r8, sl
 80074d6:	46d9      	mov	r9, fp
 80074d8:	eb18 0308 	adds.w	r3, r8, r8
 80074dc:	eb49 0409 	adc.w	r4, r9, r9
 80074e0:	4698      	mov	r8, r3
 80074e2:	46a1      	mov	r9, r4
 80074e4:	eb18 080a 	adds.w	r8, r8, sl
 80074e8:	eb49 090b 	adc.w	r9, r9, fp
 80074ec:	f04f 0100 	mov.w	r1, #0
 80074f0:	f04f 0200 	mov.w	r2, #0
 80074f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80074f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80074fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007500:	4688      	mov	r8, r1
 8007502:	4691      	mov	r9, r2
 8007504:	eb1a 0508 	adds.w	r5, sl, r8
 8007508:	eb4b 0609 	adc.w	r6, fp, r9
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	4619      	mov	r1, r3
 8007512:	f04f 0200 	mov.w	r2, #0
 8007516:	f04f 0300 	mov.w	r3, #0
 800751a:	f04f 0400 	mov.w	r4, #0
 800751e:	0094      	lsls	r4, r2, #2
 8007520:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007524:	008b      	lsls	r3, r1, #2
 8007526:	461a      	mov	r2, r3
 8007528:	4623      	mov	r3, r4
 800752a:	4628      	mov	r0, r5
 800752c:	4631      	mov	r1, r6
 800752e:	f7f9 fbb3 	bl	8000c98 <__aeabi_uldivmod>
 8007532:	4603      	mov	r3, r0
 8007534:	460c      	mov	r4, r1
 8007536:	461a      	mov	r2, r3
 8007538:	4bb8      	ldr	r3, [pc, #736]	; (800781c <UART_SetConfig+0x6f4>)
 800753a:	fba3 2302 	umull	r2, r3, r3, r2
 800753e:	095b      	lsrs	r3, r3, #5
 8007540:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	469b      	mov	fp, r3
 8007548:	f04f 0c00 	mov.w	ip, #0
 800754c:	46d9      	mov	r9, fp
 800754e:	46e2      	mov	sl, ip
 8007550:	eb19 0309 	adds.w	r3, r9, r9
 8007554:	eb4a 040a 	adc.w	r4, sl, sl
 8007558:	4699      	mov	r9, r3
 800755a:	46a2      	mov	sl, r4
 800755c:	eb19 090b 	adds.w	r9, r9, fp
 8007560:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007564:	f04f 0100 	mov.w	r1, #0
 8007568:	f04f 0200 	mov.w	r2, #0
 800756c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007570:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007574:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007578:	4689      	mov	r9, r1
 800757a:	4692      	mov	sl, r2
 800757c:	eb1b 0509 	adds.w	r5, fp, r9
 8007580:	eb4c 060a 	adc.w	r6, ip, sl
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	4619      	mov	r1, r3
 800758a:	f04f 0200 	mov.w	r2, #0
 800758e:	f04f 0300 	mov.w	r3, #0
 8007592:	f04f 0400 	mov.w	r4, #0
 8007596:	0094      	lsls	r4, r2, #2
 8007598:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800759c:	008b      	lsls	r3, r1, #2
 800759e:	461a      	mov	r2, r3
 80075a0:	4623      	mov	r3, r4
 80075a2:	4628      	mov	r0, r5
 80075a4:	4631      	mov	r1, r6
 80075a6:	f7f9 fb77 	bl	8000c98 <__aeabi_uldivmod>
 80075aa:	4603      	mov	r3, r0
 80075ac:	460c      	mov	r4, r1
 80075ae:	461a      	mov	r2, r3
 80075b0:	4b9a      	ldr	r3, [pc, #616]	; (800781c <UART_SetConfig+0x6f4>)
 80075b2:	fba3 1302 	umull	r1, r3, r3, r2
 80075b6:	095b      	lsrs	r3, r3, #5
 80075b8:	2164      	movs	r1, #100	; 0x64
 80075ba:	fb01 f303 	mul.w	r3, r1, r3
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	011b      	lsls	r3, r3, #4
 80075c2:	3332      	adds	r3, #50	; 0x32
 80075c4:	4a95      	ldr	r2, [pc, #596]	; (800781c <UART_SetConfig+0x6f4>)
 80075c6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ca:	095b      	lsrs	r3, r3, #5
 80075cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075d0:	4498      	add	r8, r3
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	469b      	mov	fp, r3
 80075d6:	f04f 0c00 	mov.w	ip, #0
 80075da:	46d9      	mov	r9, fp
 80075dc:	46e2      	mov	sl, ip
 80075de:	eb19 0309 	adds.w	r3, r9, r9
 80075e2:	eb4a 040a 	adc.w	r4, sl, sl
 80075e6:	4699      	mov	r9, r3
 80075e8:	46a2      	mov	sl, r4
 80075ea:	eb19 090b 	adds.w	r9, r9, fp
 80075ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80075f2:	f04f 0100 	mov.w	r1, #0
 80075f6:	f04f 0200 	mov.w	r2, #0
 80075fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007602:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007606:	4689      	mov	r9, r1
 8007608:	4692      	mov	sl, r2
 800760a:	eb1b 0509 	adds.w	r5, fp, r9
 800760e:	eb4c 060a 	adc.w	r6, ip, sl
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	4619      	mov	r1, r3
 8007618:	f04f 0200 	mov.w	r2, #0
 800761c:	f04f 0300 	mov.w	r3, #0
 8007620:	f04f 0400 	mov.w	r4, #0
 8007624:	0094      	lsls	r4, r2, #2
 8007626:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800762a:	008b      	lsls	r3, r1, #2
 800762c:	461a      	mov	r2, r3
 800762e:	4623      	mov	r3, r4
 8007630:	4628      	mov	r0, r5
 8007632:	4631      	mov	r1, r6
 8007634:	f7f9 fb30 	bl	8000c98 <__aeabi_uldivmod>
 8007638:	4603      	mov	r3, r0
 800763a:	460c      	mov	r4, r1
 800763c:	461a      	mov	r2, r3
 800763e:	4b77      	ldr	r3, [pc, #476]	; (800781c <UART_SetConfig+0x6f4>)
 8007640:	fba3 1302 	umull	r1, r3, r3, r2
 8007644:	095b      	lsrs	r3, r3, #5
 8007646:	2164      	movs	r1, #100	; 0x64
 8007648:	fb01 f303 	mul.w	r3, r1, r3
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	011b      	lsls	r3, r3, #4
 8007650:	3332      	adds	r3, #50	; 0x32
 8007652:	4a72      	ldr	r2, [pc, #456]	; (800781c <UART_SetConfig+0x6f4>)
 8007654:	fba2 2303 	umull	r2, r3, r2, r3
 8007658:	095b      	lsrs	r3, r3, #5
 800765a:	f003 020f 	and.w	r2, r3, #15
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4442      	add	r2, r8
 8007664:	609a      	str	r2, [r3, #8]
 8007666:	e0d0      	b.n	800780a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007668:	f7fe fd82 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 800766c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	469a      	mov	sl, r3
 8007672:	f04f 0b00 	mov.w	fp, #0
 8007676:	46d0      	mov	r8, sl
 8007678:	46d9      	mov	r9, fp
 800767a:	eb18 0308 	adds.w	r3, r8, r8
 800767e:	eb49 0409 	adc.w	r4, r9, r9
 8007682:	4698      	mov	r8, r3
 8007684:	46a1      	mov	r9, r4
 8007686:	eb18 080a 	adds.w	r8, r8, sl
 800768a:	eb49 090b 	adc.w	r9, r9, fp
 800768e:	f04f 0100 	mov.w	r1, #0
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800769a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800769e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80076a2:	4688      	mov	r8, r1
 80076a4:	4691      	mov	r9, r2
 80076a6:	eb1a 0508 	adds.w	r5, sl, r8
 80076aa:	eb4b 0609 	adc.w	r6, fp, r9
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	4619      	mov	r1, r3
 80076b4:	f04f 0200 	mov.w	r2, #0
 80076b8:	f04f 0300 	mov.w	r3, #0
 80076bc:	f04f 0400 	mov.w	r4, #0
 80076c0:	0094      	lsls	r4, r2, #2
 80076c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80076c6:	008b      	lsls	r3, r1, #2
 80076c8:	461a      	mov	r2, r3
 80076ca:	4623      	mov	r3, r4
 80076cc:	4628      	mov	r0, r5
 80076ce:	4631      	mov	r1, r6
 80076d0:	f7f9 fae2 	bl	8000c98 <__aeabi_uldivmod>
 80076d4:	4603      	mov	r3, r0
 80076d6:	460c      	mov	r4, r1
 80076d8:	461a      	mov	r2, r3
 80076da:	4b50      	ldr	r3, [pc, #320]	; (800781c <UART_SetConfig+0x6f4>)
 80076dc:	fba3 2302 	umull	r2, r3, r3, r2
 80076e0:	095b      	lsrs	r3, r3, #5
 80076e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	469b      	mov	fp, r3
 80076ea:	f04f 0c00 	mov.w	ip, #0
 80076ee:	46d9      	mov	r9, fp
 80076f0:	46e2      	mov	sl, ip
 80076f2:	eb19 0309 	adds.w	r3, r9, r9
 80076f6:	eb4a 040a 	adc.w	r4, sl, sl
 80076fa:	4699      	mov	r9, r3
 80076fc:	46a2      	mov	sl, r4
 80076fe:	eb19 090b 	adds.w	r9, r9, fp
 8007702:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007706:	f04f 0100 	mov.w	r1, #0
 800770a:	f04f 0200 	mov.w	r2, #0
 800770e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007712:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007716:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800771a:	4689      	mov	r9, r1
 800771c:	4692      	mov	sl, r2
 800771e:	eb1b 0509 	adds.w	r5, fp, r9
 8007722:	eb4c 060a 	adc.w	r6, ip, sl
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	4619      	mov	r1, r3
 800772c:	f04f 0200 	mov.w	r2, #0
 8007730:	f04f 0300 	mov.w	r3, #0
 8007734:	f04f 0400 	mov.w	r4, #0
 8007738:	0094      	lsls	r4, r2, #2
 800773a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800773e:	008b      	lsls	r3, r1, #2
 8007740:	461a      	mov	r2, r3
 8007742:	4623      	mov	r3, r4
 8007744:	4628      	mov	r0, r5
 8007746:	4631      	mov	r1, r6
 8007748:	f7f9 faa6 	bl	8000c98 <__aeabi_uldivmod>
 800774c:	4603      	mov	r3, r0
 800774e:	460c      	mov	r4, r1
 8007750:	461a      	mov	r2, r3
 8007752:	4b32      	ldr	r3, [pc, #200]	; (800781c <UART_SetConfig+0x6f4>)
 8007754:	fba3 1302 	umull	r1, r3, r3, r2
 8007758:	095b      	lsrs	r3, r3, #5
 800775a:	2164      	movs	r1, #100	; 0x64
 800775c:	fb01 f303 	mul.w	r3, r1, r3
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	011b      	lsls	r3, r3, #4
 8007764:	3332      	adds	r3, #50	; 0x32
 8007766:	4a2d      	ldr	r2, [pc, #180]	; (800781c <UART_SetConfig+0x6f4>)
 8007768:	fba2 2303 	umull	r2, r3, r2, r3
 800776c:	095b      	lsrs	r3, r3, #5
 800776e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007772:	4498      	add	r8, r3
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	469b      	mov	fp, r3
 8007778:	f04f 0c00 	mov.w	ip, #0
 800777c:	46d9      	mov	r9, fp
 800777e:	46e2      	mov	sl, ip
 8007780:	eb19 0309 	adds.w	r3, r9, r9
 8007784:	eb4a 040a 	adc.w	r4, sl, sl
 8007788:	4699      	mov	r9, r3
 800778a:	46a2      	mov	sl, r4
 800778c:	eb19 090b 	adds.w	r9, r9, fp
 8007790:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007794:	f04f 0100 	mov.w	r1, #0
 8007798:	f04f 0200 	mov.w	r2, #0
 800779c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077a8:	4689      	mov	r9, r1
 80077aa:	4692      	mov	sl, r2
 80077ac:	eb1b 0509 	adds.w	r5, fp, r9
 80077b0:	eb4c 060a 	adc.w	r6, ip, sl
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	4619      	mov	r1, r3
 80077ba:	f04f 0200 	mov.w	r2, #0
 80077be:	f04f 0300 	mov.w	r3, #0
 80077c2:	f04f 0400 	mov.w	r4, #0
 80077c6:	0094      	lsls	r4, r2, #2
 80077c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80077cc:	008b      	lsls	r3, r1, #2
 80077ce:	461a      	mov	r2, r3
 80077d0:	4623      	mov	r3, r4
 80077d2:	4628      	mov	r0, r5
 80077d4:	4631      	mov	r1, r6
 80077d6:	f7f9 fa5f 	bl	8000c98 <__aeabi_uldivmod>
 80077da:	4603      	mov	r3, r0
 80077dc:	460c      	mov	r4, r1
 80077de:	461a      	mov	r2, r3
 80077e0:	4b0e      	ldr	r3, [pc, #56]	; (800781c <UART_SetConfig+0x6f4>)
 80077e2:	fba3 1302 	umull	r1, r3, r3, r2
 80077e6:	095b      	lsrs	r3, r3, #5
 80077e8:	2164      	movs	r1, #100	; 0x64
 80077ea:	fb01 f303 	mul.w	r3, r1, r3
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	011b      	lsls	r3, r3, #4
 80077f2:	3332      	adds	r3, #50	; 0x32
 80077f4:	4a09      	ldr	r2, [pc, #36]	; (800781c <UART_SetConfig+0x6f4>)
 80077f6:	fba2 2303 	umull	r2, r3, r2, r3
 80077fa:	095b      	lsrs	r3, r3, #5
 80077fc:	f003 020f 	and.w	r2, r3, #15
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4442      	add	r2, r8
 8007806:	609a      	str	r2, [r3, #8]
}
 8007808:	e7ff      	b.n	800780a <UART_SetConfig+0x6e2>
 800780a:	bf00      	nop
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007814:	40011000 	.word	0x40011000
 8007818:	40011400 	.word	0x40011400
 800781c:	51eb851f 	.word	0x51eb851f

08007820 <__errno>:
 8007820:	4b01      	ldr	r3, [pc, #4]	; (8007828 <__errno+0x8>)
 8007822:	6818      	ldr	r0, [r3, #0]
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	20000024 	.word	0x20000024

0800782c <__libc_init_array>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	4e0d      	ldr	r6, [pc, #52]	; (8007864 <__libc_init_array+0x38>)
 8007830:	4c0d      	ldr	r4, [pc, #52]	; (8007868 <__libc_init_array+0x3c>)
 8007832:	1ba4      	subs	r4, r4, r6
 8007834:	10a4      	asrs	r4, r4, #2
 8007836:	2500      	movs	r5, #0
 8007838:	42a5      	cmp	r5, r4
 800783a:	d109      	bne.n	8007850 <__libc_init_array+0x24>
 800783c:	4e0b      	ldr	r6, [pc, #44]	; (800786c <__libc_init_array+0x40>)
 800783e:	4c0c      	ldr	r4, [pc, #48]	; (8007870 <__libc_init_array+0x44>)
 8007840:	f003 fb44 	bl	800aecc <_init>
 8007844:	1ba4      	subs	r4, r4, r6
 8007846:	10a4      	asrs	r4, r4, #2
 8007848:	2500      	movs	r5, #0
 800784a:	42a5      	cmp	r5, r4
 800784c:	d105      	bne.n	800785a <__libc_init_array+0x2e>
 800784e:	bd70      	pop	{r4, r5, r6, pc}
 8007850:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007854:	4798      	blx	r3
 8007856:	3501      	adds	r5, #1
 8007858:	e7ee      	b.n	8007838 <__libc_init_array+0xc>
 800785a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800785e:	4798      	blx	r3
 8007860:	3501      	adds	r5, #1
 8007862:	e7f2      	b.n	800784a <__libc_init_array+0x1e>
 8007864:	0800b580 	.word	0x0800b580
 8007868:	0800b580 	.word	0x0800b580
 800786c:	0800b580 	.word	0x0800b580
 8007870:	0800b584 	.word	0x0800b584

08007874 <memset>:
 8007874:	4402      	add	r2, r0
 8007876:	4603      	mov	r3, r0
 8007878:	4293      	cmp	r3, r2
 800787a:	d100      	bne.n	800787e <memset+0xa>
 800787c:	4770      	bx	lr
 800787e:	f803 1b01 	strb.w	r1, [r3], #1
 8007882:	e7f9      	b.n	8007878 <memset+0x4>

08007884 <__cvt>:
 8007884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007888:	ec55 4b10 	vmov	r4, r5, d0
 800788c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800788e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007892:	2d00      	cmp	r5, #0
 8007894:	460e      	mov	r6, r1
 8007896:	4691      	mov	r9, r2
 8007898:	4619      	mov	r1, r3
 800789a:	bfb8      	it	lt
 800789c:	4622      	movlt	r2, r4
 800789e:	462b      	mov	r3, r5
 80078a0:	f027 0720 	bic.w	r7, r7, #32
 80078a4:	bfbb      	ittet	lt
 80078a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80078aa:	461d      	movlt	r5, r3
 80078ac:	2300      	movge	r3, #0
 80078ae:	232d      	movlt	r3, #45	; 0x2d
 80078b0:	bfb8      	it	lt
 80078b2:	4614      	movlt	r4, r2
 80078b4:	2f46      	cmp	r7, #70	; 0x46
 80078b6:	700b      	strb	r3, [r1, #0]
 80078b8:	d004      	beq.n	80078c4 <__cvt+0x40>
 80078ba:	2f45      	cmp	r7, #69	; 0x45
 80078bc:	d100      	bne.n	80078c0 <__cvt+0x3c>
 80078be:	3601      	adds	r6, #1
 80078c0:	2102      	movs	r1, #2
 80078c2:	e000      	b.n	80078c6 <__cvt+0x42>
 80078c4:	2103      	movs	r1, #3
 80078c6:	ab03      	add	r3, sp, #12
 80078c8:	9301      	str	r3, [sp, #4]
 80078ca:	ab02      	add	r3, sp, #8
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	4632      	mov	r2, r6
 80078d0:	4653      	mov	r3, sl
 80078d2:	ec45 4b10 	vmov	d0, r4, r5
 80078d6:	f001 fb67 	bl	8008fa8 <_dtoa_r>
 80078da:	2f47      	cmp	r7, #71	; 0x47
 80078dc:	4680      	mov	r8, r0
 80078de:	d102      	bne.n	80078e6 <__cvt+0x62>
 80078e0:	f019 0f01 	tst.w	r9, #1
 80078e4:	d026      	beq.n	8007934 <__cvt+0xb0>
 80078e6:	2f46      	cmp	r7, #70	; 0x46
 80078e8:	eb08 0906 	add.w	r9, r8, r6
 80078ec:	d111      	bne.n	8007912 <__cvt+0x8e>
 80078ee:	f898 3000 	ldrb.w	r3, [r8]
 80078f2:	2b30      	cmp	r3, #48	; 0x30
 80078f4:	d10a      	bne.n	800790c <__cvt+0x88>
 80078f6:	2200      	movs	r2, #0
 80078f8:	2300      	movs	r3, #0
 80078fa:	4620      	mov	r0, r4
 80078fc:	4629      	mov	r1, r5
 80078fe:	f7f9 f8eb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007902:	b918      	cbnz	r0, 800790c <__cvt+0x88>
 8007904:	f1c6 0601 	rsb	r6, r6, #1
 8007908:	f8ca 6000 	str.w	r6, [sl]
 800790c:	f8da 3000 	ldr.w	r3, [sl]
 8007910:	4499      	add	r9, r3
 8007912:	2200      	movs	r2, #0
 8007914:	2300      	movs	r3, #0
 8007916:	4620      	mov	r0, r4
 8007918:	4629      	mov	r1, r5
 800791a:	f7f9 f8dd 	bl	8000ad8 <__aeabi_dcmpeq>
 800791e:	b938      	cbnz	r0, 8007930 <__cvt+0xac>
 8007920:	2230      	movs	r2, #48	; 0x30
 8007922:	9b03      	ldr	r3, [sp, #12]
 8007924:	454b      	cmp	r3, r9
 8007926:	d205      	bcs.n	8007934 <__cvt+0xb0>
 8007928:	1c59      	adds	r1, r3, #1
 800792a:	9103      	str	r1, [sp, #12]
 800792c:	701a      	strb	r2, [r3, #0]
 800792e:	e7f8      	b.n	8007922 <__cvt+0x9e>
 8007930:	f8cd 900c 	str.w	r9, [sp, #12]
 8007934:	9b03      	ldr	r3, [sp, #12]
 8007936:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007938:	eba3 0308 	sub.w	r3, r3, r8
 800793c:	4640      	mov	r0, r8
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	b004      	add	sp, #16
 8007942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007946 <__exponent>:
 8007946:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007948:	2900      	cmp	r1, #0
 800794a:	4604      	mov	r4, r0
 800794c:	bfba      	itte	lt
 800794e:	4249      	neglt	r1, r1
 8007950:	232d      	movlt	r3, #45	; 0x2d
 8007952:	232b      	movge	r3, #43	; 0x2b
 8007954:	2909      	cmp	r1, #9
 8007956:	f804 2b02 	strb.w	r2, [r4], #2
 800795a:	7043      	strb	r3, [r0, #1]
 800795c:	dd20      	ble.n	80079a0 <__exponent+0x5a>
 800795e:	f10d 0307 	add.w	r3, sp, #7
 8007962:	461f      	mov	r7, r3
 8007964:	260a      	movs	r6, #10
 8007966:	fb91 f5f6 	sdiv	r5, r1, r6
 800796a:	fb06 1115 	mls	r1, r6, r5, r1
 800796e:	3130      	adds	r1, #48	; 0x30
 8007970:	2d09      	cmp	r5, #9
 8007972:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007976:	f103 32ff 	add.w	r2, r3, #4294967295
 800797a:	4629      	mov	r1, r5
 800797c:	dc09      	bgt.n	8007992 <__exponent+0x4c>
 800797e:	3130      	adds	r1, #48	; 0x30
 8007980:	3b02      	subs	r3, #2
 8007982:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007986:	42bb      	cmp	r3, r7
 8007988:	4622      	mov	r2, r4
 800798a:	d304      	bcc.n	8007996 <__exponent+0x50>
 800798c:	1a10      	subs	r0, r2, r0
 800798e:	b003      	add	sp, #12
 8007990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007992:	4613      	mov	r3, r2
 8007994:	e7e7      	b.n	8007966 <__exponent+0x20>
 8007996:	f813 2b01 	ldrb.w	r2, [r3], #1
 800799a:	f804 2b01 	strb.w	r2, [r4], #1
 800799e:	e7f2      	b.n	8007986 <__exponent+0x40>
 80079a0:	2330      	movs	r3, #48	; 0x30
 80079a2:	4419      	add	r1, r3
 80079a4:	7083      	strb	r3, [r0, #2]
 80079a6:	1d02      	adds	r2, r0, #4
 80079a8:	70c1      	strb	r1, [r0, #3]
 80079aa:	e7ef      	b.n	800798c <__exponent+0x46>

080079ac <_printf_float>:
 80079ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b0:	b08d      	sub	sp, #52	; 0x34
 80079b2:	460c      	mov	r4, r1
 80079b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80079b8:	4616      	mov	r6, r2
 80079ba:	461f      	mov	r7, r3
 80079bc:	4605      	mov	r5, r0
 80079be:	f002 fbd3 	bl	800a168 <_localeconv_r>
 80079c2:	6803      	ldr	r3, [r0, #0]
 80079c4:	9304      	str	r3, [sp, #16]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7f8 fc0a 	bl	80001e0 <strlen>
 80079cc:	2300      	movs	r3, #0
 80079ce:	930a      	str	r3, [sp, #40]	; 0x28
 80079d0:	f8d8 3000 	ldr.w	r3, [r8]
 80079d4:	9005      	str	r0, [sp, #20]
 80079d6:	3307      	adds	r3, #7
 80079d8:	f023 0307 	bic.w	r3, r3, #7
 80079dc:	f103 0208 	add.w	r2, r3, #8
 80079e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80079e4:	f8d4 b000 	ldr.w	fp, [r4]
 80079e8:	f8c8 2000 	str.w	r2, [r8]
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80079f4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80079f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079fc:	9307      	str	r3, [sp, #28]
 80079fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a02:	f04f 32ff 	mov.w	r2, #4294967295
 8007a06:	4ba7      	ldr	r3, [pc, #668]	; (8007ca4 <_printf_float+0x2f8>)
 8007a08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a0c:	f7f9 f896 	bl	8000b3c <__aeabi_dcmpun>
 8007a10:	bb70      	cbnz	r0, 8007a70 <_printf_float+0xc4>
 8007a12:	f04f 32ff 	mov.w	r2, #4294967295
 8007a16:	4ba3      	ldr	r3, [pc, #652]	; (8007ca4 <_printf_float+0x2f8>)
 8007a18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a1c:	f7f9 f870 	bl	8000b00 <__aeabi_dcmple>
 8007a20:	bb30      	cbnz	r0, 8007a70 <_printf_float+0xc4>
 8007a22:	2200      	movs	r2, #0
 8007a24:	2300      	movs	r3, #0
 8007a26:	4640      	mov	r0, r8
 8007a28:	4649      	mov	r1, r9
 8007a2a:	f7f9 f85f 	bl	8000aec <__aeabi_dcmplt>
 8007a2e:	b110      	cbz	r0, 8007a36 <_printf_float+0x8a>
 8007a30:	232d      	movs	r3, #45	; 0x2d
 8007a32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a36:	4a9c      	ldr	r2, [pc, #624]	; (8007ca8 <_printf_float+0x2fc>)
 8007a38:	4b9c      	ldr	r3, [pc, #624]	; (8007cac <_printf_float+0x300>)
 8007a3a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007a3e:	bf8c      	ite	hi
 8007a40:	4690      	movhi	r8, r2
 8007a42:	4698      	movls	r8, r3
 8007a44:	2303      	movs	r3, #3
 8007a46:	f02b 0204 	bic.w	r2, fp, #4
 8007a4a:	6123      	str	r3, [r4, #16]
 8007a4c:	6022      	str	r2, [r4, #0]
 8007a4e:	f04f 0900 	mov.w	r9, #0
 8007a52:	9700      	str	r7, [sp, #0]
 8007a54:	4633      	mov	r3, r6
 8007a56:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a58:	4621      	mov	r1, r4
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	f000 f9e6 	bl	8007e2c <_printf_common>
 8007a60:	3001      	adds	r0, #1
 8007a62:	f040 808d 	bne.w	8007b80 <_printf_float+0x1d4>
 8007a66:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6a:	b00d      	add	sp, #52	; 0x34
 8007a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a70:	4642      	mov	r2, r8
 8007a72:	464b      	mov	r3, r9
 8007a74:	4640      	mov	r0, r8
 8007a76:	4649      	mov	r1, r9
 8007a78:	f7f9 f860 	bl	8000b3c <__aeabi_dcmpun>
 8007a7c:	b110      	cbz	r0, 8007a84 <_printf_float+0xd8>
 8007a7e:	4a8c      	ldr	r2, [pc, #560]	; (8007cb0 <_printf_float+0x304>)
 8007a80:	4b8c      	ldr	r3, [pc, #560]	; (8007cb4 <_printf_float+0x308>)
 8007a82:	e7da      	b.n	8007a3a <_printf_float+0x8e>
 8007a84:	6861      	ldr	r1, [r4, #4]
 8007a86:	1c4b      	adds	r3, r1, #1
 8007a88:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007a8c:	a80a      	add	r0, sp, #40	; 0x28
 8007a8e:	d13e      	bne.n	8007b0e <_printf_float+0x162>
 8007a90:	2306      	movs	r3, #6
 8007a92:	6063      	str	r3, [r4, #4]
 8007a94:	2300      	movs	r3, #0
 8007a96:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007a9a:	ab09      	add	r3, sp, #36	; 0x24
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	ec49 8b10 	vmov	d0, r8, r9
 8007aa2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007aa6:	6022      	str	r2, [r4, #0]
 8007aa8:	f8cd a004 	str.w	sl, [sp, #4]
 8007aac:	6861      	ldr	r1, [r4, #4]
 8007aae:	4628      	mov	r0, r5
 8007ab0:	f7ff fee8 	bl	8007884 <__cvt>
 8007ab4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007ab8:	2b47      	cmp	r3, #71	; 0x47
 8007aba:	4680      	mov	r8, r0
 8007abc:	d109      	bne.n	8007ad2 <_printf_float+0x126>
 8007abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac0:	1cd8      	adds	r0, r3, #3
 8007ac2:	db02      	blt.n	8007aca <_printf_float+0x11e>
 8007ac4:	6862      	ldr	r2, [r4, #4]
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	dd47      	ble.n	8007b5a <_printf_float+0x1ae>
 8007aca:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ace:	fa5f fa8a 	uxtb.w	sl, sl
 8007ad2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007ad6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ad8:	d824      	bhi.n	8007b24 <_printf_float+0x178>
 8007ada:	3901      	subs	r1, #1
 8007adc:	4652      	mov	r2, sl
 8007ade:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ae2:	9109      	str	r1, [sp, #36]	; 0x24
 8007ae4:	f7ff ff2f 	bl	8007946 <__exponent>
 8007ae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aea:	1813      	adds	r3, r2, r0
 8007aec:	2a01      	cmp	r2, #1
 8007aee:	4681      	mov	r9, r0
 8007af0:	6123      	str	r3, [r4, #16]
 8007af2:	dc02      	bgt.n	8007afa <_printf_float+0x14e>
 8007af4:	6822      	ldr	r2, [r4, #0]
 8007af6:	07d1      	lsls	r1, r2, #31
 8007af8:	d501      	bpl.n	8007afe <_printf_float+0x152>
 8007afa:	3301      	adds	r3, #1
 8007afc:	6123      	str	r3, [r4, #16]
 8007afe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0a5      	beq.n	8007a52 <_printf_float+0xa6>
 8007b06:	232d      	movs	r3, #45	; 0x2d
 8007b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b0c:	e7a1      	b.n	8007a52 <_printf_float+0xa6>
 8007b0e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007b12:	f000 8177 	beq.w	8007e04 <_printf_float+0x458>
 8007b16:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007b1a:	d1bb      	bne.n	8007a94 <_printf_float+0xe8>
 8007b1c:	2900      	cmp	r1, #0
 8007b1e:	d1b9      	bne.n	8007a94 <_printf_float+0xe8>
 8007b20:	2301      	movs	r3, #1
 8007b22:	e7b6      	b.n	8007a92 <_printf_float+0xe6>
 8007b24:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007b28:	d119      	bne.n	8007b5e <_printf_float+0x1b2>
 8007b2a:	2900      	cmp	r1, #0
 8007b2c:	6863      	ldr	r3, [r4, #4]
 8007b2e:	dd0c      	ble.n	8007b4a <_printf_float+0x19e>
 8007b30:	6121      	str	r1, [r4, #16]
 8007b32:	b913      	cbnz	r3, 8007b3a <_printf_float+0x18e>
 8007b34:	6822      	ldr	r2, [r4, #0]
 8007b36:	07d2      	lsls	r2, r2, #31
 8007b38:	d502      	bpl.n	8007b40 <_printf_float+0x194>
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	440b      	add	r3, r1
 8007b3e:	6123      	str	r3, [r4, #16]
 8007b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b42:	65a3      	str	r3, [r4, #88]	; 0x58
 8007b44:	f04f 0900 	mov.w	r9, #0
 8007b48:	e7d9      	b.n	8007afe <_printf_float+0x152>
 8007b4a:	b913      	cbnz	r3, 8007b52 <_printf_float+0x1a6>
 8007b4c:	6822      	ldr	r2, [r4, #0]
 8007b4e:	07d0      	lsls	r0, r2, #31
 8007b50:	d501      	bpl.n	8007b56 <_printf_float+0x1aa>
 8007b52:	3302      	adds	r3, #2
 8007b54:	e7f3      	b.n	8007b3e <_printf_float+0x192>
 8007b56:	2301      	movs	r3, #1
 8007b58:	e7f1      	b.n	8007b3e <_printf_float+0x192>
 8007b5a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007b5e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007b62:	4293      	cmp	r3, r2
 8007b64:	db05      	blt.n	8007b72 <_printf_float+0x1c6>
 8007b66:	6822      	ldr	r2, [r4, #0]
 8007b68:	6123      	str	r3, [r4, #16]
 8007b6a:	07d1      	lsls	r1, r2, #31
 8007b6c:	d5e8      	bpl.n	8007b40 <_printf_float+0x194>
 8007b6e:	3301      	adds	r3, #1
 8007b70:	e7e5      	b.n	8007b3e <_printf_float+0x192>
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	bfd4      	ite	le
 8007b76:	f1c3 0302 	rsble	r3, r3, #2
 8007b7a:	2301      	movgt	r3, #1
 8007b7c:	4413      	add	r3, r2
 8007b7e:	e7de      	b.n	8007b3e <_printf_float+0x192>
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	055a      	lsls	r2, r3, #21
 8007b84:	d407      	bmi.n	8007b96 <_printf_float+0x1ea>
 8007b86:	6923      	ldr	r3, [r4, #16]
 8007b88:	4642      	mov	r2, r8
 8007b8a:	4631      	mov	r1, r6
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	47b8      	blx	r7
 8007b90:	3001      	adds	r0, #1
 8007b92:	d12b      	bne.n	8007bec <_printf_float+0x240>
 8007b94:	e767      	b.n	8007a66 <_printf_float+0xba>
 8007b96:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007b9a:	f240 80dc 	bls.w	8007d56 <_printf_float+0x3aa>
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ba6:	f7f8 ff97 	bl	8000ad8 <__aeabi_dcmpeq>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d033      	beq.n	8007c16 <_printf_float+0x26a>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	4a41      	ldr	r2, [pc, #260]	; (8007cb8 <_printf_float+0x30c>)
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	47b8      	blx	r7
 8007bb8:	3001      	adds	r0, #1
 8007bba:	f43f af54 	beq.w	8007a66 <_printf_float+0xba>
 8007bbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	db02      	blt.n	8007bcc <_printf_float+0x220>
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	07d8      	lsls	r0, r3, #31
 8007bca:	d50f      	bpl.n	8007bec <_printf_float+0x240>
 8007bcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	47b8      	blx	r7
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	f43f af45 	beq.w	8007a66 <_printf_float+0xba>
 8007bdc:	f04f 0800 	mov.w	r8, #0
 8007be0:	f104 091a 	add.w	r9, r4, #26
 8007be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be6:	3b01      	subs	r3, #1
 8007be8:	4543      	cmp	r3, r8
 8007bea:	dc09      	bgt.n	8007c00 <_printf_float+0x254>
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	079b      	lsls	r3, r3, #30
 8007bf0:	f100 8103 	bmi.w	8007dfa <_printf_float+0x44e>
 8007bf4:	68e0      	ldr	r0, [r4, #12]
 8007bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bf8:	4298      	cmp	r0, r3
 8007bfa:	bfb8      	it	lt
 8007bfc:	4618      	movlt	r0, r3
 8007bfe:	e734      	b.n	8007a6a <_printf_float+0xbe>
 8007c00:	2301      	movs	r3, #1
 8007c02:	464a      	mov	r2, r9
 8007c04:	4631      	mov	r1, r6
 8007c06:	4628      	mov	r0, r5
 8007c08:	47b8      	blx	r7
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	f43f af2b 	beq.w	8007a66 <_printf_float+0xba>
 8007c10:	f108 0801 	add.w	r8, r8, #1
 8007c14:	e7e6      	b.n	8007be4 <_printf_float+0x238>
 8007c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	dc2b      	bgt.n	8007c74 <_printf_float+0x2c8>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	4a26      	ldr	r2, [pc, #152]	; (8007cb8 <_printf_float+0x30c>)
 8007c20:	4631      	mov	r1, r6
 8007c22:	4628      	mov	r0, r5
 8007c24:	47b8      	blx	r7
 8007c26:	3001      	adds	r0, #1
 8007c28:	f43f af1d 	beq.w	8007a66 <_printf_float+0xba>
 8007c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c2e:	b923      	cbnz	r3, 8007c3a <_printf_float+0x28e>
 8007c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c32:	b913      	cbnz	r3, 8007c3a <_printf_float+0x28e>
 8007c34:	6823      	ldr	r3, [r4, #0]
 8007c36:	07d9      	lsls	r1, r3, #31
 8007c38:	d5d8      	bpl.n	8007bec <_printf_float+0x240>
 8007c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c3e:	4631      	mov	r1, r6
 8007c40:	4628      	mov	r0, r5
 8007c42:	47b8      	blx	r7
 8007c44:	3001      	adds	r0, #1
 8007c46:	f43f af0e 	beq.w	8007a66 <_printf_float+0xba>
 8007c4a:	f04f 0900 	mov.w	r9, #0
 8007c4e:	f104 0a1a 	add.w	sl, r4, #26
 8007c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c54:	425b      	negs	r3, r3
 8007c56:	454b      	cmp	r3, r9
 8007c58:	dc01      	bgt.n	8007c5e <_printf_float+0x2b2>
 8007c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c5c:	e794      	b.n	8007b88 <_printf_float+0x1dc>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	4652      	mov	r2, sl
 8007c62:	4631      	mov	r1, r6
 8007c64:	4628      	mov	r0, r5
 8007c66:	47b8      	blx	r7
 8007c68:	3001      	adds	r0, #1
 8007c6a:	f43f aefc 	beq.w	8007a66 <_printf_float+0xba>
 8007c6e:	f109 0901 	add.w	r9, r9, #1
 8007c72:	e7ee      	b.n	8007c52 <_printf_float+0x2a6>
 8007c74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	bfa8      	it	ge
 8007c7c:	461a      	movge	r2, r3
 8007c7e:	2a00      	cmp	r2, #0
 8007c80:	4691      	mov	r9, r2
 8007c82:	dd07      	ble.n	8007c94 <_printf_float+0x2e8>
 8007c84:	4613      	mov	r3, r2
 8007c86:	4631      	mov	r1, r6
 8007c88:	4642      	mov	r2, r8
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	47b8      	blx	r7
 8007c8e:	3001      	adds	r0, #1
 8007c90:	f43f aee9 	beq.w	8007a66 <_printf_float+0xba>
 8007c94:	f104 031a 	add.w	r3, r4, #26
 8007c98:	f04f 0b00 	mov.w	fp, #0
 8007c9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ca0:	9306      	str	r3, [sp, #24]
 8007ca2:	e015      	b.n	8007cd0 <_printf_float+0x324>
 8007ca4:	7fefffff 	.word	0x7fefffff
 8007ca8:	0800b268 	.word	0x0800b268
 8007cac:	0800b264 	.word	0x0800b264
 8007cb0:	0800b270 	.word	0x0800b270
 8007cb4:	0800b26c 	.word	0x0800b26c
 8007cb8:	0800b274 	.word	0x0800b274
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	9a06      	ldr	r2, [sp, #24]
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	47b8      	blx	r7
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	f43f aecd 	beq.w	8007a66 <_printf_float+0xba>
 8007ccc:	f10b 0b01 	add.w	fp, fp, #1
 8007cd0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007cd4:	ebaa 0309 	sub.w	r3, sl, r9
 8007cd8:	455b      	cmp	r3, fp
 8007cda:	dcef      	bgt.n	8007cbc <_printf_float+0x310>
 8007cdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	44d0      	add	r8, sl
 8007ce4:	db15      	blt.n	8007d12 <_printf_float+0x366>
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	07da      	lsls	r2, r3, #31
 8007cea:	d412      	bmi.n	8007d12 <_printf_float+0x366>
 8007cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cf0:	eba3 020a 	sub.w	r2, r3, sl
 8007cf4:	eba3 0a01 	sub.w	sl, r3, r1
 8007cf8:	4592      	cmp	sl, r2
 8007cfa:	bfa8      	it	ge
 8007cfc:	4692      	movge	sl, r2
 8007cfe:	f1ba 0f00 	cmp.w	sl, #0
 8007d02:	dc0e      	bgt.n	8007d22 <_printf_float+0x376>
 8007d04:	f04f 0800 	mov.w	r8, #0
 8007d08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d0c:	f104 091a 	add.w	r9, r4, #26
 8007d10:	e019      	b.n	8007d46 <_printf_float+0x39a>
 8007d12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d16:	4631      	mov	r1, r6
 8007d18:	4628      	mov	r0, r5
 8007d1a:	47b8      	blx	r7
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d1e5      	bne.n	8007cec <_printf_float+0x340>
 8007d20:	e6a1      	b.n	8007a66 <_printf_float+0xba>
 8007d22:	4653      	mov	r3, sl
 8007d24:	4642      	mov	r2, r8
 8007d26:	4631      	mov	r1, r6
 8007d28:	4628      	mov	r0, r5
 8007d2a:	47b8      	blx	r7
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	d1e9      	bne.n	8007d04 <_printf_float+0x358>
 8007d30:	e699      	b.n	8007a66 <_printf_float+0xba>
 8007d32:	2301      	movs	r3, #1
 8007d34:	464a      	mov	r2, r9
 8007d36:	4631      	mov	r1, r6
 8007d38:	4628      	mov	r0, r5
 8007d3a:	47b8      	blx	r7
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	f43f ae92 	beq.w	8007a66 <_printf_float+0xba>
 8007d42:	f108 0801 	add.w	r8, r8, #1
 8007d46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d4a:	1a9b      	subs	r3, r3, r2
 8007d4c:	eba3 030a 	sub.w	r3, r3, sl
 8007d50:	4543      	cmp	r3, r8
 8007d52:	dcee      	bgt.n	8007d32 <_printf_float+0x386>
 8007d54:	e74a      	b.n	8007bec <_printf_float+0x240>
 8007d56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d58:	2a01      	cmp	r2, #1
 8007d5a:	dc01      	bgt.n	8007d60 <_printf_float+0x3b4>
 8007d5c:	07db      	lsls	r3, r3, #31
 8007d5e:	d53a      	bpl.n	8007dd6 <_printf_float+0x42a>
 8007d60:	2301      	movs	r3, #1
 8007d62:	4642      	mov	r2, r8
 8007d64:	4631      	mov	r1, r6
 8007d66:	4628      	mov	r0, r5
 8007d68:	47b8      	blx	r7
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	f43f ae7b 	beq.w	8007a66 <_printf_float+0xba>
 8007d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d74:	4631      	mov	r1, r6
 8007d76:	4628      	mov	r0, r5
 8007d78:	47b8      	blx	r7
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	f108 0801 	add.w	r8, r8, #1
 8007d80:	f43f ae71 	beq.w	8007a66 <_printf_float+0xba>
 8007d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d86:	2200      	movs	r2, #0
 8007d88:	f103 3aff 	add.w	sl, r3, #4294967295
 8007d8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d90:	2300      	movs	r3, #0
 8007d92:	f7f8 fea1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d96:	b9c8      	cbnz	r0, 8007dcc <_printf_float+0x420>
 8007d98:	4653      	mov	r3, sl
 8007d9a:	4642      	mov	r2, r8
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	4628      	mov	r0, r5
 8007da0:	47b8      	blx	r7
 8007da2:	3001      	adds	r0, #1
 8007da4:	d10e      	bne.n	8007dc4 <_printf_float+0x418>
 8007da6:	e65e      	b.n	8007a66 <_printf_float+0xba>
 8007da8:	2301      	movs	r3, #1
 8007daa:	4652      	mov	r2, sl
 8007dac:	4631      	mov	r1, r6
 8007dae:	4628      	mov	r0, r5
 8007db0:	47b8      	blx	r7
 8007db2:	3001      	adds	r0, #1
 8007db4:	f43f ae57 	beq.w	8007a66 <_printf_float+0xba>
 8007db8:	f108 0801 	add.w	r8, r8, #1
 8007dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	4543      	cmp	r3, r8
 8007dc2:	dcf1      	bgt.n	8007da8 <_printf_float+0x3fc>
 8007dc4:	464b      	mov	r3, r9
 8007dc6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007dca:	e6de      	b.n	8007b8a <_printf_float+0x1de>
 8007dcc:	f04f 0800 	mov.w	r8, #0
 8007dd0:	f104 0a1a 	add.w	sl, r4, #26
 8007dd4:	e7f2      	b.n	8007dbc <_printf_float+0x410>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e7df      	b.n	8007d9a <_printf_float+0x3ee>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	464a      	mov	r2, r9
 8007dde:	4631      	mov	r1, r6
 8007de0:	4628      	mov	r0, r5
 8007de2:	47b8      	blx	r7
 8007de4:	3001      	adds	r0, #1
 8007de6:	f43f ae3e 	beq.w	8007a66 <_printf_float+0xba>
 8007dea:	f108 0801 	add.w	r8, r8, #1
 8007dee:	68e3      	ldr	r3, [r4, #12]
 8007df0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007df2:	1a9b      	subs	r3, r3, r2
 8007df4:	4543      	cmp	r3, r8
 8007df6:	dcf0      	bgt.n	8007dda <_printf_float+0x42e>
 8007df8:	e6fc      	b.n	8007bf4 <_printf_float+0x248>
 8007dfa:	f04f 0800 	mov.w	r8, #0
 8007dfe:	f104 0919 	add.w	r9, r4, #25
 8007e02:	e7f4      	b.n	8007dee <_printf_float+0x442>
 8007e04:	2900      	cmp	r1, #0
 8007e06:	f43f ae8b 	beq.w	8007b20 <_printf_float+0x174>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007e10:	ab09      	add	r3, sp, #36	; 0x24
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	ec49 8b10 	vmov	d0, r8, r9
 8007e18:	6022      	str	r2, [r4, #0]
 8007e1a:	f8cd a004 	str.w	sl, [sp, #4]
 8007e1e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e22:	4628      	mov	r0, r5
 8007e24:	f7ff fd2e 	bl	8007884 <__cvt>
 8007e28:	4680      	mov	r8, r0
 8007e2a:	e648      	b.n	8007abe <_printf_float+0x112>

08007e2c <_printf_common>:
 8007e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e30:	4691      	mov	r9, r2
 8007e32:	461f      	mov	r7, r3
 8007e34:	688a      	ldr	r2, [r1, #8]
 8007e36:	690b      	ldr	r3, [r1, #16]
 8007e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	bfb8      	it	lt
 8007e40:	4613      	movlt	r3, r2
 8007e42:	f8c9 3000 	str.w	r3, [r9]
 8007e46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	b112      	cbz	r2, 8007e56 <_printf_common+0x2a>
 8007e50:	3301      	adds	r3, #1
 8007e52:	f8c9 3000 	str.w	r3, [r9]
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	0699      	lsls	r1, r3, #26
 8007e5a:	bf42      	ittt	mi
 8007e5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e60:	3302      	addmi	r3, #2
 8007e62:	f8c9 3000 	strmi.w	r3, [r9]
 8007e66:	6825      	ldr	r5, [r4, #0]
 8007e68:	f015 0506 	ands.w	r5, r5, #6
 8007e6c:	d107      	bne.n	8007e7e <_printf_common+0x52>
 8007e6e:	f104 0a19 	add.w	sl, r4, #25
 8007e72:	68e3      	ldr	r3, [r4, #12]
 8007e74:	f8d9 2000 	ldr.w	r2, [r9]
 8007e78:	1a9b      	subs	r3, r3, r2
 8007e7a:	42ab      	cmp	r3, r5
 8007e7c:	dc28      	bgt.n	8007ed0 <_printf_common+0xa4>
 8007e7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007e82:	6822      	ldr	r2, [r4, #0]
 8007e84:	3300      	adds	r3, #0
 8007e86:	bf18      	it	ne
 8007e88:	2301      	movne	r3, #1
 8007e8a:	0692      	lsls	r2, r2, #26
 8007e8c:	d42d      	bmi.n	8007eea <_printf_common+0xbe>
 8007e8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e92:	4639      	mov	r1, r7
 8007e94:	4630      	mov	r0, r6
 8007e96:	47c0      	blx	r8
 8007e98:	3001      	adds	r0, #1
 8007e9a:	d020      	beq.n	8007ede <_printf_common+0xb2>
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	68e5      	ldr	r5, [r4, #12]
 8007ea0:	f8d9 2000 	ldr.w	r2, [r9]
 8007ea4:	f003 0306 	and.w	r3, r3, #6
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	bf08      	it	eq
 8007eac:	1aad      	subeq	r5, r5, r2
 8007eae:	68a3      	ldr	r3, [r4, #8]
 8007eb0:	6922      	ldr	r2, [r4, #16]
 8007eb2:	bf0c      	ite	eq
 8007eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007eb8:	2500      	movne	r5, #0
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	bfc4      	itt	gt
 8007ebe:	1a9b      	subgt	r3, r3, r2
 8007ec0:	18ed      	addgt	r5, r5, r3
 8007ec2:	f04f 0900 	mov.w	r9, #0
 8007ec6:	341a      	adds	r4, #26
 8007ec8:	454d      	cmp	r5, r9
 8007eca:	d11a      	bne.n	8007f02 <_printf_common+0xd6>
 8007ecc:	2000      	movs	r0, #0
 8007ece:	e008      	b.n	8007ee2 <_printf_common+0xb6>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	4652      	mov	r2, sl
 8007ed4:	4639      	mov	r1, r7
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	47c0      	blx	r8
 8007eda:	3001      	adds	r0, #1
 8007edc:	d103      	bne.n	8007ee6 <_printf_common+0xba>
 8007ede:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee6:	3501      	adds	r5, #1
 8007ee8:	e7c3      	b.n	8007e72 <_printf_common+0x46>
 8007eea:	18e1      	adds	r1, r4, r3
 8007eec:	1c5a      	adds	r2, r3, #1
 8007eee:	2030      	movs	r0, #48	; 0x30
 8007ef0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ef4:	4422      	add	r2, r4
 8007ef6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007efa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007efe:	3302      	adds	r3, #2
 8007f00:	e7c5      	b.n	8007e8e <_printf_common+0x62>
 8007f02:	2301      	movs	r3, #1
 8007f04:	4622      	mov	r2, r4
 8007f06:	4639      	mov	r1, r7
 8007f08:	4630      	mov	r0, r6
 8007f0a:	47c0      	blx	r8
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d0e6      	beq.n	8007ede <_printf_common+0xb2>
 8007f10:	f109 0901 	add.w	r9, r9, #1
 8007f14:	e7d8      	b.n	8007ec8 <_printf_common+0x9c>
	...

08007f18 <_printf_i>:
 8007f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007f20:	460c      	mov	r4, r1
 8007f22:	7e09      	ldrb	r1, [r1, #24]
 8007f24:	b085      	sub	sp, #20
 8007f26:	296e      	cmp	r1, #110	; 0x6e
 8007f28:	4617      	mov	r7, r2
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	4698      	mov	r8, r3
 8007f2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f30:	f000 80b3 	beq.w	800809a <_printf_i+0x182>
 8007f34:	d822      	bhi.n	8007f7c <_printf_i+0x64>
 8007f36:	2963      	cmp	r1, #99	; 0x63
 8007f38:	d036      	beq.n	8007fa8 <_printf_i+0x90>
 8007f3a:	d80a      	bhi.n	8007f52 <_printf_i+0x3a>
 8007f3c:	2900      	cmp	r1, #0
 8007f3e:	f000 80b9 	beq.w	80080b4 <_printf_i+0x19c>
 8007f42:	2958      	cmp	r1, #88	; 0x58
 8007f44:	f000 8083 	beq.w	800804e <_printf_i+0x136>
 8007f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007f50:	e032      	b.n	8007fb8 <_printf_i+0xa0>
 8007f52:	2964      	cmp	r1, #100	; 0x64
 8007f54:	d001      	beq.n	8007f5a <_printf_i+0x42>
 8007f56:	2969      	cmp	r1, #105	; 0x69
 8007f58:	d1f6      	bne.n	8007f48 <_printf_i+0x30>
 8007f5a:	6820      	ldr	r0, [r4, #0]
 8007f5c:	6813      	ldr	r3, [r2, #0]
 8007f5e:	0605      	lsls	r5, r0, #24
 8007f60:	f103 0104 	add.w	r1, r3, #4
 8007f64:	d52a      	bpl.n	8007fbc <_printf_i+0xa4>
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6011      	str	r1, [r2, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	da03      	bge.n	8007f76 <_printf_i+0x5e>
 8007f6e:	222d      	movs	r2, #45	; 0x2d
 8007f70:	425b      	negs	r3, r3
 8007f72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007f76:	486f      	ldr	r0, [pc, #444]	; (8008134 <_printf_i+0x21c>)
 8007f78:	220a      	movs	r2, #10
 8007f7a:	e039      	b.n	8007ff0 <_printf_i+0xd8>
 8007f7c:	2973      	cmp	r1, #115	; 0x73
 8007f7e:	f000 809d 	beq.w	80080bc <_printf_i+0x1a4>
 8007f82:	d808      	bhi.n	8007f96 <_printf_i+0x7e>
 8007f84:	296f      	cmp	r1, #111	; 0x6f
 8007f86:	d020      	beq.n	8007fca <_printf_i+0xb2>
 8007f88:	2970      	cmp	r1, #112	; 0x70
 8007f8a:	d1dd      	bne.n	8007f48 <_printf_i+0x30>
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	f043 0320 	orr.w	r3, r3, #32
 8007f92:	6023      	str	r3, [r4, #0]
 8007f94:	e003      	b.n	8007f9e <_printf_i+0x86>
 8007f96:	2975      	cmp	r1, #117	; 0x75
 8007f98:	d017      	beq.n	8007fca <_printf_i+0xb2>
 8007f9a:	2978      	cmp	r1, #120	; 0x78
 8007f9c:	d1d4      	bne.n	8007f48 <_printf_i+0x30>
 8007f9e:	2378      	movs	r3, #120	; 0x78
 8007fa0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fa4:	4864      	ldr	r0, [pc, #400]	; (8008138 <_printf_i+0x220>)
 8007fa6:	e055      	b.n	8008054 <_printf_i+0x13c>
 8007fa8:	6813      	ldr	r3, [r2, #0]
 8007faa:	1d19      	adds	r1, r3, #4
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	6011      	str	r1, [r2, #0]
 8007fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e08c      	b.n	80080d6 <_printf_i+0x1be>
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	6011      	str	r1, [r2, #0]
 8007fc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007fc4:	bf18      	it	ne
 8007fc6:	b21b      	sxthne	r3, r3
 8007fc8:	e7cf      	b.n	8007f6a <_printf_i+0x52>
 8007fca:	6813      	ldr	r3, [r2, #0]
 8007fcc:	6825      	ldr	r5, [r4, #0]
 8007fce:	1d18      	adds	r0, r3, #4
 8007fd0:	6010      	str	r0, [r2, #0]
 8007fd2:	0628      	lsls	r0, r5, #24
 8007fd4:	d501      	bpl.n	8007fda <_printf_i+0xc2>
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	e002      	b.n	8007fe0 <_printf_i+0xc8>
 8007fda:	0668      	lsls	r0, r5, #25
 8007fdc:	d5fb      	bpl.n	8007fd6 <_printf_i+0xbe>
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	4854      	ldr	r0, [pc, #336]	; (8008134 <_printf_i+0x21c>)
 8007fe2:	296f      	cmp	r1, #111	; 0x6f
 8007fe4:	bf14      	ite	ne
 8007fe6:	220a      	movne	r2, #10
 8007fe8:	2208      	moveq	r2, #8
 8007fea:	2100      	movs	r1, #0
 8007fec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ff0:	6865      	ldr	r5, [r4, #4]
 8007ff2:	60a5      	str	r5, [r4, #8]
 8007ff4:	2d00      	cmp	r5, #0
 8007ff6:	f2c0 8095 	blt.w	8008124 <_printf_i+0x20c>
 8007ffa:	6821      	ldr	r1, [r4, #0]
 8007ffc:	f021 0104 	bic.w	r1, r1, #4
 8008000:	6021      	str	r1, [r4, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d13d      	bne.n	8008082 <_printf_i+0x16a>
 8008006:	2d00      	cmp	r5, #0
 8008008:	f040 808e 	bne.w	8008128 <_printf_i+0x210>
 800800c:	4665      	mov	r5, ip
 800800e:	2a08      	cmp	r2, #8
 8008010:	d10b      	bne.n	800802a <_printf_i+0x112>
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	07db      	lsls	r3, r3, #31
 8008016:	d508      	bpl.n	800802a <_printf_i+0x112>
 8008018:	6923      	ldr	r3, [r4, #16]
 800801a:	6862      	ldr	r2, [r4, #4]
 800801c:	429a      	cmp	r2, r3
 800801e:	bfde      	ittt	le
 8008020:	2330      	movle	r3, #48	; 0x30
 8008022:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008026:	f105 35ff 	addle.w	r5, r5, #4294967295
 800802a:	ebac 0305 	sub.w	r3, ip, r5
 800802e:	6123      	str	r3, [r4, #16]
 8008030:	f8cd 8000 	str.w	r8, [sp]
 8008034:	463b      	mov	r3, r7
 8008036:	aa03      	add	r2, sp, #12
 8008038:	4621      	mov	r1, r4
 800803a:	4630      	mov	r0, r6
 800803c:	f7ff fef6 	bl	8007e2c <_printf_common>
 8008040:	3001      	adds	r0, #1
 8008042:	d14d      	bne.n	80080e0 <_printf_i+0x1c8>
 8008044:	f04f 30ff 	mov.w	r0, #4294967295
 8008048:	b005      	add	sp, #20
 800804a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800804e:	4839      	ldr	r0, [pc, #228]	; (8008134 <_printf_i+0x21c>)
 8008050:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008054:	6813      	ldr	r3, [r2, #0]
 8008056:	6821      	ldr	r1, [r4, #0]
 8008058:	1d1d      	adds	r5, r3, #4
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6015      	str	r5, [r2, #0]
 800805e:	060a      	lsls	r2, r1, #24
 8008060:	d50b      	bpl.n	800807a <_printf_i+0x162>
 8008062:	07ca      	lsls	r2, r1, #31
 8008064:	bf44      	itt	mi
 8008066:	f041 0120 	orrmi.w	r1, r1, #32
 800806a:	6021      	strmi	r1, [r4, #0]
 800806c:	b91b      	cbnz	r3, 8008076 <_printf_i+0x15e>
 800806e:	6822      	ldr	r2, [r4, #0]
 8008070:	f022 0220 	bic.w	r2, r2, #32
 8008074:	6022      	str	r2, [r4, #0]
 8008076:	2210      	movs	r2, #16
 8008078:	e7b7      	b.n	8007fea <_printf_i+0xd2>
 800807a:	064d      	lsls	r5, r1, #25
 800807c:	bf48      	it	mi
 800807e:	b29b      	uxthmi	r3, r3
 8008080:	e7ef      	b.n	8008062 <_printf_i+0x14a>
 8008082:	4665      	mov	r5, ip
 8008084:	fbb3 f1f2 	udiv	r1, r3, r2
 8008088:	fb02 3311 	mls	r3, r2, r1, r3
 800808c:	5cc3      	ldrb	r3, [r0, r3]
 800808e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008092:	460b      	mov	r3, r1
 8008094:	2900      	cmp	r1, #0
 8008096:	d1f5      	bne.n	8008084 <_printf_i+0x16c>
 8008098:	e7b9      	b.n	800800e <_printf_i+0xf6>
 800809a:	6813      	ldr	r3, [r2, #0]
 800809c:	6825      	ldr	r5, [r4, #0]
 800809e:	6961      	ldr	r1, [r4, #20]
 80080a0:	1d18      	adds	r0, r3, #4
 80080a2:	6010      	str	r0, [r2, #0]
 80080a4:	0628      	lsls	r0, r5, #24
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	d501      	bpl.n	80080ae <_printf_i+0x196>
 80080aa:	6019      	str	r1, [r3, #0]
 80080ac:	e002      	b.n	80080b4 <_printf_i+0x19c>
 80080ae:	066a      	lsls	r2, r5, #25
 80080b0:	d5fb      	bpl.n	80080aa <_printf_i+0x192>
 80080b2:	8019      	strh	r1, [r3, #0]
 80080b4:	2300      	movs	r3, #0
 80080b6:	6123      	str	r3, [r4, #16]
 80080b8:	4665      	mov	r5, ip
 80080ba:	e7b9      	b.n	8008030 <_printf_i+0x118>
 80080bc:	6813      	ldr	r3, [r2, #0]
 80080be:	1d19      	adds	r1, r3, #4
 80080c0:	6011      	str	r1, [r2, #0]
 80080c2:	681d      	ldr	r5, [r3, #0]
 80080c4:	6862      	ldr	r2, [r4, #4]
 80080c6:	2100      	movs	r1, #0
 80080c8:	4628      	mov	r0, r5
 80080ca:	f7f8 f891 	bl	80001f0 <memchr>
 80080ce:	b108      	cbz	r0, 80080d4 <_printf_i+0x1bc>
 80080d0:	1b40      	subs	r0, r0, r5
 80080d2:	6060      	str	r0, [r4, #4]
 80080d4:	6863      	ldr	r3, [r4, #4]
 80080d6:	6123      	str	r3, [r4, #16]
 80080d8:	2300      	movs	r3, #0
 80080da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080de:	e7a7      	b.n	8008030 <_printf_i+0x118>
 80080e0:	6923      	ldr	r3, [r4, #16]
 80080e2:	462a      	mov	r2, r5
 80080e4:	4639      	mov	r1, r7
 80080e6:	4630      	mov	r0, r6
 80080e8:	47c0      	blx	r8
 80080ea:	3001      	adds	r0, #1
 80080ec:	d0aa      	beq.n	8008044 <_printf_i+0x12c>
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	079b      	lsls	r3, r3, #30
 80080f2:	d413      	bmi.n	800811c <_printf_i+0x204>
 80080f4:	68e0      	ldr	r0, [r4, #12]
 80080f6:	9b03      	ldr	r3, [sp, #12]
 80080f8:	4298      	cmp	r0, r3
 80080fa:	bfb8      	it	lt
 80080fc:	4618      	movlt	r0, r3
 80080fe:	e7a3      	b.n	8008048 <_printf_i+0x130>
 8008100:	2301      	movs	r3, #1
 8008102:	464a      	mov	r2, r9
 8008104:	4639      	mov	r1, r7
 8008106:	4630      	mov	r0, r6
 8008108:	47c0      	blx	r8
 800810a:	3001      	adds	r0, #1
 800810c:	d09a      	beq.n	8008044 <_printf_i+0x12c>
 800810e:	3501      	adds	r5, #1
 8008110:	68e3      	ldr	r3, [r4, #12]
 8008112:	9a03      	ldr	r2, [sp, #12]
 8008114:	1a9b      	subs	r3, r3, r2
 8008116:	42ab      	cmp	r3, r5
 8008118:	dcf2      	bgt.n	8008100 <_printf_i+0x1e8>
 800811a:	e7eb      	b.n	80080f4 <_printf_i+0x1dc>
 800811c:	2500      	movs	r5, #0
 800811e:	f104 0919 	add.w	r9, r4, #25
 8008122:	e7f5      	b.n	8008110 <_printf_i+0x1f8>
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1ac      	bne.n	8008082 <_printf_i+0x16a>
 8008128:	7803      	ldrb	r3, [r0, #0]
 800812a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800812e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008132:	e76c      	b.n	800800e <_printf_i+0xf6>
 8008134:	0800b276 	.word	0x0800b276
 8008138:	0800b287 	.word	0x0800b287

0800813c <siprintf>:
 800813c:	b40e      	push	{r1, r2, r3}
 800813e:	b500      	push	{lr}
 8008140:	b09c      	sub	sp, #112	; 0x70
 8008142:	ab1d      	add	r3, sp, #116	; 0x74
 8008144:	9002      	str	r0, [sp, #8]
 8008146:	9006      	str	r0, [sp, #24]
 8008148:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800814c:	4809      	ldr	r0, [pc, #36]	; (8008174 <siprintf+0x38>)
 800814e:	9107      	str	r1, [sp, #28]
 8008150:	9104      	str	r1, [sp, #16]
 8008152:	4909      	ldr	r1, [pc, #36]	; (8008178 <siprintf+0x3c>)
 8008154:	f853 2b04 	ldr.w	r2, [r3], #4
 8008158:	9105      	str	r1, [sp, #20]
 800815a:	6800      	ldr	r0, [r0, #0]
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	a902      	add	r1, sp, #8
 8008160:	f002 fd44 	bl	800abec <_svfiprintf_r>
 8008164:	9b02      	ldr	r3, [sp, #8]
 8008166:	2200      	movs	r2, #0
 8008168:	701a      	strb	r2, [r3, #0]
 800816a:	b01c      	add	sp, #112	; 0x70
 800816c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008170:	b003      	add	sp, #12
 8008172:	4770      	bx	lr
 8008174:	20000024 	.word	0x20000024
 8008178:	ffff0208 	.word	0xffff0208

0800817c <strcat>:
 800817c:	b510      	push	{r4, lr}
 800817e:	4603      	mov	r3, r0
 8008180:	781a      	ldrb	r2, [r3, #0]
 8008182:	1c5c      	adds	r4, r3, #1
 8008184:	b93a      	cbnz	r2, 8008196 <strcat+0x1a>
 8008186:	3b01      	subs	r3, #1
 8008188:	f811 2b01 	ldrb.w	r2, [r1], #1
 800818c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008190:	2a00      	cmp	r2, #0
 8008192:	d1f9      	bne.n	8008188 <strcat+0xc>
 8008194:	bd10      	pop	{r4, pc}
 8008196:	4623      	mov	r3, r4
 8008198:	e7f2      	b.n	8008180 <strcat+0x4>

0800819a <sulp>:
 800819a:	b570      	push	{r4, r5, r6, lr}
 800819c:	4604      	mov	r4, r0
 800819e:	460d      	mov	r5, r1
 80081a0:	ec45 4b10 	vmov	d0, r4, r5
 80081a4:	4616      	mov	r6, r2
 80081a6:	f002 fadd 	bl	800a764 <__ulp>
 80081aa:	ec51 0b10 	vmov	r0, r1, d0
 80081ae:	b17e      	cbz	r6, 80081d0 <sulp+0x36>
 80081b0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80081b4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	dd09      	ble.n	80081d0 <sulp+0x36>
 80081bc:	051b      	lsls	r3, r3, #20
 80081be:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80081c2:	2400      	movs	r4, #0
 80081c4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80081c8:	4622      	mov	r2, r4
 80081ca:	462b      	mov	r3, r5
 80081cc:	f7f8 fa1c 	bl	8000608 <__aeabi_dmul>
 80081d0:	bd70      	pop	{r4, r5, r6, pc}
 80081d2:	0000      	movs	r0, r0
 80081d4:	0000      	movs	r0, r0
	...

080081d8 <_strtod_l>:
 80081d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081dc:	461f      	mov	r7, r3
 80081de:	b0a1      	sub	sp, #132	; 0x84
 80081e0:	2300      	movs	r3, #0
 80081e2:	4681      	mov	r9, r0
 80081e4:	4638      	mov	r0, r7
 80081e6:	460e      	mov	r6, r1
 80081e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80081ea:	931c      	str	r3, [sp, #112]	; 0x70
 80081ec:	f001 ffba 	bl	800a164 <__localeconv_l>
 80081f0:	4680      	mov	r8, r0
 80081f2:	6800      	ldr	r0, [r0, #0]
 80081f4:	f7f7 fff4 	bl	80001e0 <strlen>
 80081f8:	f04f 0a00 	mov.w	sl, #0
 80081fc:	4604      	mov	r4, r0
 80081fe:	f04f 0b00 	mov.w	fp, #0
 8008202:	961b      	str	r6, [sp, #108]	; 0x6c
 8008204:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008206:	781a      	ldrb	r2, [r3, #0]
 8008208:	2a0d      	cmp	r2, #13
 800820a:	d832      	bhi.n	8008272 <_strtod_l+0x9a>
 800820c:	2a09      	cmp	r2, #9
 800820e:	d236      	bcs.n	800827e <_strtod_l+0xa6>
 8008210:	2a00      	cmp	r2, #0
 8008212:	d03e      	beq.n	8008292 <_strtod_l+0xba>
 8008214:	2300      	movs	r3, #0
 8008216:	930d      	str	r3, [sp, #52]	; 0x34
 8008218:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800821a:	782b      	ldrb	r3, [r5, #0]
 800821c:	2b30      	cmp	r3, #48	; 0x30
 800821e:	f040 80ac 	bne.w	800837a <_strtod_l+0x1a2>
 8008222:	786b      	ldrb	r3, [r5, #1]
 8008224:	2b58      	cmp	r3, #88	; 0x58
 8008226:	d001      	beq.n	800822c <_strtod_l+0x54>
 8008228:	2b78      	cmp	r3, #120	; 0x78
 800822a:	d167      	bne.n	80082fc <_strtod_l+0x124>
 800822c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800822e:	9301      	str	r3, [sp, #4]
 8008230:	ab1c      	add	r3, sp, #112	; 0x70
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	9702      	str	r7, [sp, #8]
 8008236:	ab1d      	add	r3, sp, #116	; 0x74
 8008238:	4a88      	ldr	r2, [pc, #544]	; (800845c <_strtod_l+0x284>)
 800823a:	a91b      	add	r1, sp, #108	; 0x6c
 800823c:	4648      	mov	r0, r9
 800823e:	f001 fcba 	bl	8009bb6 <__gethex>
 8008242:	f010 0407 	ands.w	r4, r0, #7
 8008246:	4606      	mov	r6, r0
 8008248:	d005      	beq.n	8008256 <_strtod_l+0x7e>
 800824a:	2c06      	cmp	r4, #6
 800824c:	d12b      	bne.n	80082a6 <_strtod_l+0xce>
 800824e:	3501      	adds	r5, #1
 8008250:	2300      	movs	r3, #0
 8008252:	951b      	str	r5, [sp, #108]	; 0x6c
 8008254:	930d      	str	r3, [sp, #52]	; 0x34
 8008256:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008258:	2b00      	cmp	r3, #0
 800825a:	f040 859a 	bne.w	8008d92 <_strtod_l+0xbba>
 800825e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008260:	b1e3      	cbz	r3, 800829c <_strtod_l+0xc4>
 8008262:	4652      	mov	r2, sl
 8008264:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008268:	ec43 2b10 	vmov	d0, r2, r3
 800826c:	b021      	add	sp, #132	; 0x84
 800826e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008272:	2a2b      	cmp	r2, #43	; 0x2b
 8008274:	d015      	beq.n	80082a2 <_strtod_l+0xca>
 8008276:	2a2d      	cmp	r2, #45	; 0x2d
 8008278:	d004      	beq.n	8008284 <_strtod_l+0xac>
 800827a:	2a20      	cmp	r2, #32
 800827c:	d1ca      	bne.n	8008214 <_strtod_l+0x3c>
 800827e:	3301      	adds	r3, #1
 8008280:	931b      	str	r3, [sp, #108]	; 0x6c
 8008282:	e7bf      	b.n	8008204 <_strtod_l+0x2c>
 8008284:	2201      	movs	r2, #1
 8008286:	920d      	str	r2, [sp, #52]	; 0x34
 8008288:	1c5a      	adds	r2, r3, #1
 800828a:	921b      	str	r2, [sp, #108]	; 0x6c
 800828c:	785b      	ldrb	r3, [r3, #1]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1c2      	bne.n	8008218 <_strtod_l+0x40>
 8008292:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008294:	961b      	str	r6, [sp, #108]	; 0x6c
 8008296:	2b00      	cmp	r3, #0
 8008298:	f040 8579 	bne.w	8008d8e <_strtod_l+0xbb6>
 800829c:	4652      	mov	r2, sl
 800829e:	465b      	mov	r3, fp
 80082a0:	e7e2      	b.n	8008268 <_strtod_l+0x90>
 80082a2:	2200      	movs	r2, #0
 80082a4:	e7ef      	b.n	8008286 <_strtod_l+0xae>
 80082a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80082a8:	b13a      	cbz	r2, 80082ba <_strtod_l+0xe2>
 80082aa:	2135      	movs	r1, #53	; 0x35
 80082ac:	a81e      	add	r0, sp, #120	; 0x78
 80082ae:	f002 fb51 	bl	800a954 <__copybits>
 80082b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80082b4:	4648      	mov	r0, r9
 80082b6:	f001 ffbe 	bl	800a236 <_Bfree>
 80082ba:	3c01      	subs	r4, #1
 80082bc:	2c04      	cmp	r4, #4
 80082be:	d806      	bhi.n	80082ce <_strtod_l+0xf6>
 80082c0:	e8df f004 	tbb	[pc, r4]
 80082c4:	1714030a 	.word	0x1714030a
 80082c8:	0a          	.byte	0x0a
 80082c9:	00          	.byte	0x00
 80082ca:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80082ce:	0730      	lsls	r0, r6, #28
 80082d0:	d5c1      	bpl.n	8008256 <_strtod_l+0x7e>
 80082d2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80082d6:	e7be      	b.n	8008256 <_strtod_l+0x7e>
 80082d8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80082dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80082de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80082e2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80082e6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80082ea:	e7f0      	b.n	80082ce <_strtod_l+0xf6>
 80082ec:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008460 <_strtod_l+0x288>
 80082f0:	e7ed      	b.n	80082ce <_strtod_l+0xf6>
 80082f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80082f6:	f04f 3aff 	mov.w	sl, #4294967295
 80082fa:	e7e8      	b.n	80082ce <_strtod_l+0xf6>
 80082fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082fe:	1c5a      	adds	r2, r3, #1
 8008300:	921b      	str	r2, [sp, #108]	; 0x6c
 8008302:	785b      	ldrb	r3, [r3, #1]
 8008304:	2b30      	cmp	r3, #48	; 0x30
 8008306:	d0f9      	beq.n	80082fc <_strtod_l+0x124>
 8008308:	2b00      	cmp	r3, #0
 800830a:	d0a4      	beq.n	8008256 <_strtod_l+0x7e>
 800830c:	2301      	movs	r3, #1
 800830e:	2500      	movs	r5, #0
 8008310:	9306      	str	r3, [sp, #24]
 8008312:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008314:	9308      	str	r3, [sp, #32]
 8008316:	9507      	str	r5, [sp, #28]
 8008318:	9505      	str	r5, [sp, #20]
 800831a:	220a      	movs	r2, #10
 800831c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800831e:	7807      	ldrb	r7, [r0, #0]
 8008320:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008324:	b2d9      	uxtb	r1, r3
 8008326:	2909      	cmp	r1, #9
 8008328:	d929      	bls.n	800837e <_strtod_l+0x1a6>
 800832a:	4622      	mov	r2, r4
 800832c:	f8d8 1000 	ldr.w	r1, [r8]
 8008330:	f002 fd64 	bl	800adfc <strncmp>
 8008334:	2800      	cmp	r0, #0
 8008336:	d031      	beq.n	800839c <_strtod_l+0x1c4>
 8008338:	2000      	movs	r0, #0
 800833a:	9c05      	ldr	r4, [sp, #20]
 800833c:	9004      	str	r0, [sp, #16]
 800833e:	463b      	mov	r3, r7
 8008340:	4602      	mov	r2, r0
 8008342:	2b65      	cmp	r3, #101	; 0x65
 8008344:	d001      	beq.n	800834a <_strtod_l+0x172>
 8008346:	2b45      	cmp	r3, #69	; 0x45
 8008348:	d114      	bne.n	8008374 <_strtod_l+0x19c>
 800834a:	b924      	cbnz	r4, 8008356 <_strtod_l+0x17e>
 800834c:	b910      	cbnz	r0, 8008354 <_strtod_l+0x17c>
 800834e:	9b06      	ldr	r3, [sp, #24]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d09e      	beq.n	8008292 <_strtod_l+0xba>
 8008354:	2400      	movs	r4, #0
 8008356:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008358:	1c73      	adds	r3, r6, #1
 800835a:	931b      	str	r3, [sp, #108]	; 0x6c
 800835c:	7873      	ldrb	r3, [r6, #1]
 800835e:	2b2b      	cmp	r3, #43	; 0x2b
 8008360:	d078      	beq.n	8008454 <_strtod_l+0x27c>
 8008362:	2b2d      	cmp	r3, #45	; 0x2d
 8008364:	d070      	beq.n	8008448 <_strtod_l+0x270>
 8008366:	f04f 0c00 	mov.w	ip, #0
 800836a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800836e:	2f09      	cmp	r7, #9
 8008370:	d97c      	bls.n	800846c <_strtod_l+0x294>
 8008372:	961b      	str	r6, [sp, #108]	; 0x6c
 8008374:	f04f 0e00 	mov.w	lr, #0
 8008378:	e09a      	b.n	80084b0 <_strtod_l+0x2d8>
 800837a:	2300      	movs	r3, #0
 800837c:	e7c7      	b.n	800830e <_strtod_l+0x136>
 800837e:	9905      	ldr	r1, [sp, #20]
 8008380:	2908      	cmp	r1, #8
 8008382:	bfdd      	ittte	le
 8008384:	9907      	ldrle	r1, [sp, #28]
 8008386:	fb02 3301 	mlale	r3, r2, r1, r3
 800838a:	9307      	strle	r3, [sp, #28]
 800838c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008390:	9b05      	ldr	r3, [sp, #20]
 8008392:	3001      	adds	r0, #1
 8008394:	3301      	adds	r3, #1
 8008396:	9305      	str	r3, [sp, #20]
 8008398:	901b      	str	r0, [sp, #108]	; 0x6c
 800839a:	e7bf      	b.n	800831c <_strtod_l+0x144>
 800839c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800839e:	191a      	adds	r2, r3, r4
 80083a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80083a2:	9a05      	ldr	r2, [sp, #20]
 80083a4:	5d1b      	ldrb	r3, [r3, r4]
 80083a6:	2a00      	cmp	r2, #0
 80083a8:	d037      	beq.n	800841a <_strtod_l+0x242>
 80083aa:	9c05      	ldr	r4, [sp, #20]
 80083ac:	4602      	mov	r2, r0
 80083ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80083b2:	2909      	cmp	r1, #9
 80083b4:	d913      	bls.n	80083de <_strtod_l+0x206>
 80083b6:	2101      	movs	r1, #1
 80083b8:	9104      	str	r1, [sp, #16]
 80083ba:	e7c2      	b.n	8008342 <_strtod_l+0x16a>
 80083bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80083c2:	785b      	ldrb	r3, [r3, #1]
 80083c4:	3001      	adds	r0, #1
 80083c6:	2b30      	cmp	r3, #48	; 0x30
 80083c8:	d0f8      	beq.n	80083bc <_strtod_l+0x1e4>
 80083ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80083ce:	2a08      	cmp	r2, #8
 80083d0:	f200 84e4 	bhi.w	8008d9c <_strtod_l+0xbc4>
 80083d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80083d6:	9208      	str	r2, [sp, #32]
 80083d8:	4602      	mov	r2, r0
 80083da:	2000      	movs	r0, #0
 80083dc:	4604      	mov	r4, r0
 80083de:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80083e2:	f100 0101 	add.w	r1, r0, #1
 80083e6:	d012      	beq.n	800840e <_strtod_l+0x236>
 80083e8:	440a      	add	r2, r1
 80083ea:	eb00 0c04 	add.w	ip, r0, r4
 80083ee:	4621      	mov	r1, r4
 80083f0:	270a      	movs	r7, #10
 80083f2:	458c      	cmp	ip, r1
 80083f4:	d113      	bne.n	800841e <_strtod_l+0x246>
 80083f6:	1821      	adds	r1, r4, r0
 80083f8:	2908      	cmp	r1, #8
 80083fa:	f104 0401 	add.w	r4, r4, #1
 80083fe:	4404      	add	r4, r0
 8008400:	dc19      	bgt.n	8008436 <_strtod_l+0x25e>
 8008402:	9b07      	ldr	r3, [sp, #28]
 8008404:	210a      	movs	r1, #10
 8008406:	fb01 e303 	mla	r3, r1, r3, lr
 800840a:	9307      	str	r3, [sp, #28]
 800840c:	2100      	movs	r1, #0
 800840e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008410:	1c58      	adds	r0, r3, #1
 8008412:	901b      	str	r0, [sp, #108]	; 0x6c
 8008414:	785b      	ldrb	r3, [r3, #1]
 8008416:	4608      	mov	r0, r1
 8008418:	e7c9      	b.n	80083ae <_strtod_l+0x1d6>
 800841a:	9805      	ldr	r0, [sp, #20]
 800841c:	e7d3      	b.n	80083c6 <_strtod_l+0x1ee>
 800841e:	2908      	cmp	r1, #8
 8008420:	f101 0101 	add.w	r1, r1, #1
 8008424:	dc03      	bgt.n	800842e <_strtod_l+0x256>
 8008426:	9b07      	ldr	r3, [sp, #28]
 8008428:	437b      	muls	r3, r7
 800842a:	9307      	str	r3, [sp, #28]
 800842c:	e7e1      	b.n	80083f2 <_strtod_l+0x21a>
 800842e:	2910      	cmp	r1, #16
 8008430:	bfd8      	it	le
 8008432:	437d      	mulle	r5, r7
 8008434:	e7dd      	b.n	80083f2 <_strtod_l+0x21a>
 8008436:	2c10      	cmp	r4, #16
 8008438:	bfdc      	itt	le
 800843a:	210a      	movle	r1, #10
 800843c:	fb01 e505 	mlale	r5, r1, r5, lr
 8008440:	e7e4      	b.n	800840c <_strtod_l+0x234>
 8008442:	2301      	movs	r3, #1
 8008444:	9304      	str	r3, [sp, #16]
 8008446:	e781      	b.n	800834c <_strtod_l+0x174>
 8008448:	f04f 0c01 	mov.w	ip, #1
 800844c:	1cb3      	adds	r3, r6, #2
 800844e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008450:	78b3      	ldrb	r3, [r6, #2]
 8008452:	e78a      	b.n	800836a <_strtod_l+0x192>
 8008454:	f04f 0c00 	mov.w	ip, #0
 8008458:	e7f8      	b.n	800844c <_strtod_l+0x274>
 800845a:	bf00      	nop
 800845c:	0800b298 	.word	0x0800b298
 8008460:	7ff00000 	.word	0x7ff00000
 8008464:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008466:	1c5f      	adds	r7, r3, #1
 8008468:	971b      	str	r7, [sp, #108]	; 0x6c
 800846a:	785b      	ldrb	r3, [r3, #1]
 800846c:	2b30      	cmp	r3, #48	; 0x30
 800846e:	d0f9      	beq.n	8008464 <_strtod_l+0x28c>
 8008470:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008474:	2f08      	cmp	r7, #8
 8008476:	f63f af7d 	bhi.w	8008374 <_strtod_l+0x19c>
 800847a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800847e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008480:	930a      	str	r3, [sp, #40]	; 0x28
 8008482:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008484:	1c5f      	adds	r7, r3, #1
 8008486:	971b      	str	r7, [sp, #108]	; 0x6c
 8008488:	785b      	ldrb	r3, [r3, #1]
 800848a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800848e:	f1b8 0f09 	cmp.w	r8, #9
 8008492:	d937      	bls.n	8008504 <_strtod_l+0x32c>
 8008494:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008496:	1a7f      	subs	r7, r7, r1
 8008498:	2f08      	cmp	r7, #8
 800849a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800849e:	dc37      	bgt.n	8008510 <_strtod_l+0x338>
 80084a0:	45be      	cmp	lr, r7
 80084a2:	bfa8      	it	ge
 80084a4:	46be      	movge	lr, r7
 80084a6:	f1bc 0f00 	cmp.w	ip, #0
 80084aa:	d001      	beq.n	80084b0 <_strtod_l+0x2d8>
 80084ac:	f1ce 0e00 	rsb	lr, lr, #0
 80084b0:	2c00      	cmp	r4, #0
 80084b2:	d151      	bne.n	8008558 <_strtod_l+0x380>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	f47f aece 	bne.w	8008256 <_strtod_l+0x7e>
 80084ba:	9a06      	ldr	r2, [sp, #24]
 80084bc:	2a00      	cmp	r2, #0
 80084be:	f47f aeca 	bne.w	8008256 <_strtod_l+0x7e>
 80084c2:	9a04      	ldr	r2, [sp, #16]
 80084c4:	2a00      	cmp	r2, #0
 80084c6:	f47f aee4 	bne.w	8008292 <_strtod_l+0xba>
 80084ca:	2b4e      	cmp	r3, #78	; 0x4e
 80084cc:	d027      	beq.n	800851e <_strtod_l+0x346>
 80084ce:	dc21      	bgt.n	8008514 <_strtod_l+0x33c>
 80084d0:	2b49      	cmp	r3, #73	; 0x49
 80084d2:	f47f aede 	bne.w	8008292 <_strtod_l+0xba>
 80084d6:	49a0      	ldr	r1, [pc, #640]	; (8008758 <_strtod_l+0x580>)
 80084d8:	a81b      	add	r0, sp, #108	; 0x6c
 80084da:	f001 fd9f 	bl	800a01c <__match>
 80084de:	2800      	cmp	r0, #0
 80084e0:	f43f aed7 	beq.w	8008292 <_strtod_l+0xba>
 80084e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084e6:	499d      	ldr	r1, [pc, #628]	; (800875c <_strtod_l+0x584>)
 80084e8:	3b01      	subs	r3, #1
 80084ea:	a81b      	add	r0, sp, #108	; 0x6c
 80084ec:	931b      	str	r3, [sp, #108]	; 0x6c
 80084ee:	f001 fd95 	bl	800a01c <__match>
 80084f2:	b910      	cbnz	r0, 80084fa <_strtod_l+0x322>
 80084f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084f6:	3301      	adds	r3, #1
 80084f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80084fa:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008770 <_strtod_l+0x598>
 80084fe:	f04f 0a00 	mov.w	sl, #0
 8008502:	e6a8      	b.n	8008256 <_strtod_l+0x7e>
 8008504:	210a      	movs	r1, #10
 8008506:	fb01 3e0e 	mla	lr, r1, lr, r3
 800850a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800850e:	e7b8      	b.n	8008482 <_strtod_l+0x2aa>
 8008510:	46be      	mov	lr, r7
 8008512:	e7c8      	b.n	80084a6 <_strtod_l+0x2ce>
 8008514:	2b69      	cmp	r3, #105	; 0x69
 8008516:	d0de      	beq.n	80084d6 <_strtod_l+0x2fe>
 8008518:	2b6e      	cmp	r3, #110	; 0x6e
 800851a:	f47f aeba 	bne.w	8008292 <_strtod_l+0xba>
 800851e:	4990      	ldr	r1, [pc, #576]	; (8008760 <_strtod_l+0x588>)
 8008520:	a81b      	add	r0, sp, #108	; 0x6c
 8008522:	f001 fd7b 	bl	800a01c <__match>
 8008526:	2800      	cmp	r0, #0
 8008528:	f43f aeb3 	beq.w	8008292 <_strtod_l+0xba>
 800852c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	2b28      	cmp	r3, #40	; 0x28
 8008532:	d10e      	bne.n	8008552 <_strtod_l+0x37a>
 8008534:	aa1e      	add	r2, sp, #120	; 0x78
 8008536:	498b      	ldr	r1, [pc, #556]	; (8008764 <_strtod_l+0x58c>)
 8008538:	a81b      	add	r0, sp, #108	; 0x6c
 800853a:	f001 fd83 	bl	800a044 <__hexnan>
 800853e:	2805      	cmp	r0, #5
 8008540:	d107      	bne.n	8008552 <_strtod_l+0x37a>
 8008542:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008544:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008548:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800854c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008550:	e681      	b.n	8008256 <_strtod_l+0x7e>
 8008552:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008778 <_strtod_l+0x5a0>
 8008556:	e7d2      	b.n	80084fe <_strtod_l+0x326>
 8008558:	ebae 0302 	sub.w	r3, lr, r2
 800855c:	9306      	str	r3, [sp, #24]
 800855e:	9b05      	ldr	r3, [sp, #20]
 8008560:	9807      	ldr	r0, [sp, #28]
 8008562:	2b00      	cmp	r3, #0
 8008564:	bf08      	it	eq
 8008566:	4623      	moveq	r3, r4
 8008568:	2c10      	cmp	r4, #16
 800856a:	9305      	str	r3, [sp, #20]
 800856c:	46a0      	mov	r8, r4
 800856e:	bfa8      	it	ge
 8008570:	f04f 0810 	movge.w	r8, #16
 8008574:	f7f7 ffce 	bl	8000514 <__aeabi_ui2d>
 8008578:	2c09      	cmp	r4, #9
 800857a:	4682      	mov	sl, r0
 800857c:	468b      	mov	fp, r1
 800857e:	dc13      	bgt.n	80085a8 <_strtod_l+0x3d0>
 8008580:	9b06      	ldr	r3, [sp, #24]
 8008582:	2b00      	cmp	r3, #0
 8008584:	f43f ae67 	beq.w	8008256 <_strtod_l+0x7e>
 8008588:	9b06      	ldr	r3, [sp, #24]
 800858a:	dd7a      	ble.n	8008682 <_strtod_l+0x4aa>
 800858c:	2b16      	cmp	r3, #22
 800858e:	dc61      	bgt.n	8008654 <_strtod_l+0x47c>
 8008590:	4a75      	ldr	r2, [pc, #468]	; (8008768 <_strtod_l+0x590>)
 8008592:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008596:	e9de 0100 	ldrd	r0, r1, [lr]
 800859a:	4652      	mov	r2, sl
 800859c:	465b      	mov	r3, fp
 800859e:	f7f8 f833 	bl	8000608 <__aeabi_dmul>
 80085a2:	4682      	mov	sl, r0
 80085a4:	468b      	mov	fp, r1
 80085a6:	e656      	b.n	8008256 <_strtod_l+0x7e>
 80085a8:	4b6f      	ldr	r3, [pc, #444]	; (8008768 <_strtod_l+0x590>)
 80085aa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80085ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80085b2:	f7f8 f829 	bl	8000608 <__aeabi_dmul>
 80085b6:	4606      	mov	r6, r0
 80085b8:	4628      	mov	r0, r5
 80085ba:	460f      	mov	r7, r1
 80085bc:	f7f7 ffaa 	bl	8000514 <__aeabi_ui2d>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	4630      	mov	r0, r6
 80085c6:	4639      	mov	r1, r7
 80085c8:	f7f7 fe68 	bl	800029c <__adddf3>
 80085cc:	2c0f      	cmp	r4, #15
 80085ce:	4682      	mov	sl, r0
 80085d0:	468b      	mov	fp, r1
 80085d2:	ddd5      	ble.n	8008580 <_strtod_l+0x3a8>
 80085d4:	9b06      	ldr	r3, [sp, #24]
 80085d6:	eba4 0808 	sub.w	r8, r4, r8
 80085da:	4498      	add	r8, r3
 80085dc:	f1b8 0f00 	cmp.w	r8, #0
 80085e0:	f340 8096 	ble.w	8008710 <_strtod_l+0x538>
 80085e4:	f018 030f 	ands.w	r3, r8, #15
 80085e8:	d00a      	beq.n	8008600 <_strtod_l+0x428>
 80085ea:	495f      	ldr	r1, [pc, #380]	; (8008768 <_strtod_l+0x590>)
 80085ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085f0:	4652      	mov	r2, sl
 80085f2:	465b      	mov	r3, fp
 80085f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085f8:	f7f8 f806 	bl	8000608 <__aeabi_dmul>
 80085fc:	4682      	mov	sl, r0
 80085fe:	468b      	mov	fp, r1
 8008600:	f038 080f 	bics.w	r8, r8, #15
 8008604:	d073      	beq.n	80086ee <_strtod_l+0x516>
 8008606:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800860a:	dd47      	ble.n	800869c <_strtod_l+0x4c4>
 800860c:	2400      	movs	r4, #0
 800860e:	46a0      	mov	r8, r4
 8008610:	9407      	str	r4, [sp, #28]
 8008612:	9405      	str	r4, [sp, #20]
 8008614:	2322      	movs	r3, #34	; 0x22
 8008616:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008770 <_strtod_l+0x598>
 800861a:	f8c9 3000 	str.w	r3, [r9]
 800861e:	f04f 0a00 	mov.w	sl, #0
 8008622:	9b07      	ldr	r3, [sp, #28]
 8008624:	2b00      	cmp	r3, #0
 8008626:	f43f ae16 	beq.w	8008256 <_strtod_l+0x7e>
 800862a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800862c:	4648      	mov	r0, r9
 800862e:	f001 fe02 	bl	800a236 <_Bfree>
 8008632:	9905      	ldr	r1, [sp, #20]
 8008634:	4648      	mov	r0, r9
 8008636:	f001 fdfe 	bl	800a236 <_Bfree>
 800863a:	4641      	mov	r1, r8
 800863c:	4648      	mov	r0, r9
 800863e:	f001 fdfa 	bl	800a236 <_Bfree>
 8008642:	9907      	ldr	r1, [sp, #28]
 8008644:	4648      	mov	r0, r9
 8008646:	f001 fdf6 	bl	800a236 <_Bfree>
 800864a:	4621      	mov	r1, r4
 800864c:	4648      	mov	r0, r9
 800864e:	f001 fdf2 	bl	800a236 <_Bfree>
 8008652:	e600      	b.n	8008256 <_strtod_l+0x7e>
 8008654:	9a06      	ldr	r2, [sp, #24]
 8008656:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800865a:	4293      	cmp	r3, r2
 800865c:	dbba      	blt.n	80085d4 <_strtod_l+0x3fc>
 800865e:	4d42      	ldr	r5, [pc, #264]	; (8008768 <_strtod_l+0x590>)
 8008660:	f1c4 040f 	rsb	r4, r4, #15
 8008664:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008668:	4652      	mov	r2, sl
 800866a:	465b      	mov	r3, fp
 800866c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008670:	f7f7 ffca 	bl	8000608 <__aeabi_dmul>
 8008674:	9b06      	ldr	r3, [sp, #24]
 8008676:	1b1c      	subs	r4, r3, r4
 8008678:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800867c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008680:	e78d      	b.n	800859e <_strtod_l+0x3c6>
 8008682:	f113 0f16 	cmn.w	r3, #22
 8008686:	dba5      	blt.n	80085d4 <_strtod_l+0x3fc>
 8008688:	4a37      	ldr	r2, [pc, #220]	; (8008768 <_strtod_l+0x590>)
 800868a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800868e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008692:	4650      	mov	r0, sl
 8008694:	4659      	mov	r1, fp
 8008696:	f7f8 f8e1 	bl	800085c <__aeabi_ddiv>
 800869a:	e782      	b.n	80085a2 <_strtod_l+0x3ca>
 800869c:	2300      	movs	r3, #0
 800869e:	4e33      	ldr	r6, [pc, #204]	; (800876c <_strtod_l+0x594>)
 80086a0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80086a4:	4650      	mov	r0, sl
 80086a6:	4659      	mov	r1, fp
 80086a8:	461d      	mov	r5, r3
 80086aa:	f1b8 0f01 	cmp.w	r8, #1
 80086ae:	dc21      	bgt.n	80086f4 <_strtod_l+0x51c>
 80086b0:	b10b      	cbz	r3, 80086b6 <_strtod_l+0x4de>
 80086b2:	4682      	mov	sl, r0
 80086b4:	468b      	mov	fp, r1
 80086b6:	4b2d      	ldr	r3, [pc, #180]	; (800876c <_strtod_l+0x594>)
 80086b8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80086bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80086c0:	4652      	mov	r2, sl
 80086c2:	465b      	mov	r3, fp
 80086c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80086c8:	f7f7 ff9e 	bl	8000608 <__aeabi_dmul>
 80086cc:	4b28      	ldr	r3, [pc, #160]	; (8008770 <_strtod_l+0x598>)
 80086ce:	460a      	mov	r2, r1
 80086d0:	400b      	ands	r3, r1
 80086d2:	4928      	ldr	r1, [pc, #160]	; (8008774 <_strtod_l+0x59c>)
 80086d4:	428b      	cmp	r3, r1
 80086d6:	4682      	mov	sl, r0
 80086d8:	d898      	bhi.n	800860c <_strtod_l+0x434>
 80086da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80086de:	428b      	cmp	r3, r1
 80086e0:	bf86      	itte	hi
 80086e2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800877c <_strtod_l+0x5a4>
 80086e6:	f04f 3aff 	movhi.w	sl, #4294967295
 80086ea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80086ee:	2300      	movs	r3, #0
 80086f0:	9304      	str	r3, [sp, #16]
 80086f2:	e077      	b.n	80087e4 <_strtod_l+0x60c>
 80086f4:	f018 0f01 	tst.w	r8, #1
 80086f8:	d006      	beq.n	8008708 <_strtod_l+0x530>
 80086fa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80086fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008702:	f7f7 ff81 	bl	8000608 <__aeabi_dmul>
 8008706:	2301      	movs	r3, #1
 8008708:	3501      	adds	r5, #1
 800870a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800870e:	e7cc      	b.n	80086aa <_strtod_l+0x4d2>
 8008710:	d0ed      	beq.n	80086ee <_strtod_l+0x516>
 8008712:	f1c8 0800 	rsb	r8, r8, #0
 8008716:	f018 020f 	ands.w	r2, r8, #15
 800871a:	d00a      	beq.n	8008732 <_strtod_l+0x55a>
 800871c:	4b12      	ldr	r3, [pc, #72]	; (8008768 <_strtod_l+0x590>)
 800871e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008722:	4650      	mov	r0, sl
 8008724:	4659      	mov	r1, fp
 8008726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872a:	f7f8 f897 	bl	800085c <__aeabi_ddiv>
 800872e:	4682      	mov	sl, r0
 8008730:	468b      	mov	fp, r1
 8008732:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008736:	d0da      	beq.n	80086ee <_strtod_l+0x516>
 8008738:	f1b8 0f1f 	cmp.w	r8, #31
 800873c:	dd20      	ble.n	8008780 <_strtod_l+0x5a8>
 800873e:	2400      	movs	r4, #0
 8008740:	46a0      	mov	r8, r4
 8008742:	9407      	str	r4, [sp, #28]
 8008744:	9405      	str	r4, [sp, #20]
 8008746:	2322      	movs	r3, #34	; 0x22
 8008748:	f04f 0a00 	mov.w	sl, #0
 800874c:	f04f 0b00 	mov.w	fp, #0
 8008750:	f8c9 3000 	str.w	r3, [r9]
 8008754:	e765      	b.n	8008622 <_strtod_l+0x44a>
 8008756:	bf00      	nop
 8008758:	0800b269 	.word	0x0800b269
 800875c:	0800b2eb 	.word	0x0800b2eb
 8008760:	0800b271 	.word	0x0800b271
 8008764:	0800b2ac 	.word	0x0800b2ac
 8008768:	0800b390 	.word	0x0800b390
 800876c:	0800b368 	.word	0x0800b368
 8008770:	7ff00000 	.word	0x7ff00000
 8008774:	7ca00000 	.word	0x7ca00000
 8008778:	fff80000 	.word	0xfff80000
 800877c:	7fefffff 	.word	0x7fefffff
 8008780:	f018 0310 	ands.w	r3, r8, #16
 8008784:	bf18      	it	ne
 8008786:	236a      	movne	r3, #106	; 0x6a
 8008788:	4da0      	ldr	r5, [pc, #640]	; (8008a0c <_strtod_l+0x834>)
 800878a:	9304      	str	r3, [sp, #16]
 800878c:	4650      	mov	r0, sl
 800878e:	4659      	mov	r1, fp
 8008790:	2300      	movs	r3, #0
 8008792:	f1b8 0f00 	cmp.w	r8, #0
 8008796:	f300 810a 	bgt.w	80089ae <_strtod_l+0x7d6>
 800879a:	b10b      	cbz	r3, 80087a0 <_strtod_l+0x5c8>
 800879c:	4682      	mov	sl, r0
 800879e:	468b      	mov	fp, r1
 80087a0:	9b04      	ldr	r3, [sp, #16]
 80087a2:	b1bb      	cbz	r3, 80087d4 <_strtod_l+0x5fc>
 80087a4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80087a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	4659      	mov	r1, fp
 80087b0:	dd10      	ble.n	80087d4 <_strtod_l+0x5fc>
 80087b2:	2b1f      	cmp	r3, #31
 80087b4:	f340 8107 	ble.w	80089c6 <_strtod_l+0x7ee>
 80087b8:	2b34      	cmp	r3, #52	; 0x34
 80087ba:	bfde      	ittt	le
 80087bc:	3b20      	suble	r3, #32
 80087be:	f04f 32ff 	movle.w	r2, #4294967295
 80087c2:	fa02 f303 	lslle.w	r3, r2, r3
 80087c6:	f04f 0a00 	mov.w	sl, #0
 80087ca:	bfcc      	ite	gt
 80087cc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80087d0:	ea03 0b01 	andle.w	fp, r3, r1
 80087d4:	2200      	movs	r2, #0
 80087d6:	2300      	movs	r3, #0
 80087d8:	4650      	mov	r0, sl
 80087da:	4659      	mov	r1, fp
 80087dc:	f7f8 f97c 	bl	8000ad8 <__aeabi_dcmpeq>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d1ac      	bne.n	800873e <_strtod_l+0x566>
 80087e4:	9b07      	ldr	r3, [sp, #28]
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	9a05      	ldr	r2, [sp, #20]
 80087ea:	9908      	ldr	r1, [sp, #32]
 80087ec:	4623      	mov	r3, r4
 80087ee:	4648      	mov	r0, r9
 80087f0:	f001 fd73 	bl	800a2da <__s2b>
 80087f4:	9007      	str	r0, [sp, #28]
 80087f6:	2800      	cmp	r0, #0
 80087f8:	f43f af08 	beq.w	800860c <_strtod_l+0x434>
 80087fc:	9a06      	ldr	r2, [sp, #24]
 80087fe:	9b06      	ldr	r3, [sp, #24]
 8008800:	2a00      	cmp	r2, #0
 8008802:	f1c3 0300 	rsb	r3, r3, #0
 8008806:	bfa8      	it	ge
 8008808:	2300      	movge	r3, #0
 800880a:	930e      	str	r3, [sp, #56]	; 0x38
 800880c:	2400      	movs	r4, #0
 800880e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008812:	9316      	str	r3, [sp, #88]	; 0x58
 8008814:	46a0      	mov	r8, r4
 8008816:	9b07      	ldr	r3, [sp, #28]
 8008818:	4648      	mov	r0, r9
 800881a:	6859      	ldr	r1, [r3, #4]
 800881c:	f001 fcd7 	bl	800a1ce <_Balloc>
 8008820:	9005      	str	r0, [sp, #20]
 8008822:	2800      	cmp	r0, #0
 8008824:	f43f aef6 	beq.w	8008614 <_strtod_l+0x43c>
 8008828:	9b07      	ldr	r3, [sp, #28]
 800882a:	691a      	ldr	r2, [r3, #16]
 800882c:	3202      	adds	r2, #2
 800882e:	f103 010c 	add.w	r1, r3, #12
 8008832:	0092      	lsls	r2, r2, #2
 8008834:	300c      	adds	r0, #12
 8008836:	f001 fcbf 	bl	800a1b8 <memcpy>
 800883a:	aa1e      	add	r2, sp, #120	; 0x78
 800883c:	a91d      	add	r1, sp, #116	; 0x74
 800883e:	ec4b ab10 	vmov	d0, sl, fp
 8008842:	4648      	mov	r0, r9
 8008844:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008848:	f002 f802 	bl	800a850 <__d2b>
 800884c:	901c      	str	r0, [sp, #112]	; 0x70
 800884e:	2800      	cmp	r0, #0
 8008850:	f43f aee0 	beq.w	8008614 <_strtod_l+0x43c>
 8008854:	2101      	movs	r1, #1
 8008856:	4648      	mov	r0, r9
 8008858:	f001 fdcb 	bl	800a3f2 <__i2b>
 800885c:	4680      	mov	r8, r0
 800885e:	2800      	cmp	r0, #0
 8008860:	f43f aed8 	beq.w	8008614 <_strtod_l+0x43c>
 8008864:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008866:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008868:	2e00      	cmp	r6, #0
 800886a:	bfab      	itete	ge
 800886c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800886e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008870:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008872:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8008874:	bfac      	ite	ge
 8008876:	18f7      	addge	r7, r6, r3
 8008878:	1b9d      	sublt	r5, r3, r6
 800887a:	9b04      	ldr	r3, [sp, #16]
 800887c:	1af6      	subs	r6, r6, r3
 800887e:	4416      	add	r6, r2
 8008880:	4b63      	ldr	r3, [pc, #396]	; (8008a10 <_strtod_l+0x838>)
 8008882:	3e01      	subs	r6, #1
 8008884:	429e      	cmp	r6, r3
 8008886:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800888a:	f280 80af 	bge.w	80089ec <_strtod_l+0x814>
 800888e:	1b9b      	subs	r3, r3, r6
 8008890:	2b1f      	cmp	r3, #31
 8008892:	eba2 0203 	sub.w	r2, r2, r3
 8008896:	f04f 0101 	mov.w	r1, #1
 800889a:	f300 809b 	bgt.w	80089d4 <_strtod_l+0x7fc>
 800889e:	fa01 f303 	lsl.w	r3, r1, r3
 80088a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80088a4:	2300      	movs	r3, #0
 80088a6:	930a      	str	r3, [sp, #40]	; 0x28
 80088a8:	18be      	adds	r6, r7, r2
 80088aa:	9b04      	ldr	r3, [sp, #16]
 80088ac:	42b7      	cmp	r7, r6
 80088ae:	4415      	add	r5, r2
 80088b0:	441d      	add	r5, r3
 80088b2:	463b      	mov	r3, r7
 80088b4:	bfa8      	it	ge
 80088b6:	4633      	movge	r3, r6
 80088b8:	42ab      	cmp	r3, r5
 80088ba:	bfa8      	it	ge
 80088bc:	462b      	movge	r3, r5
 80088be:	2b00      	cmp	r3, #0
 80088c0:	bfc2      	ittt	gt
 80088c2:	1af6      	subgt	r6, r6, r3
 80088c4:	1aed      	subgt	r5, r5, r3
 80088c6:	1aff      	subgt	r7, r7, r3
 80088c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088ca:	b1bb      	cbz	r3, 80088fc <_strtod_l+0x724>
 80088cc:	4641      	mov	r1, r8
 80088ce:	461a      	mov	r2, r3
 80088d0:	4648      	mov	r0, r9
 80088d2:	f001 fe2d 	bl	800a530 <__pow5mult>
 80088d6:	4680      	mov	r8, r0
 80088d8:	2800      	cmp	r0, #0
 80088da:	f43f ae9b 	beq.w	8008614 <_strtod_l+0x43c>
 80088de:	4601      	mov	r1, r0
 80088e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80088e2:	4648      	mov	r0, r9
 80088e4:	f001 fd8e 	bl	800a404 <__multiply>
 80088e8:	900c      	str	r0, [sp, #48]	; 0x30
 80088ea:	2800      	cmp	r0, #0
 80088ec:	f43f ae92 	beq.w	8008614 <_strtod_l+0x43c>
 80088f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80088f2:	4648      	mov	r0, r9
 80088f4:	f001 fc9f 	bl	800a236 <_Bfree>
 80088f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088fa:	931c      	str	r3, [sp, #112]	; 0x70
 80088fc:	2e00      	cmp	r6, #0
 80088fe:	dc7a      	bgt.n	80089f6 <_strtod_l+0x81e>
 8008900:	9b06      	ldr	r3, [sp, #24]
 8008902:	2b00      	cmp	r3, #0
 8008904:	dd08      	ble.n	8008918 <_strtod_l+0x740>
 8008906:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008908:	9905      	ldr	r1, [sp, #20]
 800890a:	4648      	mov	r0, r9
 800890c:	f001 fe10 	bl	800a530 <__pow5mult>
 8008910:	9005      	str	r0, [sp, #20]
 8008912:	2800      	cmp	r0, #0
 8008914:	f43f ae7e 	beq.w	8008614 <_strtod_l+0x43c>
 8008918:	2d00      	cmp	r5, #0
 800891a:	dd08      	ble.n	800892e <_strtod_l+0x756>
 800891c:	462a      	mov	r2, r5
 800891e:	9905      	ldr	r1, [sp, #20]
 8008920:	4648      	mov	r0, r9
 8008922:	f001 fe53 	bl	800a5cc <__lshift>
 8008926:	9005      	str	r0, [sp, #20]
 8008928:	2800      	cmp	r0, #0
 800892a:	f43f ae73 	beq.w	8008614 <_strtod_l+0x43c>
 800892e:	2f00      	cmp	r7, #0
 8008930:	dd08      	ble.n	8008944 <_strtod_l+0x76c>
 8008932:	4641      	mov	r1, r8
 8008934:	463a      	mov	r2, r7
 8008936:	4648      	mov	r0, r9
 8008938:	f001 fe48 	bl	800a5cc <__lshift>
 800893c:	4680      	mov	r8, r0
 800893e:	2800      	cmp	r0, #0
 8008940:	f43f ae68 	beq.w	8008614 <_strtod_l+0x43c>
 8008944:	9a05      	ldr	r2, [sp, #20]
 8008946:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008948:	4648      	mov	r0, r9
 800894a:	f001 fead 	bl	800a6a8 <__mdiff>
 800894e:	4604      	mov	r4, r0
 8008950:	2800      	cmp	r0, #0
 8008952:	f43f ae5f 	beq.w	8008614 <_strtod_l+0x43c>
 8008956:	68c3      	ldr	r3, [r0, #12]
 8008958:	930c      	str	r3, [sp, #48]	; 0x30
 800895a:	2300      	movs	r3, #0
 800895c:	60c3      	str	r3, [r0, #12]
 800895e:	4641      	mov	r1, r8
 8008960:	f001 fe88 	bl	800a674 <__mcmp>
 8008964:	2800      	cmp	r0, #0
 8008966:	da55      	bge.n	8008a14 <_strtod_l+0x83c>
 8008968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800896a:	b9e3      	cbnz	r3, 80089a6 <_strtod_l+0x7ce>
 800896c:	f1ba 0f00 	cmp.w	sl, #0
 8008970:	d119      	bne.n	80089a6 <_strtod_l+0x7ce>
 8008972:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008976:	b9b3      	cbnz	r3, 80089a6 <_strtod_l+0x7ce>
 8008978:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800897c:	0d1b      	lsrs	r3, r3, #20
 800897e:	051b      	lsls	r3, r3, #20
 8008980:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008984:	d90f      	bls.n	80089a6 <_strtod_l+0x7ce>
 8008986:	6963      	ldr	r3, [r4, #20]
 8008988:	b913      	cbnz	r3, 8008990 <_strtod_l+0x7b8>
 800898a:	6923      	ldr	r3, [r4, #16]
 800898c:	2b01      	cmp	r3, #1
 800898e:	dd0a      	ble.n	80089a6 <_strtod_l+0x7ce>
 8008990:	4621      	mov	r1, r4
 8008992:	2201      	movs	r2, #1
 8008994:	4648      	mov	r0, r9
 8008996:	f001 fe19 	bl	800a5cc <__lshift>
 800899a:	4641      	mov	r1, r8
 800899c:	4604      	mov	r4, r0
 800899e:	f001 fe69 	bl	800a674 <__mcmp>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	dc67      	bgt.n	8008a76 <_strtod_l+0x89e>
 80089a6:	9b04      	ldr	r3, [sp, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d171      	bne.n	8008a90 <_strtod_l+0x8b8>
 80089ac:	e63d      	b.n	800862a <_strtod_l+0x452>
 80089ae:	f018 0f01 	tst.w	r8, #1
 80089b2:	d004      	beq.n	80089be <_strtod_l+0x7e6>
 80089b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089b8:	f7f7 fe26 	bl	8000608 <__aeabi_dmul>
 80089bc:	2301      	movs	r3, #1
 80089be:	ea4f 0868 	mov.w	r8, r8, asr #1
 80089c2:	3508      	adds	r5, #8
 80089c4:	e6e5      	b.n	8008792 <_strtod_l+0x5ba>
 80089c6:	f04f 32ff 	mov.w	r2, #4294967295
 80089ca:	fa02 f303 	lsl.w	r3, r2, r3
 80089ce:	ea03 0a0a 	and.w	sl, r3, sl
 80089d2:	e6ff      	b.n	80087d4 <_strtod_l+0x5fc>
 80089d4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80089d8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80089dc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80089e0:	36e2      	adds	r6, #226	; 0xe2
 80089e2:	fa01 f306 	lsl.w	r3, r1, r6
 80089e6:	930a      	str	r3, [sp, #40]	; 0x28
 80089e8:	910f      	str	r1, [sp, #60]	; 0x3c
 80089ea:	e75d      	b.n	80088a8 <_strtod_l+0x6d0>
 80089ec:	2300      	movs	r3, #0
 80089ee:	930a      	str	r3, [sp, #40]	; 0x28
 80089f0:	2301      	movs	r3, #1
 80089f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80089f4:	e758      	b.n	80088a8 <_strtod_l+0x6d0>
 80089f6:	4632      	mov	r2, r6
 80089f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80089fa:	4648      	mov	r0, r9
 80089fc:	f001 fde6 	bl	800a5cc <__lshift>
 8008a00:	901c      	str	r0, [sp, #112]	; 0x70
 8008a02:	2800      	cmp	r0, #0
 8008a04:	f47f af7c 	bne.w	8008900 <_strtod_l+0x728>
 8008a08:	e604      	b.n	8008614 <_strtod_l+0x43c>
 8008a0a:	bf00      	nop
 8008a0c:	0800b2c0 	.word	0x0800b2c0
 8008a10:	fffffc02 	.word	0xfffffc02
 8008a14:	465d      	mov	r5, fp
 8008a16:	f040 8086 	bne.w	8008b26 <_strtod_l+0x94e>
 8008a1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a20:	b32a      	cbz	r2, 8008a6e <_strtod_l+0x896>
 8008a22:	4aaf      	ldr	r2, [pc, #700]	; (8008ce0 <_strtod_l+0xb08>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d153      	bne.n	8008ad0 <_strtod_l+0x8f8>
 8008a28:	9b04      	ldr	r3, [sp, #16]
 8008a2a:	4650      	mov	r0, sl
 8008a2c:	b1d3      	cbz	r3, 8008a64 <_strtod_l+0x88c>
 8008a2e:	4aad      	ldr	r2, [pc, #692]	; (8008ce4 <_strtod_l+0xb0c>)
 8008a30:	402a      	ands	r2, r5
 8008a32:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008a36:	f04f 31ff 	mov.w	r1, #4294967295
 8008a3a:	d816      	bhi.n	8008a6a <_strtod_l+0x892>
 8008a3c:	0d12      	lsrs	r2, r2, #20
 8008a3e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008a42:	fa01 f303 	lsl.w	r3, r1, r3
 8008a46:	4298      	cmp	r0, r3
 8008a48:	d142      	bne.n	8008ad0 <_strtod_l+0x8f8>
 8008a4a:	4ba7      	ldr	r3, [pc, #668]	; (8008ce8 <_strtod_l+0xb10>)
 8008a4c:	429d      	cmp	r5, r3
 8008a4e:	d102      	bne.n	8008a56 <_strtod_l+0x87e>
 8008a50:	3001      	adds	r0, #1
 8008a52:	f43f addf 	beq.w	8008614 <_strtod_l+0x43c>
 8008a56:	4ba3      	ldr	r3, [pc, #652]	; (8008ce4 <_strtod_l+0xb0c>)
 8008a58:	402b      	ands	r3, r5
 8008a5a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008a5e:	f04f 0a00 	mov.w	sl, #0
 8008a62:	e7a0      	b.n	80089a6 <_strtod_l+0x7ce>
 8008a64:	f04f 33ff 	mov.w	r3, #4294967295
 8008a68:	e7ed      	b.n	8008a46 <_strtod_l+0x86e>
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	e7eb      	b.n	8008a46 <_strtod_l+0x86e>
 8008a6e:	bb7b      	cbnz	r3, 8008ad0 <_strtod_l+0x8f8>
 8008a70:	f1ba 0f00 	cmp.w	sl, #0
 8008a74:	d12c      	bne.n	8008ad0 <_strtod_l+0x8f8>
 8008a76:	9904      	ldr	r1, [sp, #16]
 8008a78:	4a9a      	ldr	r2, [pc, #616]	; (8008ce4 <_strtod_l+0xb0c>)
 8008a7a:	465b      	mov	r3, fp
 8008a7c:	b1f1      	cbz	r1, 8008abc <_strtod_l+0x8e4>
 8008a7e:	ea02 010b 	and.w	r1, r2, fp
 8008a82:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008a86:	dc19      	bgt.n	8008abc <_strtod_l+0x8e4>
 8008a88:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008a8c:	f77f ae5b 	ble.w	8008746 <_strtod_l+0x56e>
 8008a90:	4a96      	ldr	r2, [pc, #600]	; (8008cec <_strtod_l+0xb14>)
 8008a92:	2300      	movs	r3, #0
 8008a94:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008a98:	4650      	mov	r0, sl
 8008a9a:	4659      	mov	r1, fp
 8008a9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008aa0:	f7f7 fdb2 	bl	8000608 <__aeabi_dmul>
 8008aa4:	4682      	mov	sl, r0
 8008aa6:	468b      	mov	fp, r1
 8008aa8:	2900      	cmp	r1, #0
 8008aaa:	f47f adbe 	bne.w	800862a <_strtod_l+0x452>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	f47f adbb 	bne.w	800862a <_strtod_l+0x452>
 8008ab4:	2322      	movs	r3, #34	; 0x22
 8008ab6:	f8c9 3000 	str.w	r3, [r9]
 8008aba:	e5b6      	b.n	800862a <_strtod_l+0x452>
 8008abc:	4013      	ands	r3, r2
 8008abe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008ac2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008ac6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008aca:	f04f 3aff 	mov.w	sl, #4294967295
 8008ace:	e76a      	b.n	80089a6 <_strtod_l+0x7ce>
 8008ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad2:	b193      	cbz	r3, 8008afa <_strtod_l+0x922>
 8008ad4:	422b      	tst	r3, r5
 8008ad6:	f43f af66 	beq.w	80089a6 <_strtod_l+0x7ce>
 8008ada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008adc:	9a04      	ldr	r2, [sp, #16]
 8008ade:	4650      	mov	r0, sl
 8008ae0:	4659      	mov	r1, fp
 8008ae2:	b173      	cbz	r3, 8008b02 <_strtod_l+0x92a>
 8008ae4:	f7ff fb59 	bl	800819a <sulp>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008af0:	f7f7 fbd4 	bl	800029c <__adddf3>
 8008af4:	4682      	mov	sl, r0
 8008af6:	468b      	mov	fp, r1
 8008af8:	e755      	b.n	80089a6 <_strtod_l+0x7ce>
 8008afa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008afc:	ea13 0f0a 	tst.w	r3, sl
 8008b00:	e7e9      	b.n	8008ad6 <_strtod_l+0x8fe>
 8008b02:	f7ff fb4a 	bl	800819a <sulp>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b0e:	f7f7 fbc3 	bl	8000298 <__aeabi_dsub>
 8008b12:	2200      	movs	r2, #0
 8008b14:	2300      	movs	r3, #0
 8008b16:	4682      	mov	sl, r0
 8008b18:	468b      	mov	fp, r1
 8008b1a:	f7f7 ffdd 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	f47f ae11 	bne.w	8008746 <_strtod_l+0x56e>
 8008b24:	e73f      	b.n	80089a6 <_strtod_l+0x7ce>
 8008b26:	4641      	mov	r1, r8
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f001 fee0 	bl	800a8ee <__ratio>
 8008b2e:	ec57 6b10 	vmov	r6, r7, d0
 8008b32:	2200      	movs	r2, #0
 8008b34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b38:	ee10 0a10 	vmov	r0, s0
 8008b3c:	4639      	mov	r1, r7
 8008b3e:	f7f7 ffdf 	bl	8000b00 <__aeabi_dcmple>
 8008b42:	2800      	cmp	r0, #0
 8008b44:	d077      	beq.n	8008c36 <_strtod_l+0xa5e>
 8008b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d04a      	beq.n	8008be2 <_strtod_l+0xa0a>
 8008b4c:	4b68      	ldr	r3, [pc, #416]	; (8008cf0 <_strtod_l+0xb18>)
 8008b4e:	2200      	movs	r2, #0
 8008b50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008b54:	4f66      	ldr	r7, [pc, #408]	; (8008cf0 <_strtod_l+0xb18>)
 8008b56:	2600      	movs	r6, #0
 8008b58:	4b62      	ldr	r3, [pc, #392]	; (8008ce4 <_strtod_l+0xb0c>)
 8008b5a:	402b      	ands	r3, r5
 8008b5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b60:	4b64      	ldr	r3, [pc, #400]	; (8008cf4 <_strtod_l+0xb1c>)
 8008b62:	429a      	cmp	r2, r3
 8008b64:	f040 80ce 	bne.w	8008d04 <_strtod_l+0xb2c>
 8008b68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008b6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b70:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8008b74:	ec4b ab10 	vmov	d0, sl, fp
 8008b78:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008b7c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008b80:	f001 fdf0 	bl	800a764 <__ulp>
 8008b84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b88:	ec53 2b10 	vmov	r2, r3, d0
 8008b8c:	f7f7 fd3c 	bl	8000608 <__aeabi_dmul>
 8008b90:	4652      	mov	r2, sl
 8008b92:	465b      	mov	r3, fp
 8008b94:	f7f7 fb82 	bl	800029c <__adddf3>
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4952      	ldr	r1, [pc, #328]	; (8008ce4 <_strtod_l+0xb0c>)
 8008b9c:	4a56      	ldr	r2, [pc, #344]	; (8008cf8 <_strtod_l+0xb20>)
 8008b9e:	4019      	ands	r1, r3
 8008ba0:	4291      	cmp	r1, r2
 8008ba2:	4682      	mov	sl, r0
 8008ba4:	d95b      	bls.n	8008c5e <_strtod_l+0xa86>
 8008ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d103      	bne.n	8008bb8 <_strtod_l+0x9e0>
 8008bb0:	9b08      	ldr	r3, [sp, #32]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	f43f ad2e 	beq.w	8008614 <_strtod_l+0x43c>
 8008bb8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008ce8 <_strtod_l+0xb10>
 8008bbc:	f04f 3aff 	mov.w	sl, #4294967295
 8008bc0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008bc2:	4648      	mov	r0, r9
 8008bc4:	f001 fb37 	bl	800a236 <_Bfree>
 8008bc8:	9905      	ldr	r1, [sp, #20]
 8008bca:	4648      	mov	r0, r9
 8008bcc:	f001 fb33 	bl	800a236 <_Bfree>
 8008bd0:	4641      	mov	r1, r8
 8008bd2:	4648      	mov	r0, r9
 8008bd4:	f001 fb2f 	bl	800a236 <_Bfree>
 8008bd8:	4621      	mov	r1, r4
 8008bda:	4648      	mov	r0, r9
 8008bdc:	f001 fb2b 	bl	800a236 <_Bfree>
 8008be0:	e619      	b.n	8008816 <_strtod_l+0x63e>
 8008be2:	f1ba 0f00 	cmp.w	sl, #0
 8008be6:	d11a      	bne.n	8008c1e <_strtod_l+0xa46>
 8008be8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bec:	b9eb      	cbnz	r3, 8008c2a <_strtod_l+0xa52>
 8008bee:	2200      	movs	r2, #0
 8008bf0:	4b3f      	ldr	r3, [pc, #252]	; (8008cf0 <_strtod_l+0xb18>)
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	f7f7 ff79 	bl	8000aec <__aeabi_dcmplt>
 8008bfa:	b9c8      	cbnz	r0, 8008c30 <_strtod_l+0xa58>
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	4639      	mov	r1, r7
 8008c00:	2200      	movs	r2, #0
 8008c02:	4b3e      	ldr	r3, [pc, #248]	; (8008cfc <_strtod_l+0xb24>)
 8008c04:	f7f7 fd00 	bl	8000608 <__aeabi_dmul>
 8008c08:	4606      	mov	r6, r0
 8008c0a:	460f      	mov	r7, r1
 8008c0c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008c10:	9618      	str	r6, [sp, #96]	; 0x60
 8008c12:	9319      	str	r3, [sp, #100]	; 0x64
 8008c14:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008c18:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008c1c:	e79c      	b.n	8008b58 <_strtod_l+0x980>
 8008c1e:	f1ba 0f01 	cmp.w	sl, #1
 8008c22:	d102      	bne.n	8008c2a <_strtod_l+0xa52>
 8008c24:	2d00      	cmp	r5, #0
 8008c26:	f43f ad8e 	beq.w	8008746 <_strtod_l+0x56e>
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	4b34      	ldr	r3, [pc, #208]	; (8008d00 <_strtod_l+0xb28>)
 8008c2e:	e78f      	b.n	8008b50 <_strtod_l+0x978>
 8008c30:	2600      	movs	r6, #0
 8008c32:	4f32      	ldr	r7, [pc, #200]	; (8008cfc <_strtod_l+0xb24>)
 8008c34:	e7ea      	b.n	8008c0c <_strtod_l+0xa34>
 8008c36:	4b31      	ldr	r3, [pc, #196]	; (8008cfc <_strtod_l+0xb24>)
 8008c38:	4630      	mov	r0, r6
 8008c3a:	4639      	mov	r1, r7
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f7f7 fce3 	bl	8000608 <__aeabi_dmul>
 8008c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c44:	4606      	mov	r6, r0
 8008c46:	460f      	mov	r7, r1
 8008c48:	b933      	cbnz	r3, 8008c58 <_strtod_l+0xa80>
 8008c4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c4e:	9010      	str	r0, [sp, #64]	; 0x40
 8008c50:	9311      	str	r3, [sp, #68]	; 0x44
 8008c52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c56:	e7df      	b.n	8008c18 <_strtod_l+0xa40>
 8008c58:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008c5c:	e7f9      	b.n	8008c52 <_strtod_l+0xa7a>
 8008c5e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008c62:	9b04      	ldr	r3, [sp, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1ab      	bne.n	8008bc0 <_strtod_l+0x9e8>
 8008c68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c6c:	0d1b      	lsrs	r3, r3, #20
 8008c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c70:	051b      	lsls	r3, r3, #20
 8008c72:	429a      	cmp	r2, r3
 8008c74:	465d      	mov	r5, fp
 8008c76:	d1a3      	bne.n	8008bc0 <_strtod_l+0x9e8>
 8008c78:	4639      	mov	r1, r7
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	f7f7 ff74 	bl	8000b68 <__aeabi_d2iz>
 8008c80:	f7f7 fc58 	bl	8000534 <__aeabi_i2d>
 8008c84:	460b      	mov	r3, r1
 8008c86:	4602      	mov	r2, r0
 8008c88:	4639      	mov	r1, r7
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f7f7 fb04 	bl	8000298 <__aeabi_dsub>
 8008c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c92:	4606      	mov	r6, r0
 8008c94:	460f      	mov	r7, r1
 8008c96:	b933      	cbnz	r3, 8008ca6 <_strtod_l+0xace>
 8008c98:	f1ba 0f00 	cmp.w	sl, #0
 8008c9c:	d103      	bne.n	8008ca6 <_strtod_l+0xace>
 8008c9e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8008ca2:	2d00      	cmp	r5, #0
 8008ca4:	d06d      	beq.n	8008d82 <_strtod_l+0xbaa>
 8008ca6:	a30a      	add	r3, pc, #40	; (adr r3, 8008cd0 <_strtod_l+0xaf8>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	4630      	mov	r0, r6
 8008cae:	4639      	mov	r1, r7
 8008cb0:	f7f7 ff1c 	bl	8000aec <__aeabi_dcmplt>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	f47f acb8 	bne.w	800862a <_strtod_l+0x452>
 8008cba:	a307      	add	r3, pc, #28	; (adr r3, 8008cd8 <_strtod_l+0xb00>)
 8008cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	f7f7 ff30 	bl	8000b28 <__aeabi_dcmpgt>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	f43f af79 	beq.w	8008bc0 <_strtod_l+0x9e8>
 8008cce:	e4ac      	b.n	800862a <_strtod_l+0x452>
 8008cd0:	94a03595 	.word	0x94a03595
 8008cd4:	3fdfffff 	.word	0x3fdfffff
 8008cd8:	35afe535 	.word	0x35afe535
 8008cdc:	3fe00000 	.word	0x3fe00000
 8008ce0:	000fffff 	.word	0x000fffff
 8008ce4:	7ff00000 	.word	0x7ff00000
 8008ce8:	7fefffff 	.word	0x7fefffff
 8008cec:	39500000 	.word	0x39500000
 8008cf0:	3ff00000 	.word	0x3ff00000
 8008cf4:	7fe00000 	.word	0x7fe00000
 8008cf8:	7c9fffff 	.word	0x7c9fffff
 8008cfc:	3fe00000 	.word	0x3fe00000
 8008d00:	bff00000 	.word	0xbff00000
 8008d04:	9b04      	ldr	r3, [sp, #16]
 8008d06:	b333      	cbz	r3, 8008d56 <_strtod_l+0xb7e>
 8008d08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d0a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d0e:	d822      	bhi.n	8008d56 <_strtod_l+0xb7e>
 8008d10:	a327      	add	r3, pc, #156	; (adr r3, 8008db0 <_strtod_l+0xbd8>)
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	4630      	mov	r0, r6
 8008d18:	4639      	mov	r1, r7
 8008d1a:	f7f7 fef1 	bl	8000b00 <__aeabi_dcmple>
 8008d1e:	b1a0      	cbz	r0, 8008d4a <_strtod_l+0xb72>
 8008d20:	4639      	mov	r1, r7
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7f7 ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	bf08      	it	eq
 8008d2c:	2001      	moveq	r0, #1
 8008d2e:	f7f7 fbf1 	bl	8000514 <__aeabi_ui2d>
 8008d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d34:	4606      	mov	r6, r0
 8008d36:	460f      	mov	r7, r1
 8008d38:	bb03      	cbnz	r3, 8008d7c <_strtod_l+0xba4>
 8008d3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d3e:	9012      	str	r0, [sp, #72]	; 0x48
 8008d40:	9313      	str	r3, [sp, #76]	; 0x4c
 8008d42:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008d46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d4e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008d52:	1a9b      	subs	r3, r3, r2
 8008d54:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d56:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008d5a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008d5e:	f001 fd01 	bl	800a764 <__ulp>
 8008d62:	4650      	mov	r0, sl
 8008d64:	ec53 2b10 	vmov	r2, r3, d0
 8008d68:	4659      	mov	r1, fp
 8008d6a:	f7f7 fc4d 	bl	8000608 <__aeabi_dmul>
 8008d6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008d72:	f7f7 fa93 	bl	800029c <__adddf3>
 8008d76:	4682      	mov	sl, r0
 8008d78:	468b      	mov	fp, r1
 8008d7a:	e772      	b.n	8008c62 <_strtod_l+0xa8a>
 8008d7c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008d80:	e7df      	b.n	8008d42 <_strtod_l+0xb6a>
 8008d82:	a30d      	add	r3, pc, #52	; (adr r3, 8008db8 <_strtod_l+0xbe0>)
 8008d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d88:	f7f7 feb0 	bl	8000aec <__aeabi_dcmplt>
 8008d8c:	e79c      	b.n	8008cc8 <_strtod_l+0xaf0>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	930d      	str	r3, [sp, #52]	; 0x34
 8008d92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	f7ff ba61 	b.w	800825e <_strtod_l+0x86>
 8008d9c:	2b65      	cmp	r3, #101	; 0x65
 8008d9e:	f04f 0200 	mov.w	r2, #0
 8008da2:	f43f ab4e 	beq.w	8008442 <_strtod_l+0x26a>
 8008da6:	2101      	movs	r1, #1
 8008da8:	4614      	mov	r4, r2
 8008daa:	9104      	str	r1, [sp, #16]
 8008dac:	f7ff bacb 	b.w	8008346 <_strtod_l+0x16e>
 8008db0:	ffc00000 	.word	0xffc00000
 8008db4:	41dfffff 	.word	0x41dfffff
 8008db8:	94a03595 	.word	0x94a03595
 8008dbc:	3fcfffff 	.word	0x3fcfffff

08008dc0 <strtod>:
 8008dc0:	4b07      	ldr	r3, [pc, #28]	; (8008de0 <strtod+0x20>)
 8008dc2:	4a08      	ldr	r2, [pc, #32]	; (8008de4 <strtod+0x24>)
 8008dc4:	b410      	push	{r4}
 8008dc6:	681c      	ldr	r4, [r3, #0]
 8008dc8:	6a23      	ldr	r3, [r4, #32]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	bf08      	it	eq
 8008dce:	4613      	moveq	r3, r2
 8008dd0:	460a      	mov	r2, r1
 8008dd2:	4601      	mov	r1, r0
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dda:	f7ff b9fd 	b.w	80081d8 <_strtod_l>
 8008dde:	bf00      	nop
 8008de0:	20000024 	.word	0x20000024
 8008de4:	20000088 	.word	0x20000088

08008de8 <strtok>:
 8008de8:	4b13      	ldr	r3, [pc, #76]	; (8008e38 <strtok+0x50>)
 8008dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dee:	681d      	ldr	r5, [r3, #0]
 8008df0:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8008df2:	4606      	mov	r6, r0
 8008df4:	460f      	mov	r7, r1
 8008df6:	b9b4      	cbnz	r4, 8008e26 <strtok+0x3e>
 8008df8:	2050      	movs	r0, #80	; 0x50
 8008dfa:	f001 f9c3 	bl	800a184 <malloc>
 8008dfe:	65a8      	str	r0, [r5, #88]	; 0x58
 8008e00:	e9c0 4400 	strd	r4, r4, [r0]
 8008e04:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008e08:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008e0c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008e10:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008e14:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008e18:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008e1c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008e20:	6184      	str	r4, [r0, #24]
 8008e22:	7704      	strb	r4, [r0, #28]
 8008e24:	6244      	str	r4, [r0, #36]	; 0x24
 8008e26:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8008e28:	4639      	mov	r1, r7
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e32:	f000 b803 	b.w	8008e3c <__strtok_r>
 8008e36:	bf00      	nop
 8008e38:	20000024 	.word	0x20000024

08008e3c <__strtok_r>:
 8008e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e3e:	b918      	cbnz	r0, 8008e48 <__strtok_r+0xc>
 8008e40:	6810      	ldr	r0, [r2, #0]
 8008e42:	b908      	cbnz	r0, 8008e48 <__strtok_r+0xc>
 8008e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e46:	4620      	mov	r0, r4
 8008e48:	4604      	mov	r4, r0
 8008e4a:	460f      	mov	r7, r1
 8008e4c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008e50:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008e54:	b91e      	cbnz	r6, 8008e5e <__strtok_r+0x22>
 8008e56:	b96d      	cbnz	r5, 8008e74 <__strtok_r+0x38>
 8008e58:	6015      	str	r5, [r2, #0]
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	e7f2      	b.n	8008e44 <__strtok_r+0x8>
 8008e5e:	42b5      	cmp	r5, r6
 8008e60:	d1f6      	bne.n	8008e50 <__strtok_r+0x14>
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1ef      	bne.n	8008e46 <__strtok_r+0xa>
 8008e66:	6014      	str	r4, [r2, #0]
 8008e68:	7003      	strb	r3, [r0, #0]
 8008e6a:	e7eb      	b.n	8008e44 <__strtok_r+0x8>
 8008e6c:	462b      	mov	r3, r5
 8008e6e:	e00d      	b.n	8008e8c <__strtok_r+0x50>
 8008e70:	b926      	cbnz	r6, 8008e7c <__strtok_r+0x40>
 8008e72:	461c      	mov	r4, r3
 8008e74:	4623      	mov	r3, r4
 8008e76:	460f      	mov	r7, r1
 8008e78:	f813 5b01 	ldrb.w	r5, [r3], #1
 8008e7c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008e80:	42b5      	cmp	r5, r6
 8008e82:	d1f5      	bne.n	8008e70 <__strtok_r+0x34>
 8008e84:	2d00      	cmp	r5, #0
 8008e86:	d0f1      	beq.n	8008e6c <__strtok_r+0x30>
 8008e88:	2100      	movs	r1, #0
 8008e8a:	7021      	strb	r1, [r4, #0]
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	e7d9      	b.n	8008e44 <__strtok_r+0x8>

08008e90 <quorem>:
 8008e90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e94:	6903      	ldr	r3, [r0, #16]
 8008e96:	690c      	ldr	r4, [r1, #16]
 8008e98:	42a3      	cmp	r3, r4
 8008e9a:	4680      	mov	r8, r0
 8008e9c:	f2c0 8082 	blt.w	8008fa4 <quorem+0x114>
 8008ea0:	3c01      	subs	r4, #1
 8008ea2:	f101 0714 	add.w	r7, r1, #20
 8008ea6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008eaa:	f100 0614 	add.w	r6, r0, #20
 8008eae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008eb2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008eb6:	eb06 030c 	add.w	r3, r6, ip
 8008eba:	3501      	adds	r5, #1
 8008ebc:	eb07 090c 	add.w	r9, r7, ip
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	fbb0 f5f5 	udiv	r5, r0, r5
 8008ec6:	b395      	cbz	r5, 8008f2e <quorem+0x9e>
 8008ec8:	f04f 0a00 	mov.w	sl, #0
 8008ecc:	4638      	mov	r0, r7
 8008ece:	46b6      	mov	lr, r6
 8008ed0:	46d3      	mov	fp, sl
 8008ed2:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ed6:	b293      	uxth	r3, r2
 8008ed8:	fb05 a303 	mla	r3, r5, r3, sl
 8008edc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	ebab 0303 	sub.w	r3, fp, r3
 8008ee6:	0c12      	lsrs	r2, r2, #16
 8008ee8:	f8de b000 	ldr.w	fp, [lr]
 8008eec:	fb05 a202 	mla	r2, r5, r2, sl
 8008ef0:	fa13 f38b 	uxtah	r3, r3, fp
 8008ef4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008ef8:	fa1f fb82 	uxth.w	fp, r2
 8008efc:	f8de 2000 	ldr.w	r2, [lr]
 8008f00:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008f04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f0e:	4581      	cmp	r9, r0
 8008f10:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008f14:	f84e 3b04 	str.w	r3, [lr], #4
 8008f18:	d2db      	bcs.n	8008ed2 <quorem+0x42>
 8008f1a:	f856 300c 	ldr.w	r3, [r6, ip]
 8008f1e:	b933      	cbnz	r3, 8008f2e <quorem+0x9e>
 8008f20:	9b01      	ldr	r3, [sp, #4]
 8008f22:	3b04      	subs	r3, #4
 8008f24:	429e      	cmp	r6, r3
 8008f26:	461a      	mov	r2, r3
 8008f28:	d330      	bcc.n	8008f8c <quorem+0xfc>
 8008f2a:	f8c8 4010 	str.w	r4, [r8, #16]
 8008f2e:	4640      	mov	r0, r8
 8008f30:	f001 fba0 	bl	800a674 <__mcmp>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	db25      	blt.n	8008f84 <quorem+0xf4>
 8008f38:	3501      	adds	r5, #1
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f04f 0c00 	mov.w	ip, #0
 8008f40:	f857 2b04 	ldr.w	r2, [r7], #4
 8008f44:	f8d0 e000 	ldr.w	lr, [r0]
 8008f48:	b293      	uxth	r3, r2
 8008f4a:	ebac 0303 	sub.w	r3, ip, r3
 8008f4e:	0c12      	lsrs	r2, r2, #16
 8008f50:	fa13 f38e 	uxtah	r3, r3, lr
 8008f54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f62:	45b9      	cmp	r9, r7
 8008f64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f68:	f840 3b04 	str.w	r3, [r0], #4
 8008f6c:	d2e8      	bcs.n	8008f40 <quorem+0xb0>
 8008f6e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008f72:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008f76:	b92a      	cbnz	r2, 8008f84 <quorem+0xf4>
 8008f78:	3b04      	subs	r3, #4
 8008f7a:	429e      	cmp	r6, r3
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	d30b      	bcc.n	8008f98 <quorem+0x108>
 8008f80:	f8c8 4010 	str.w	r4, [r8, #16]
 8008f84:	4628      	mov	r0, r5
 8008f86:	b003      	add	sp, #12
 8008f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8c:	6812      	ldr	r2, [r2, #0]
 8008f8e:	3b04      	subs	r3, #4
 8008f90:	2a00      	cmp	r2, #0
 8008f92:	d1ca      	bne.n	8008f2a <quorem+0x9a>
 8008f94:	3c01      	subs	r4, #1
 8008f96:	e7c5      	b.n	8008f24 <quorem+0x94>
 8008f98:	6812      	ldr	r2, [r2, #0]
 8008f9a:	3b04      	subs	r3, #4
 8008f9c:	2a00      	cmp	r2, #0
 8008f9e:	d1ef      	bne.n	8008f80 <quorem+0xf0>
 8008fa0:	3c01      	subs	r4, #1
 8008fa2:	e7ea      	b.n	8008f7a <quorem+0xea>
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	e7ee      	b.n	8008f86 <quorem+0xf6>

08008fa8 <_dtoa_r>:
 8008fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	ec57 6b10 	vmov	r6, r7, d0
 8008fb0:	b097      	sub	sp, #92	; 0x5c
 8008fb2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008fb4:	9106      	str	r1, [sp, #24]
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	920b      	str	r2, [sp, #44]	; 0x2c
 8008fba:	9312      	str	r3, [sp, #72]	; 0x48
 8008fbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008fc0:	e9cd 6700 	strd	r6, r7, [sp]
 8008fc4:	b93d      	cbnz	r5, 8008fd6 <_dtoa_r+0x2e>
 8008fc6:	2010      	movs	r0, #16
 8008fc8:	f001 f8dc 	bl	800a184 <malloc>
 8008fcc:	6260      	str	r0, [r4, #36]	; 0x24
 8008fce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008fd2:	6005      	str	r5, [r0, #0]
 8008fd4:	60c5      	str	r5, [r0, #12]
 8008fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fd8:	6819      	ldr	r1, [r3, #0]
 8008fda:	b151      	cbz	r1, 8008ff2 <_dtoa_r+0x4a>
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	604a      	str	r2, [r1, #4]
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	4093      	lsls	r3, r2
 8008fe4:	608b      	str	r3, [r1, #8]
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f001 f925 	bl	800a236 <_Bfree>
 8008fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fee:	2200      	movs	r2, #0
 8008ff0:	601a      	str	r2, [r3, #0]
 8008ff2:	1e3b      	subs	r3, r7, #0
 8008ff4:	bfbb      	ittet	lt
 8008ff6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008ffa:	9301      	strlt	r3, [sp, #4]
 8008ffc:	2300      	movge	r3, #0
 8008ffe:	2201      	movlt	r2, #1
 8009000:	bfac      	ite	ge
 8009002:	f8c8 3000 	strge.w	r3, [r8]
 8009006:	f8c8 2000 	strlt.w	r2, [r8]
 800900a:	4baf      	ldr	r3, [pc, #700]	; (80092c8 <_dtoa_r+0x320>)
 800900c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009010:	ea33 0308 	bics.w	r3, r3, r8
 8009014:	d114      	bne.n	8009040 <_dtoa_r+0x98>
 8009016:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009018:	f242 730f 	movw	r3, #9999	; 0x270f
 800901c:	6013      	str	r3, [r2, #0]
 800901e:	9b00      	ldr	r3, [sp, #0]
 8009020:	b923      	cbnz	r3, 800902c <_dtoa_r+0x84>
 8009022:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009026:	2800      	cmp	r0, #0
 8009028:	f000 8542 	beq.w	8009ab0 <_dtoa_r+0xb08>
 800902c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800902e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80092dc <_dtoa_r+0x334>
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 8544 	beq.w	8009ac0 <_dtoa_r+0xb18>
 8009038:	f10b 0303 	add.w	r3, fp, #3
 800903c:	f000 bd3e 	b.w	8009abc <_dtoa_r+0xb14>
 8009040:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009044:	2200      	movs	r2, #0
 8009046:	2300      	movs	r3, #0
 8009048:	4630      	mov	r0, r6
 800904a:	4639      	mov	r1, r7
 800904c:	f7f7 fd44 	bl	8000ad8 <__aeabi_dcmpeq>
 8009050:	4681      	mov	r9, r0
 8009052:	b168      	cbz	r0, 8009070 <_dtoa_r+0xc8>
 8009054:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009056:	2301      	movs	r3, #1
 8009058:	6013      	str	r3, [r2, #0]
 800905a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800905c:	2b00      	cmp	r3, #0
 800905e:	f000 8524 	beq.w	8009aaa <_dtoa_r+0xb02>
 8009062:	4b9a      	ldr	r3, [pc, #616]	; (80092cc <_dtoa_r+0x324>)
 8009064:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009066:	f103 3bff 	add.w	fp, r3, #4294967295
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	f000 bd28 	b.w	8009ac0 <_dtoa_r+0xb18>
 8009070:	aa14      	add	r2, sp, #80	; 0x50
 8009072:	a915      	add	r1, sp, #84	; 0x54
 8009074:	ec47 6b10 	vmov	d0, r6, r7
 8009078:	4620      	mov	r0, r4
 800907a:	f001 fbe9 	bl	800a850 <__d2b>
 800907e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009082:	9004      	str	r0, [sp, #16]
 8009084:	2d00      	cmp	r5, #0
 8009086:	d07c      	beq.n	8009182 <_dtoa_r+0x1da>
 8009088:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800908c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009090:	46b2      	mov	sl, r6
 8009092:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009096:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800909a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800909e:	2200      	movs	r2, #0
 80090a0:	4b8b      	ldr	r3, [pc, #556]	; (80092d0 <_dtoa_r+0x328>)
 80090a2:	4650      	mov	r0, sl
 80090a4:	4659      	mov	r1, fp
 80090a6:	f7f7 f8f7 	bl	8000298 <__aeabi_dsub>
 80090aa:	a381      	add	r3, pc, #516	; (adr r3, 80092b0 <_dtoa_r+0x308>)
 80090ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b0:	f7f7 faaa 	bl	8000608 <__aeabi_dmul>
 80090b4:	a380      	add	r3, pc, #512	; (adr r3, 80092b8 <_dtoa_r+0x310>)
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	f7f7 f8ef 	bl	800029c <__adddf3>
 80090be:	4606      	mov	r6, r0
 80090c0:	4628      	mov	r0, r5
 80090c2:	460f      	mov	r7, r1
 80090c4:	f7f7 fa36 	bl	8000534 <__aeabi_i2d>
 80090c8:	a37d      	add	r3, pc, #500	; (adr r3, 80092c0 <_dtoa_r+0x318>)
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	f7f7 fa9b 	bl	8000608 <__aeabi_dmul>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	4630      	mov	r0, r6
 80090d8:	4639      	mov	r1, r7
 80090da:	f7f7 f8df 	bl	800029c <__adddf3>
 80090de:	4606      	mov	r6, r0
 80090e0:	460f      	mov	r7, r1
 80090e2:	f7f7 fd41 	bl	8000b68 <__aeabi_d2iz>
 80090e6:	2200      	movs	r2, #0
 80090e8:	4682      	mov	sl, r0
 80090ea:	2300      	movs	r3, #0
 80090ec:	4630      	mov	r0, r6
 80090ee:	4639      	mov	r1, r7
 80090f0:	f7f7 fcfc 	bl	8000aec <__aeabi_dcmplt>
 80090f4:	b148      	cbz	r0, 800910a <_dtoa_r+0x162>
 80090f6:	4650      	mov	r0, sl
 80090f8:	f7f7 fa1c 	bl	8000534 <__aeabi_i2d>
 80090fc:	4632      	mov	r2, r6
 80090fe:	463b      	mov	r3, r7
 8009100:	f7f7 fcea 	bl	8000ad8 <__aeabi_dcmpeq>
 8009104:	b908      	cbnz	r0, 800910a <_dtoa_r+0x162>
 8009106:	f10a 3aff 	add.w	sl, sl, #4294967295
 800910a:	f1ba 0f16 	cmp.w	sl, #22
 800910e:	d859      	bhi.n	80091c4 <_dtoa_r+0x21c>
 8009110:	4970      	ldr	r1, [pc, #448]	; (80092d4 <_dtoa_r+0x32c>)
 8009112:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009116:	e9dd 2300 	ldrd	r2, r3, [sp]
 800911a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800911e:	f7f7 fd03 	bl	8000b28 <__aeabi_dcmpgt>
 8009122:	2800      	cmp	r0, #0
 8009124:	d050      	beq.n	80091c8 <_dtoa_r+0x220>
 8009126:	f10a 3aff 	add.w	sl, sl, #4294967295
 800912a:	2300      	movs	r3, #0
 800912c:	930f      	str	r3, [sp, #60]	; 0x3c
 800912e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009130:	1b5d      	subs	r5, r3, r5
 8009132:	f1b5 0801 	subs.w	r8, r5, #1
 8009136:	bf49      	itett	mi
 8009138:	f1c5 0301 	rsbmi	r3, r5, #1
 800913c:	2300      	movpl	r3, #0
 800913e:	9305      	strmi	r3, [sp, #20]
 8009140:	f04f 0800 	movmi.w	r8, #0
 8009144:	bf58      	it	pl
 8009146:	9305      	strpl	r3, [sp, #20]
 8009148:	f1ba 0f00 	cmp.w	sl, #0
 800914c:	db3e      	blt.n	80091cc <_dtoa_r+0x224>
 800914e:	2300      	movs	r3, #0
 8009150:	44d0      	add	r8, sl
 8009152:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009156:	9307      	str	r3, [sp, #28]
 8009158:	9b06      	ldr	r3, [sp, #24]
 800915a:	2b09      	cmp	r3, #9
 800915c:	f200 8090 	bhi.w	8009280 <_dtoa_r+0x2d8>
 8009160:	2b05      	cmp	r3, #5
 8009162:	bfc4      	itt	gt
 8009164:	3b04      	subgt	r3, #4
 8009166:	9306      	strgt	r3, [sp, #24]
 8009168:	9b06      	ldr	r3, [sp, #24]
 800916a:	f1a3 0302 	sub.w	r3, r3, #2
 800916e:	bfcc      	ite	gt
 8009170:	2500      	movgt	r5, #0
 8009172:	2501      	movle	r5, #1
 8009174:	2b03      	cmp	r3, #3
 8009176:	f200 808f 	bhi.w	8009298 <_dtoa_r+0x2f0>
 800917a:	e8df f003 	tbb	[pc, r3]
 800917e:	7f7d      	.short	0x7f7d
 8009180:	7131      	.short	0x7131
 8009182:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009186:	441d      	add	r5, r3
 8009188:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800918c:	2820      	cmp	r0, #32
 800918e:	dd13      	ble.n	80091b8 <_dtoa_r+0x210>
 8009190:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009194:	9b00      	ldr	r3, [sp, #0]
 8009196:	fa08 f800 	lsl.w	r8, r8, r0
 800919a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800919e:	fa23 f000 	lsr.w	r0, r3, r0
 80091a2:	ea48 0000 	orr.w	r0, r8, r0
 80091a6:	f7f7 f9b5 	bl	8000514 <__aeabi_ui2d>
 80091aa:	2301      	movs	r3, #1
 80091ac:	4682      	mov	sl, r0
 80091ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80091b2:	3d01      	subs	r5, #1
 80091b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80091b6:	e772      	b.n	800909e <_dtoa_r+0xf6>
 80091b8:	9b00      	ldr	r3, [sp, #0]
 80091ba:	f1c0 0020 	rsb	r0, r0, #32
 80091be:	fa03 f000 	lsl.w	r0, r3, r0
 80091c2:	e7f0      	b.n	80091a6 <_dtoa_r+0x1fe>
 80091c4:	2301      	movs	r3, #1
 80091c6:	e7b1      	b.n	800912c <_dtoa_r+0x184>
 80091c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80091ca:	e7b0      	b.n	800912e <_dtoa_r+0x186>
 80091cc:	9b05      	ldr	r3, [sp, #20]
 80091ce:	eba3 030a 	sub.w	r3, r3, sl
 80091d2:	9305      	str	r3, [sp, #20]
 80091d4:	f1ca 0300 	rsb	r3, sl, #0
 80091d8:	9307      	str	r3, [sp, #28]
 80091da:	2300      	movs	r3, #0
 80091dc:	930e      	str	r3, [sp, #56]	; 0x38
 80091de:	e7bb      	b.n	8009158 <_dtoa_r+0x1b0>
 80091e0:	2301      	movs	r3, #1
 80091e2:	930a      	str	r3, [sp, #40]	; 0x28
 80091e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	dd59      	ble.n	800929e <_dtoa_r+0x2f6>
 80091ea:	9302      	str	r3, [sp, #8]
 80091ec:	4699      	mov	r9, r3
 80091ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80091f0:	2200      	movs	r2, #0
 80091f2:	6072      	str	r2, [r6, #4]
 80091f4:	2204      	movs	r2, #4
 80091f6:	f102 0014 	add.w	r0, r2, #20
 80091fa:	4298      	cmp	r0, r3
 80091fc:	6871      	ldr	r1, [r6, #4]
 80091fe:	d953      	bls.n	80092a8 <_dtoa_r+0x300>
 8009200:	4620      	mov	r0, r4
 8009202:	f000 ffe4 	bl	800a1ce <_Balloc>
 8009206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009208:	6030      	str	r0, [r6, #0]
 800920a:	f1b9 0f0e 	cmp.w	r9, #14
 800920e:	f8d3 b000 	ldr.w	fp, [r3]
 8009212:	f200 80e6 	bhi.w	80093e2 <_dtoa_r+0x43a>
 8009216:	2d00      	cmp	r5, #0
 8009218:	f000 80e3 	beq.w	80093e2 <_dtoa_r+0x43a>
 800921c:	ed9d 7b00 	vldr	d7, [sp]
 8009220:	f1ba 0f00 	cmp.w	sl, #0
 8009224:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009228:	dd74      	ble.n	8009314 <_dtoa_r+0x36c>
 800922a:	4a2a      	ldr	r2, [pc, #168]	; (80092d4 <_dtoa_r+0x32c>)
 800922c:	f00a 030f 	and.w	r3, sl, #15
 8009230:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009234:	ed93 7b00 	vldr	d7, [r3]
 8009238:	ea4f 162a 	mov.w	r6, sl, asr #4
 800923c:	06f0      	lsls	r0, r6, #27
 800923e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009242:	d565      	bpl.n	8009310 <_dtoa_r+0x368>
 8009244:	4b24      	ldr	r3, [pc, #144]	; (80092d8 <_dtoa_r+0x330>)
 8009246:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800924a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800924e:	f7f7 fb05 	bl	800085c <__aeabi_ddiv>
 8009252:	e9cd 0100 	strd	r0, r1, [sp]
 8009256:	f006 060f 	and.w	r6, r6, #15
 800925a:	2503      	movs	r5, #3
 800925c:	4f1e      	ldr	r7, [pc, #120]	; (80092d8 <_dtoa_r+0x330>)
 800925e:	e04c      	b.n	80092fa <_dtoa_r+0x352>
 8009260:	2301      	movs	r3, #1
 8009262:	930a      	str	r3, [sp, #40]	; 0x28
 8009264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009266:	4453      	add	r3, sl
 8009268:	f103 0901 	add.w	r9, r3, #1
 800926c:	9302      	str	r3, [sp, #8]
 800926e:	464b      	mov	r3, r9
 8009270:	2b01      	cmp	r3, #1
 8009272:	bfb8      	it	lt
 8009274:	2301      	movlt	r3, #1
 8009276:	e7ba      	b.n	80091ee <_dtoa_r+0x246>
 8009278:	2300      	movs	r3, #0
 800927a:	e7b2      	b.n	80091e2 <_dtoa_r+0x23a>
 800927c:	2300      	movs	r3, #0
 800927e:	e7f0      	b.n	8009262 <_dtoa_r+0x2ba>
 8009280:	2501      	movs	r5, #1
 8009282:	2300      	movs	r3, #0
 8009284:	9306      	str	r3, [sp, #24]
 8009286:	950a      	str	r5, [sp, #40]	; 0x28
 8009288:	f04f 33ff 	mov.w	r3, #4294967295
 800928c:	9302      	str	r3, [sp, #8]
 800928e:	4699      	mov	r9, r3
 8009290:	2200      	movs	r2, #0
 8009292:	2312      	movs	r3, #18
 8009294:	920b      	str	r2, [sp, #44]	; 0x2c
 8009296:	e7aa      	b.n	80091ee <_dtoa_r+0x246>
 8009298:	2301      	movs	r3, #1
 800929a:	930a      	str	r3, [sp, #40]	; 0x28
 800929c:	e7f4      	b.n	8009288 <_dtoa_r+0x2e0>
 800929e:	2301      	movs	r3, #1
 80092a0:	9302      	str	r3, [sp, #8]
 80092a2:	4699      	mov	r9, r3
 80092a4:	461a      	mov	r2, r3
 80092a6:	e7f5      	b.n	8009294 <_dtoa_r+0x2ec>
 80092a8:	3101      	adds	r1, #1
 80092aa:	6071      	str	r1, [r6, #4]
 80092ac:	0052      	lsls	r2, r2, #1
 80092ae:	e7a2      	b.n	80091f6 <_dtoa_r+0x24e>
 80092b0:	636f4361 	.word	0x636f4361
 80092b4:	3fd287a7 	.word	0x3fd287a7
 80092b8:	8b60c8b3 	.word	0x8b60c8b3
 80092bc:	3fc68a28 	.word	0x3fc68a28
 80092c0:	509f79fb 	.word	0x509f79fb
 80092c4:	3fd34413 	.word	0x3fd34413
 80092c8:	7ff00000 	.word	0x7ff00000
 80092cc:	0800b275 	.word	0x0800b275
 80092d0:	3ff80000 	.word	0x3ff80000
 80092d4:	0800b390 	.word	0x0800b390
 80092d8:	0800b368 	.word	0x0800b368
 80092dc:	0800b2f1 	.word	0x0800b2f1
 80092e0:	07f1      	lsls	r1, r6, #31
 80092e2:	d508      	bpl.n	80092f6 <_dtoa_r+0x34e>
 80092e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80092e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ec:	f7f7 f98c 	bl	8000608 <__aeabi_dmul>
 80092f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80092f4:	3501      	adds	r5, #1
 80092f6:	1076      	asrs	r6, r6, #1
 80092f8:	3708      	adds	r7, #8
 80092fa:	2e00      	cmp	r6, #0
 80092fc:	d1f0      	bne.n	80092e0 <_dtoa_r+0x338>
 80092fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009302:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009306:	f7f7 faa9 	bl	800085c <__aeabi_ddiv>
 800930a:	e9cd 0100 	strd	r0, r1, [sp]
 800930e:	e01a      	b.n	8009346 <_dtoa_r+0x39e>
 8009310:	2502      	movs	r5, #2
 8009312:	e7a3      	b.n	800925c <_dtoa_r+0x2b4>
 8009314:	f000 80a0 	beq.w	8009458 <_dtoa_r+0x4b0>
 8009318:	f1ca 0600 	rsb	r6, sl, #0
 800931c:	4b9f      	ldr	r3, [pc, #636]	; (800959c <_dtoa_r+0x5f4>)
 800931e:	4fa0      	ldr	r7, [pc, #640]	; (80095a0 <_dtoa_r+0x5f8>)
 8009320:	f006 020f 	and.w	r2, r6, #15
 8009324:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009330:	f7f7 f96a 	bl	8000608 <__aeabi_dmul>
 8009334:	e9cd 0100 	strd	r0, r1, [sp]
 8009338:	1136      	asrs	r6, r6, #4
 800933a:	2300      	movs	r3, #0
 800933c:	2502      	movs	r5, #2
 800933e:	2e00      	cmp	r6, #0
 8009340:	d17f      	bne.n	8009442 <_dtoa_r+0x49a>
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1e1      	bne.n	800930a <_dtoa_r+0x362>
 8009346:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 8087 	beq.w	800945c <_dtoa_r+0x4b4>
 800934e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009352:	2200      	movs	r2, #0
 8009354:	4b93      	ldr	r3, [pc, #588]	; (80095a4 <_dtoa_r+0x5fc>)
 8009356:	4630      	mov	r0, r6
 8009358:	4639      	mov	r1, r7
 800935a:	f7f7 fbc7 	bl	8000aec <__aeabi_dcmplt>
 800935e:	2800      	cmp	r0, #0
 8009360:	d07c      	beq.n	800945c <_dtoa_r+0x4b4>
 8009362:	f1b9 0f00 	cmp.w	r9, #0
 8009366:	d079      	beq.n	800945c <_dtoa_r+0x4b4>
 8009368:	9b02      	ldr	r3, [sp, #8]
 800936a:	2b00      	cmp	r3, #0
 800936c:	dd35      	ble.n	80093da <_dtoa_r+0x432>
 800936e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009372:	9308      	str	r3, [sp, #32]
 8009374:	4639      	mov	r1, r7
 8009376:	2200      	movs	r2, #0
 8009378:	4b8b      	ldr	r3, [pc, #556]	; (80095a8 <_dtoa_r+0x600>)
 800937a:	4630      	mov	r0, r6
 800937c:	f7f7 f944 	bl	8000608 <__aeabi_dmul>
 8009380:	e9cd 0100 	strd	r0, r1, [sp]
 8009384:	9f02      	ldr	r7, [sp, #8]
 8009386:	3501      	adds	r5, #1
 8009388:	4628      	mov	r0, r5
 800938a:	f7f7 f8d3 	bl	8000534 <__aeabi_i2d>
 800938e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009392:	f7f7 f939 	bl	8000608 <__aeabi_dmul>
 8009396:	2200      	movs	r2, #0
 8009398:	4b84      	ldr	r3, [pc, #528]	; (80095ac <_dtoa_r+0x604>)
 800939a:	f7f6 ff7f 	bl	800029c <__adddf3>
 800939e:	4605      	mov	r5, r0
 80093a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80093a4:	2f00      	cmp	r7, #0
 80093a6:	d15d      	bne.n	8009464 <_dtoa_r+0x4bc>
 80093a8:	2200      	movs	r2, #0
 80093aa:	4b81      	ldr	r3, [pc, #516]	; (80095b0 <_dtoa_r+0x608>)
 80093ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093b0:	f7f6 ff72 	bl	8000298 <__aeabi_dsub>
 80093b4:	462a      	mov	r2, r5
 80093b6:	4633      	mov	r3, r6
 80093b8:	e9cd 0100 	strd	r0, r1, [sp]
 80093bc:	f7f7 fbb4 	bl	8000b28 <__aeabi_dcmpgt>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	f040 8288 	bne.w	80098d6 <_dtoa_r+0x92e>
 80093c6:	462a      	mov	r2, r5
 80093c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80093cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093d0:	f7f7 fb8c 	bl	8000aec <__aeabi_dcmplt>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	f040 827c 	bne.w	80098d2 <_dtoa_r+0x92a>
 80093da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80093de:	e9cd 2300 	strd	r2, r3, [sp]
 80093e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f2c0 8150 	blt.w	800968a <_dtoa_r+0x6e2>
 80093ea:	f1ba 0f0e 	cmp.w	sl, #14
 80093ee:	f300 814c 	bgt.w	800968a <_dtoa_r+0x6e2>
 80093f2:	4b6a      	ldr	r3, [pc, #424]	; (800959c <_dtoa_r+0x5f4>)
 80093f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80093f8:	ed93 7b00 	vldr	d7, [r3]
 80093fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093fe:	2b00      	cmp	r3, #0
 8009400:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009404:	f280 80d8 	bge.w	80095b8 <_dtoa_r+0x610>
 8009408:	f1b9 0f00 	cmp.w	r9, #0
 800940c:	f300 80d4 	bgt.w	80095b8 <_dtoa_r+0x610>
 8009410:	f040 825e 	bne.w	80098d0 <_dtoa_r+0x928>
 8009414:	2200      	movs	r2, #0
 8009416:	4b66      	ldr	r3, [pc, #408]	; (80095b0 <_dtoa_r+0x608>)
 8009418:	ec51 0b17 	vmov	r0, r1, d7
 800941c:	f7f7 f8f4 	bl	8000608 <__aeabi_dmul>
 8009420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009424:	f7f7 fb76 	bl	8000b14 <__aeabi_dcmpge>
 8009428:	464f      	mov	r7, r9
 800942a:	464e      	mov	r6, r9
 800942c:	2800      	cmp	r0, #0
 800942e:	f040 8234 	bne.w	800989a <_dtoa_r+0x8f2>
 8009432:	2331      	movs	r3, #49	; 0x31
 8009434:	f10b 0501 	add.w	r5, fp, #1
 8009438:	f88b 3000 	strb.w	r3, [fp]
 800943c:	f10a 0a01 	add.w	sl, sl, #1
 8009440:	e22f      	b.n	80098a2 <_dtoa_r+0x8fa>
 8009442:	07f2      	lsls	r2, r6, #31
 8009444:	d505      	bpl.n	8009452 <_dtoa_r+0x4aa>
 8009446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800944a:	f7f7 f8dd 	bl	8000608 <__aeabi_dmul>
 800944e:	3501      	adds	r5, #1
 8009450:	2301      	movs	r3, #1
 8009452:	1076      	asrs	r6, r6, #1
 8009454:	3708      	adds	r7, #8
 8009456:	e772      	b.n	800933e <_dtoa_r+0x396>
 8009458:	2502      	movs	r5, #2
 800945a:	e774      	b.n	8009346 <_dtoa_r+0x39e>
 800945c:	f8cd a020 	str.w	sl, [sp, #32]
 8009460:	464f      	mov	r7, r9
 8009462:	e791      	b.n	8009388 <_dtoa_r+0x3e0>
 8009464:	4b4d      	ldr	r3, [pc, #308]	; (800959c <_dtoa_r+0x5f4>)
 8009466:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800946a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800946e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009470:	2b00      	cmp	r3, #0
 8009472:	d047      	beq.n	8009504 <_dtoa_r+0x55c>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	2000      	movs	r0, #0
 800947a:	494e      	ldr	r1, [pc, #312]	; (80095b4 <_dtoa_r+0x60c>)
 800947c:	f7f7 f9ee 	bl	800085c <__aeabi_ddiv>
 8009480:	462a      	mov	r2, r5
 8009482:	4633      	mov	r3, r6
 8009484:	f7f6 ff08 	bl	8000298 <__aeabi_dsub>
 8009488:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800948c:	465d      	mov	r5, fp
 800948e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009492:	f7f7 fb69 	bl	8000b68 <__aeabi_d2iz>
 8009496:	4606      	mov	r6, r0
 8009498:	f7f7 f84c 	bl	8000534 <__aeabi_i2d>
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094a4:	f7f6 fef8 	bl	8000298 <__aeabi_dsub>
 80094a8:	3630      	adds	r6, #48	; 0x30
 80094aa:	f805 6b01 	strb.w	r6, [r5], #1
 80094ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80094b2:	e9cd 0100 	strd	r0, r1, [sp]
 80094b6:	f7f7 fb19 	bl	8000aec <__aeabi_dcmplt>
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d163      	bne.n	8009586 <_dtoa_r+0x5de>
 80094be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094c2:	2000      	movs	r0, #0
 80094c4:	4937      	ldr	r1, [pc, #220]	; (80095a4 <_dtoa_r+0x5fc>)
 80094c6:	f7f6 fee7 	bl	8000298 <__aeabi_dsub>
 80094ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80094ce:	f7f7 fb0d 	bl	8000aec <__aeabi_dcmplt>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	f040 80b7 	bne.w	8009646 <_dtoa_r+0x69e>
 80094d8:	eba5 030b 	sub.w	r3, r5, fp
 80094dc:	429f      	cmp	r7, r3
 80094de:	f77f af7c 	ble.w	80093da <_dtoa_r+0x432>
 80094e2:	2200      	movs	r2, #0
 80094e4:	4b30      	ldr	r3, [pc, #192]	; (80095a8 <_dtoa_r+0x600>)
 80094e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094ea:	f7f7 f88d 	bl	8000608 <__aeabi_dmul>
 80094ee:	2200      	movs	r2, #0
 80094f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80094f4:	4b2c      	ldr	r3, [pc, #176]	; (80095a8 <_dtoa_r+0x600>)
 80094f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094fa:	f7f7 f885 	bl	8000608 <__aeabi_dmul>
 80094fe:	e9cd 0100 	strd	r0, r1, [sp]
 8009502:	e7c4      	b.n	800948e <_dtoa_r+0x4e6>
 8009504:	462a      	mov	r2, r5
 8009506:	4633      	mov	r3, r6
 8009508:	f7f7 f87e 	bl	8000608 <__aeabi_dmul>
 800950c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009510:	eb0b 0507 	add.w	r5, fp, r7
 8009514:	465e      	mov	r6, fp
 8009516:	e9dd 0100 	ldrd	r0, r1, [sp]
 800951a:	f7f7 fb25 	bl	8000b68 <__aeabi_d2iz>
 800951e:	4607      	mov	r7, r0
 8009520:	f7f7 f808 	bl	8000534 <__aeabi_i2d>
 8009524:	3730      	adds	r7, #48	; 0x30
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800952e:	f7f6 feb3 	bl	8000298 <__aeabi_dsub>
 8009532:	f806 7b01 	strb.w	r7, [r6], #1
 8009536:	42ae      	cmp	r6, r5
 8009538:	e9cd 0100 	strd	r0, r1, [sp]
 800953c:	f04f 0200 	mov.w	r2, #0
 8009540:	d126      	bne.n	8009590 <_dtoa_r+0x5e8>
 8009542:	4b1c      	ldr	r3, [pc, #112]	; (80095b4 <_dtoa_r+0x60c>)
 8009544:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009548:	f7f6 fea8 	bl	800029c <__adddf3>
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009554:	f7f7 fae8 	bl	8000b28 <__aeabi_dcmpgt>
 8009558:	2800      	cmp	r0, #0
 800955a:	d174      	bne.n	8009646 <_dtoa_r+0x69e>
 800955c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009560:	2000      	movs	r0, #0
 8009562:	4914      	ldr	r1, [pc, #80]	; (80095b4 <_dtoa_r+0x60c>)
 8009564:	f7f6 fe98 	bl	8000298 <__aeabi_dsub>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009570:	f7f7 fabc 	bl	8000aec <__aeabi_dcmplt>
 8009574:	2800      	cmp	r0, #0
 8009576:	f43f af30 	beq.w	80093da <_dtoa_r+0x432>
 800957a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800957e:	2b30      	cmp	r3, #48	; 0x30
 8009580:	f105 32ff 	add.w	r2, r5, #4294967295
 8009584:	d002      	beq.n	800958c <_dtoa_r+0x5e4>
 8009586:	f8dd a020 	ldr.w	sl, [sp, #32]
 800958a:	e04a      	b.n	8009622 <_dtoa_r+0x67a>
 800958c:	4615      	mov	r5, r2
 800958e:	e7f4      	b.n	800957a <_dtoa_r+0x5d2>
 8009590:	4b05      	ldr	r3, [pc, #20]	; (80095a8 <_dtoa_r+0x600>)
 8009592:	f7f7 f839 	bl	8000608 <__aeabi_dmul>
 8009596:	e9cd 0100 	strd	r0, r1, [sp]
 800959a:	e7bc      	b.n	8009516 <_dtoa_r+0x56e>
 800959c:	0800b390 	.word	0x0800b390
 80095a0:	0800b368 	.word	0x0800b368
 80095a4:	3ff00000 	.word	0x3ff00000
 80095a8:	40240000 	.word	0x40240000
 80095ac:	401c0000 	.word	0x401c0000
 80095b0:	40140000 	.word	0x40140000
 80095b4:	3fe00000 	.word	0x3fe00000
 80095b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80095bc:	465d      	mov	r5, fp
 80095be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095c2:	4630      	mov	r0, r6
 80095c4:	4639      	mov	r1, r7
 80095c6:	f7f7 f949 	bl	800085c <__aeabi_ddiv>
 80095ca:	f7f7 facd 	bl	8000b68 <__aeabi_d2iz>
 80095ce:	4680      	mov	r8, r0
 80095d0:	f7f6 ffb0 	bl	8000534 <__aeabi_i2d>
 80095d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095d8:	f7f7 f816 	bl	8000608 <__aeabi_dmul>
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	4630      	mov	r0, r6
 80095e2:	4639      	mov	r1, r7
 80095e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80095e8:	f7f6 fe56 	bl	8000298 <__aeabi_dsub>
 80095ec:	f805 6b01 	strb.w	r6, [r5], #1
 80095f0:	eba5 060b 	sub.w	r6, r5, fp
 80095f4:	45b1      	cmp	r9, r6
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	d139      	bne.n	8009670 <_dtoa_r+0x6c8>
 80095fc:	f7f6 fe4e 	bl	800029c <__adddf3>
 8009600:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009604:	4606      	mov	r6, r0
 8009606:	460f      	mov	r7, r1
 8009608:	f7f7 fa8e 	bl	8000b28 <__aeabi_dcmpgt>
 800960c:	b9c8      	cbnz	r0, 8009642 <_dtoa_r+0x69a>
 800960e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009612:	4630      	mov	r0, r6
 8009614:	4639      	mov	r1, r7
 8009616:	f7f7 fa5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800961a:	b110      	cbz	r0, 8009622 <_dtoa_r+0x67a>
 800961c:	f018 0f01 	tst.w	r8, #1
 8009620:	d10f      	bne.n	8009642 <_dtoa_r+0x69a>
 8009622:	9904      	ldr	r1, [sp, #16]
 8009624:	4620      	mov	r0, r4
 8009626:	f000 fe06 	bl	800a236 <_Bfree>
 800962a:	2300      	movs	r3, #0
 800962c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800962e:	702b      	strb	r3, [r5, #0]
 8009630:	f10a 0301 	add.w	r3, sl, #1
 8009634:	6013      	str	r3, [r2, #0]
 8009636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 8241 	beq.w	8009ac0 <_dtoa_r+0xb18>
 800963e:	601d      	str	r5, [r3, #0]
 8009640:	e23e      	b.n	8009ac0 <_dtoa_r+0xb18>
 8009642:	f8cd a020 	str.w	sl, [sp, #32]
 8009646:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800964a:	2a39      	cmp	r2, #57	; 0x39
 800964c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009650:	d108      	bne.n	8009664 <_dtoa_r+0x6bc>
 8009652:	459b      	cmp	fp, r3
 8009654:	d10a      	bne.n	800966c <_dtoa_r+0x6c4>
 8009656:	9b08      	ldr	r3, [sp, #32]
 8009658:	3301      	adds	r3, #1
 800965a:	9308      	str	r3, [sp, #32]
 800965c:	2330      	movs	r3, #48	; 0x30
 800965e:	f88b 3000 	strb.w	r3, [fp]
 8009662:	465b      	mov	r3, fp
 8009664:	781a      	ldrb	r2, [r3, #0]
 8009666:	3201      	adds	r2, #1
 8009668:	701a      	strb	r2, [r3, #0]
 800966a:	e78c      	b.n	8009586 <_dtoa_r+0x5de>
 800966c:	461d      	mov	r5, r3
 800966e:	e7ea      	b.n	8009646 <_dtoa_r+0x69e>
 8009670:	2200      	movs	r2, #0
 8009672:	4b9b      	ldr	r3, [pc, #620]	; (80098e0 <_dtoa_r+0x938>)
 8009674:	f7f6 ffc8 	bl	8000608 <__aeabi_dmul>
 8009678:	2200      	movs	r2, #0
 800967a:	2300      	movs	r3, #0
 800967c:	4606      	mov	r6, r0
 800967e:	460f      	mov	r7, r1
 8009680:	f7f7 fa2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009684:	2800      	cmp	r0, #0
 8009686:	d09a      	beq.n	80095be <_dtoa_r+0x616>
 8009688:	e7cb      	b.n	8009622 <_dtoa_r+0x67a>
 800968a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800968c:	2a00      	cmp	r2, #0
 800968e:	f000 808b 	beq.w	80097a8 <_dtoa_r+0x800>
 8009692:	9a06      	ldr	r2, [sp, #24]
 8009694:	2a01      	cmp	r2, #1
 8009696:	dc6e      	bgt.n	8009776 <_dtoa_r+0x7ce>
 8009698:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800969a:	2a00      	cmp	r2, #0
 800969c:	d067      	beq.n	800976e <_dtoa_r+0x7c6>
 800969e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80096a2:	9f07      	ldr	r7, [sp, #28]
 80096a4:	9d05      	ldr	r5, [sp, #20]
 80096a6:	9a05      	ldr	r2, [sp, #20]
 80096a8:	2101      	movs	r1, #1
 80096aa:	441a      	add	r2, r3
 80096ac:	4620      	mov	r0, r4
 80096ae:	9205      	str	r2, [sp, #20]
 80096b0:	4498      	add	r8, r3
 80096b2:	f000 fe9e 	bl	800a3f2 <__i2b>
 80096b6:	4606      	mov	r6, r0
 80096b8:	2d00      	cmp	r5, #0
 80096ba:	dd0c      	ble.n	80096d6 <_dtoa_r+0x72e>
 80096bc:	f1b8 0f00 	cmp.w	r8, #0
 80096c0:	dd09      	ble.n	80096d6 <_dtoa_r+0x72e>
 80096c2:	4545      	cmp	r5, r8
 80096c4:	9a05      	ldr	r2, [sp, #20]
 80096c6:	462b      	mov	r3, r5
 80096c8:	bfa8      	it	ge
 80096ca:	4643      	movge	r3, r8
 80096cc:	1ad2      	subs	r2, r2, r3
 80096ce:	9205      	str	r2, [sp, #20]
 80096d0:	1aed      	subs	r5, r5, r3
 80096d2:	eba8 0803 	sub.w	r8, r8, r3
 80096d6:	9b07      	ldr	r3, [sp, #28]
 80096d8:	b1eb      	cbz	r3, 8009716 <_dtoa_r+0x76e>
 80096da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d067      	beq.n	80097b0 <_dtoa_r+0x808>
 80096e0:	b18f      	cbz	r7, 8009706 <_dtoa_r+0x75e>
 80096e2:	4631      	mov	r1, r6
 80096e4:	463a      	mov	r2, r7
 80096e6:	4620      	mov	r0, r4
 80096e8:	f000 ff22 	bl	800a530 <__pow5mult>
 80096ec:	9a04      	ldr	r2, [sp, #16]
 80096ee:	4601      	mov	r1, r0
 80096f0:	4606      	mov	r6, r0
 80096f2:	4620      	mov	r0, r4
 80096f4:	f000 fe86 	bl	800a404 <__multiply>
 80096f8:	9904      	ldr	r1, [sp, #16]
 80096fa:	9008      	str	r0, [sp, #32]
 80096fc:	4620      	mov	r0, r4
 80096fe:	f000 fd9a 	bl	800a236 <_Bfree>
 8009702:	9b08      	ldr	r3, [sp, #32]
 8009704:	9304      	str	r3, [sp, #16]
 8009706:	9b07      	ldr	r3, [sp, #28]
 8009708:	1bda      	subs	r2, r3, r7
 800970a:	d004      	beq.n	8009716 <_dtoa_r+0x76e>
 800970c:	9904      	ldr	r1, [sp, #16]
 800970e:	4620      	mov	r0, r4
 8009710:	f000 ff0e 	bl	800a530 <__pow5mult>
 8009714:	9004      	str	r0, [sp, #16]
 8009716:	2101      	movs	r1, #1
 8009718:	4620      	mov	r0, r4
 800971a:	f000 fe6a 	bl	800a3f2 <__i2b>
 800971e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009720:	4607      	mov	r7, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	f000 81d0 	beq.w	8009ac8 <_dtoa_r+0xb20>
 8009728:	461a      	mov	r2, r3
 800972a:	4601      	mov	r1, r0
 800972c:	4620      	mov	r0, r4
 800972e:	f000 feff 	bl	800a530 <__pow5mult>
 8009732:	9b06      	ldr	r3, [sp, #24]
 8009734:	2b01      	cmp	r3, #1
 8009736:	4607      	mov	r7, r0
 8009738:	dc40      	bgt.n	80097bc <_dtoa_r+0x814>
 800973a:	9b00      	ldr	r3, [sp, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d139      	bne.n	80097b4 <_dtoa_r+0x80c>
 8009740:	9b01      	ldr	r3, [sp, #4]
 8009742:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009746:	2b00      	cmp	r3, #0
 8009748:	d136      	bne.n	80097b8 <_dtoa_r+0x810>
 800974a:	9b01      	ldr	r3, [sp, #4]
 800974c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009750:	0d1b      	lsrs	r3, r3, #20
 8009752:	051b      	lsls	r3, r3, #20
 8009754:	b12b      	cbz	r3, 8009762 <_dtoa_r+0x7ba>
 8009756:	9b05      	ldr	r3, [sp, #20]
 8009758:	3301      	adds	r3, #1
 800975a:	9305      	str	r3, [sp, #20]
 800975c:	f108 0801 	add.w	r8, r8, #1
 8009760:	2301      	movs	r3, #1
 8009762:	9307      	str	r3, [sp, #28]
 8009764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009766:	2b00      	cmp	r3, #0
 8009768:	d12a      	bne.n	80097c0 <_dtoa_r+0x818>
 800976a:	2001      	movs	r0, #1
 800976c:	e030      	b.n	80097d0 <_dtoa_r+0x828>
 800976e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009770:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009774:	e795      	b.n	80096a2 <_dtoa_r+0x6fa>
 8009776:	9b07      	ldr	r3, [sp, #28]
 8009778:	f109 37ff 	add.w	r7, r9, #4294967295
 800977c:	42bb      	cmp	r3, r7
 800977e:	bfbf      	itttt	lt
 8009780:	9b07      	ldrlt	r3, [sp, #28]
 8009782:	9707      	strlt	r7, [sp, #28]
 8009784:	1afa      	sublt	r2, r7, r3
 8009786:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009788:	bfbb      	ittet	lt
 800978a:	189b      	addlt	r3, r3, r2
 800978c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800978e:	1bdf      	subge	r7, r3, r7
 8009790:	2700      	movlt	r7, #0
 8009792:	f1b9 0f00 	cmp.w	r9, #0
 8009796:	bfb5      	itete	lt
 8009798:	9b05      	ldrlt	r3, [sp, #20]
 800979a:	9d05      	ldrge	r5, [sp, #20]
 800979c:	eba3 0509 	sublt.w	r5, r3, r9
 80097a0:	464b      	movge	r3, r9
 80097a2:	bfb8      	it	lt
 80097a4:	2300      	movlt	r3, #0
 80097a6:	e77e      	b.n	80096a6 <_dtoa_r+0x6fe>
 80097a8:	9f07      	ldr	r7, [sp, #28]
 80097aa:	9d05      	ldr	r5, [sp, #20]
 80097ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80097ae:	e783      	b.n	80096b8 <_dtoa_r+0x710>
 80097b0:	9a07      	ldr	r2, [sp, #28]
 80097b2:	e7ab      	b.n	800970c <_dtoa_r+0x764>
 80097b4:	2300      	movs	r3, #0
 80097b6:	e7d4      	b.n	8009762 <_dtoa_r+0x7ba>
 80097b8:	9b00      	ldr	r3, [sp, #0]
 80097ba:	e7d2      	b.n	8009762 <_dtoa_r+0x7ba>
 80097bc:	2300      	movs	r3, #0
 80097be:	9307      	str	r3, [sp, #28]
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80097c6:	6918      	ldr	r0, [r3, #16]
 80097c8:	f000 fdc5 	bl	800a356 <__hi0bits>
 80097cc:	f1c0 0020 	rsb	r0, r0, #32
 80097d0:	4440      	add	r0, r8
 80097d2:	f010 001f 	ands.w	r0, r0, #31
 80097d6:	d047      	beq.n	8009868 <_dtoa_r+0x8c0>
 80097d8:	f1c0 0320 	rsb	r3, r0, #32
 80097dc:	2b04      	cmp	r3, #4
 80097de:	dd3b      	ble.n	8009858 <_dtoa_r+0x8b0>
 80097e0:	9b05      	ldr	r3, [sp, #20]
 80097e2:	f1c0 001c 	rsb	r0, r0, #28
 80097e6:	4403      	add	r3, r0
 80097e8:	9305      	str	r3, [sp, #20]
 80097ea:	4405      	add	r5, r0
 80097ec:	4480      	add	r8, r0
 80097ee:	9b05      	ldr	r3, [sp, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	dd05      	ble.n	8009800 <_dtoa_r+0x858>
 80097f4:	461a      	mov	r2, r3
 80097f6:	9904      	ldr	r1, [sp, #16]
 80097f8:	4620      	mov	r0, r4
 80097fa:	f000 fee7 	bl	800a5cc <__lshift>
 80097fe:	9004      	str	r0, [sp, #16]
 8009800:	f1b8 0f00 	cmp.w	r8, #0
 8009804:	dd05      	ble.n	8009812 <_dtoa_r+0x86a>
 8009806:	4639      	mov	r1, r7
 8009808:	4642      	mov	r2, r8
 800980a:	4620      	mov	r0, r4
 800980c:	f000 fede 	bl	800a5cc <__lshift>
 8009810:	4607      	mov	r7, r0
 8009812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009814:	b353      	cbz	r3, 800986c <_dtoa_r+0x8c4>
 8009816:	4639      	mov	r1, r7
 8009818:	9804      	ldr	r0, [sp, #16]
 800981a:	f000 ff2b 	bl	800a674 <__mcmp>
 800981e:	2800      	cmp	r0, #0
 8009820:	da24      	bge.n	800986c <_dtoa_r+0x8c4>
 8009822:	2300      	movs	r3, #0
 8009824:	220a      	movs	r2, #10
 8009826:	9904      	ldr	r1, [sp, #16]
 8009828:	4620      	mov	r0, r4
 800982a:	f000 fd1b 	bl	800a264 <__multadd>
 800982e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009830:	9004      	str	r0, [sp, #16]
 8009832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009836:	2b00      	cmp	r3, #0
 8009838:	f000 814d 	beq.w	8009ad6 <_dtoa_r+0xb2e>
 800983c:	2300      	movs	r3, #0
 800983e:	4631      	mov	r1, r6
 8009840:	220a      	movs	r2, #10
 8009842:	4620      	mov	r0, r4
 8009844:	f000 fd0e 	bl	800a264 <__multadd>
 8009848:	9b02      	ldr	r3, [sp, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	4606      	mov	r6, r0
 800984e:	dc4f      	bgt.n	80098f0 <_dtoa_r+0x948>
 8009850:	9b06      	ldr	r3, [sp, #24]
 8009852:	2b02      	cmp	r3, #2
 8009854:	dd4c      	ble.n	80098f0 <_dtoa_r+0x948>
 8009856:	e011      	b.n	800987c <_dtoa_r+0x8d4>
 8009858:	d0c9      	beq.n	80097ee <_dtoa_r+0x846>
 800985a:	9a05      	ldr	r2, [sp, #20]
 800985c:	331c      	adds	r3, #28
 800985e:	441a      	add	r2, r3
 8009860:	9205      	str	r2, [sp, #20]
 8009862:	441d      	add	r5, r3
 8009864:	4498      	add	r8, r3
 8009866:	e7c2      	b.n	80097ee <_dtoa_r+0x846>
 8009868:	4603      	mov	r3, r0
 800986a:	e7f6      	b.n	800985a <_dtoa_r+0x8b2>
 800986c:	f1b9 0f00 	cmp.w	r9, #0
 8009870:	dc38      	bgt.n	80098e4 <_dtoa_r+0x93c>
 8009872:	9b06      	ldr	r3, [sp, #24]
 8009874:	2b02      	cmp	r3, #2
 8009876:	dd35      	ble.n	80098e4 <_dtoa_r+0x93c>
 8009878:	f8cd 9008 	str.w	r9, [sp, #8]
 800987c:	9b02      	ldr	r3, [sp, #8]
 800987e:	b963      	cbnz	r3, 800989a <_dtoa_r+0x8f2>
 8009880:	4639      	mov	r1, r7
 8009882:	2205      	movs	r2, #5
 8009884:	4620      	mov	r0, r4
 8009886:	f000 fced 	bl	800a264 <__multadd>
 800988a:	4601      	mov	r1, r0
 800988c:	4607      	mov	r7, r0
 800988e:	9804      	ldr	r0, [sp, #16]
 8009890:	f000 fef0 	bl	800a674 <__mcmp>
 8009894:	2800      	cmp	r0, #0
 8009896:	f73f adcc 	bgt.w	8009432 <_dtoa_r+0x48a>
 800989a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800989c:	465d      	mov	r5, fp
 800989e:	ea6f 0a03 	mvn.w	sl, r3
 80098a2:	f04f 0900 	mov.w	r9, #0
 80098a6:	4639      	mov	r1, r7
 80098a8:	4620      	mov	r0, r4
 80098aa:	f000 fcc4 	bl	800a236 <_Bfree>
 80098ae:	2e00      	cmp	r6, #0
 80098b0:	f43f aeb7 	beq.w	8009622 <_dtoa_r+0x67a>
 80098b4:	f1b9 0f00 	cmp.w	r9, #0
 80098b8:	d005      	beq.n	80098c6 <_dtoa_r+0x91e>
 80098ba:	45b1      	cmp	r9, r6
 80098bc:	d003      	beq.n	80098c6 <_dtoa_r+0x91e>
 80098be:	4649      	mov	r1, r9
 80098c0:	4620      	mov	r0, r4
 80098c2:	f000 fcb8 	bl	800a236 <_Bfree>
 80098c6:	4631      	mov	r1, r6
 80098c8:	4620      	mov	r0, r4
 80098ca:	f000 fcb4 	bl	800a236 <_Bfree>
 80098ce:	e6a8      	b.n	8009622 <_dtoa_r+0x67a>
 80098d0:	2700      	movs	r7, #0
 80098d2:	463e      	mov	r6, r7
 80098d4:	e7e1      	b.n	800989a <_dtoa_r+0x8f2>
 80098d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80098da:	463e      	mov	r6, r7
 80098dc:	e5a9      	b.n	8009432 <_dtoa_r+0x48a>
 80098de:	bf00      	nop
 80098e0:	40240000 	.word	0x40240000
 80098e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 80fa 	beq.w	8009ae4 <_dtoa_r+0xb3c>
 80098f0:	2d00      	cmp	r5, #0
 80098f2:	dd05      	ble.n	8009900 <_dtoa_r+0x958>
 80098f4:	4631      	mov	r1, r6
 80098f6:	462a      	mov	r2, r5
 80098f8:	4620      	mov	r0, r4
 80098fa:	f000 fe67 	bl	800a5cc <__lshift>
 80098fe:	4606      	mov	r6, r0
 8009900:	9b07      	ldr	r3, [sp, #28]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d04c      	beq.n	80099a0 <_dtoa_r+0x9f8>
 8009906:	6871      	ldr	r1, [r6, #4]
 8009908:	4620      	mov	r0, r4
 800990a:	f000 fc60 	bl	800a1ce <_Balloc>
 800990e:	6932      	ldr	r2, [r6, #16]
 8009910:	3202      	adds	r2, #2
 8009912:	4605      	mov	r5, r0
 8009914:	0092      	lsls	r2, r2, #2
 8009916:	f106 010c 	add.w	r1, r6, #12
 800991a:	300c      	adds	r0, #12
 800991c:	f000 fc4c 	bl	800a1b8 <memcpy>
 8009920:	2201      	movs	r2, #1
 8009922:	4629      	mov	r1, r5
 8009924:	4620      	mov	r0, r4
 8009926:	f000 fe51 	bl	800a5cc <__lshift>
 800992a:	9b00      	ldr	r3, [sp, #0]
 800992c:	f8cd b014 	str.w	fp, [sp, #20]
 8009930:	f003 0301 	and.w	r3, r3, #1
 8009934:	46b1      	mov	r9, r6
 8009936:	9307      	str	r3, [sp, #28]
 8009938:	4606      	mov	r6, r0
 800993a:	4639      	mov	r1, r7
 800993c:	9804      	ldr	r0, [sp, #16]
 800993e:	f7ff faa7 	bl	8008e90 <quorem>
 8009942:	4649      	mov	r1, r9
 8009944:	4605      	mov	r5, r0
 8009946:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800994a:	9804      	ldr	r0, [sp, #16]
 800994c:	f000 fe92 	bl	800a674 <__mcmp>
 8009950:	4632      	mov	r2, r6
 8009952:	9000      	str	r0, [sp, #0]
 8009954:	4639      	mov	r1, r7
 8009956:	4620      	mov	r0, r4
 8009958:	f000 fea6 	bl	800a6a8 <__mdiff>
 800995c:	68c3      	ldr	r3, [r0, #12]
 800995e:	4602      	mov	r2, r0
 8009960:	bb03      	cbnz	r3, 80099a4 <_dtoa_r+0x9fc>
 8009962:	4601      	mov	r1, r0
 8009964:	9008      	str	r0, [sp, #32]
 8009966:	9804      	ldr	r0, [sp, #16]
 8009968:	f000 fe84 	bl	800a674 <__mcmp>
 800996c:	9a08      	ldr	r2, [sp, #32]
 800996e:	4603      	mov	r3, r0
 8009970:	4611      	mov	r1, r2
 8009972:	4620      	mov	r0, r4
 8009974:	9308      	str	r3, [sp, #32]
 8009976:	f000 fc5e 	bl	800a236 <_Bfree>
 800997a:	9b08      	ldr	r3, [sp, #32]
 800997c:	b9a3      	cbnz	r3, 80099a8 <_dtoa_r+0xa00>
 800997e:	9a06      	ldr	r2, [sp, #24]
 8009980:	b992      	cbnz	r2, 80099a8 <_dtoa_r+0xa00>
 8009982:	9a07      	ldr	r2, [sp, #28]
 8009984:	b982      	cbnz	r2, 80099a8 <_dtoa_r+0xa00>
 8009986:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800998a:	d029      	beq.n	80099e0 <_dtoa_r+0xa38>
 800998c:	9b00      	ldr	r3, [sp, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	dd01      	ble.n	8009996 <_dtoa_r+0x9ee>
 8009992:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009996:	9b05      	ldr	r3, [sp, #20]
 8009998:	1c5d      	adds	r5, r3, #1
 800999a:	f883 8000 	strb.w	r8, [r3]
 800999e:	e782      	b.n	80098a6 <_dtoa_r+0x8fe>
 80099a0:	4630      	mov	r0, r6
 80099a2:	e7c2      	b.n	800992a <_dtoa_r+0x982>
 80099a4:	2301      	movs	r3, #1
 80099a6:	e7e3      	b.n	8009970 <_dtoa_r+0x9c8>
 80099a8:	9a00      	ldr	r2, [sp, #0]
 80099aa:	2a00      	cmp	r2, #0
 80099ac:	db04      	blt.n	80099b8 <_dtoa_r+0xa10>
 80099ae:	d125      	bne.n	80099fc <_dtoa_r+0xa54>
 80099b0:	9a06      	ldr	r2, [sp, #24]
 80099b2:	bb1a      	cbnz	r2, 80099fc <_dtoa_r+0xa54>
 80099b4:	9a07      	ldr	r2, [sp, #28]
 80099b6:	bb0a      	cbnz	r2, 80099fc <_dtoa_r+0xa54>
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	ddec      	ble.n	8009996 <_dtoa_r+0x9ee>
 80099bc:	2201      	movs	r2, #1
 80099be:	9904      	ldr	r1, [sp, #16]
 80099c0:	4620      	mov	r0, r4
 80099c2:	f000 fe03 	bl	800a5cc <__lshift>
 80099c6:	4639      	mov	r1, r7
 80099c8:	9004      	str	r0, [sp, #16]
 80099ca:	f000 fe53 	bl	800a674 <__mcmp>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	dc03      	bgt.n	80099da <_dtoa_r+0xa32>
 80099d2:	d1e0      	bne.n	8009996 <_dtoa_r+0x9ee>
 80099d4:	f018 0f01 	tst.w	r8, #1
 80099d8:	d0dd      	beq.n	8009996 <_dtoa_r+0x9ee>
 80099da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80099de:	d1d8      	bne.n	8009992 <_dtoa_r+0x9ea>
 80099e0:	9b05      	ldr	r3, [sp, #20]
 80099e2:	9a05      	ldr	r2, [sp, #20]
 80099e4:	1c5d      	adds	r5, r3, #1
 80099e6:	2339      	movs	r3, #57	; 0x39
 80099e8:	7013      	strb	r3, [r2, #0]
 80099ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099ee:	2b39      	cmp	r3, #57	; 0x39
 80099f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80099f4:	d04f      	beq.n	8009a96 <_dtoa_r+0xaee>
 80099f6:	3301      	adds	r3, #1
 80099f8:	7013      	strb	r3, [r2, #0]
 80099fa:	e754      	b.n	80098a6 <_dtoa_r+0x8fe>
 80099fc:	9a05      	ldr	r2, [sp, #20]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f102 0501 	add.w	r5, r2, #1
 8009a04:	dd06      	ble.n	8009a14 <_dtoa_r+0xa6c>
 8009a06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009a0a:	d0e9      	beq.n	80099e0 <_dtoa_r+0xa38>
 8009a0c:	f108 0801 	add.w	r8, r8, #1
 8009a10:	9b05      	ldr	r3, [sp, #20]
 8009a12:	e7c2      	b.n	800999a <_dtoa_r+0x9f2>
 8009a14:	9a02      	ldr	r2, [sp, #8]
 8009a16:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009a1a:	eba5 030b 	sub.w	r3, r5, fp
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d021      	beq.n	8009a66 <_dtoa_r+0xabe>
 8009a22:	2300      	movs	r3, #0
 8009a24:	220a      	movs	r2, #10
 8009a26:	9904      	ldr	r1, [sp, #16]
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f000 fc1b 	bl	800a264 <__multadd>
 8009a2e:	45b1      	cmp	r9, r6
 8009a30:	9004      	str	r0, [sp, #16]
 8009a32:	f04f 0300 	mov.w	r3, #0
 8009a36:	f04f 020a 	mov.w	r2, #10
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	d105      	bne.n	8009a4c <_dtoa_r+0xaa4>
 8009a40:	f000 fc10 	bl	800a264 <__multadd>
 8009a44:	4681      	mov	r9, r0
 8009a46:	4606      	mov	r6, r0
 8009a48:	9505      	str	r5, [sp, #20]
 8009a4a:	e776      	b.n	800993a <_dtoa_r+0x992>
 8009a4c:	f000 fc0a 	bl	800a264 <__multadd>
 8009a50:	4631      	mov	r1, r6
 8009a52:	4681      	mov	r9, r0
 8009a54:	2300      	movs	r3, #0
 8009a56:	220a      	movs	r2, #10
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f000 fc03 	bl	800a264 <__multadd>
 8009a5e:	4606      	mov	r6, r0
 8009a60:	e7f2      	b.n	8009a48 <_dtoa_r+0xaa0>
 8009a62:	f04f 0900 	mov.w	r9, #0
 8009a66:	2201      	movs	r2, #1
 8009a68:	9904      	ldr	r1, [sp, #16]
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 fdae 	bl	800a5cc <__lshift>
 8009a70:	4639      	mov	r1, r7
 8009a72:	9004      	str	r0, [sp, #16]
 8009a74:	f000 fdfe 	bl	800a674 <__mcmp>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	dcb6      	bgt.n	80099ea <_dtoa_r+0xa42>
 8009a7c:	d102      	bne.n	8009a84 <_dtoa_r+0xadc>
 8009a7e:	f018 0f01 	tst.w	r8, #1
 8009a82:	d1b2      	bne.n	80099ea <_dtoa_r+0xa42>
 8009a84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a88:	2b30      	cmp	r3, #48	; 0x30
 8009a8a:	f105 32ff 	add.w	r2, r5, #4294967295
 8009a8e:	f47f af0a 	bne.w	80098a6 <_dtoa_r+0x8fe>
 8009a92:	4615      	mov	r5, r2
 8009a94:	e7f6      	b.n	8009a84 <_dtoa_r+0xadc>
 8009a96:	4593      	cmp	fp, r2
 8009a98:	d105      	bne.n	8009aa6 <_dtoa_r+0xafe>
 8009a9a:	2331      	movs	r3, #49	; 0x31
 8009a9c:	f10a 0a01 	add.w	sl, sl, #1
 8009aa0:	f88b 3000 	strb.w	r3, [fp]
 8009aa4:	e6ff      	b.n	80098a6 <_dtoa_r+0x8fe>
 8009aa6:	4615      	mov	r5, r2
 8009aa8:	e79f      	b.n	80099ea <_dtoa_r+0xa42>
 8009aaa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009b10 <_dtoa_r+0xb68>
 8009aae:	e007      	b.n	8009ac0 <_dtoa_r+0xb18>
 8009ab0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ab2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009b14 <_dtoa_r+0xb6c>
 8009ab6:	b11b      	cbz	r3, 8009ac0 <_dtoa_r+0xb18>
 8009ab8:	f10b 0308 	add.w	r3, fp, #8
 8009abc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009abe:	6013      	str	r3, [r2, #0]
 8009ac0:	4658      	mov	r0, fp
 8009ac2:	b017      	add	sp, #92	; 0x5c
 8009ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac8:	9b06      	ldr	r3, [sp, #24]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	f77f ae35 	ble.w	800973a <_dtoa_r+0x792>
 8009ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ad2:	9307      	str	r3, [sp, #28]
 8009ad4:	e649      	b.n	800976a <_dtoa_r+0x7c2>
 8009ad6:	9b02      	ldr	r3, [sp, #8]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	dc03      	bgt.n	8009ae4 <_dtoa_r+0xb3c>
 8009adc:	9b06      	ldr	r3, [sp, #24]
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	f73f aecc 	bgt.w	800987c <_dtoa_r+0x8d4>
 8009ae4:	465d      	mov	r5, fp
 8009ae6:	4639      	mov	r1, r7
 8009ae8:	9804      	ldr	r0, [sp, #16]
 8009aea:	f7ff f9d1 	bl	8008e90 <quorem>
 8009aee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009af2:	f805 8b01 	strb.w	r8, [r5], #1
 8009af6:	9a02      	ldr	r2, [sp, #8]
 8009af8:	eba5 030b 	sub.w	r3, r5, fp
 8009afc:	429a      	cmp	r2, r3
 8009afe:	ddb0      	ble.n	8009a62 <_dtoa_r+0xaba>
 8009b00:	2300      	movs	r3, #0
 8009b02:	220a      	movs	r2, #10
 8009b04:	9904      	ldr	r1, [sp, #16]
 8009b06:	4620      	mov	r0, r4
 8009b08:	f000 fbac 	bl	800a264 <__multadd>
 8009b0c:	9004      	str	r0, [sp, #16]
 8009b0e:	e7ea      	b.n	8009ae6 <_dtoa_r+0xb3e>
 8009b10:	0800b274 	.word	0x0800b274
 8009b14:	0800b2e8 	.word	0x0800b2e8

08009b18 <rshift>:
 8009b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b1a:	6906      	ldr	r6, [r0, #16]
 8009b1c:	114b      	asrs	r3, r1, #5
 8009b1e:	429e      	cmp	r6, r3
 8009b20:	f100 0414 	add.w	r4, r0, #20
 8009b24:	dd30      	ble.n	8009b88 <rshift+0x70>
 8009b26:	f011 011f 	ands.w	r1, r1, #31
 8009b2a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009b2e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009b32:	d108      	bne.n	8009b46 <rshift+0x2e>
 8009b34:	4621      	mov	r1, r4
 8009b36:	42b2      	cmp	r2, r6
 8009b38:	460b      	mov	r3, r1
 8009b3a:	d211      	bcs.n	8009b60 <rshift+0x48>
 8009b3c:	f852 3b04 	ldr.w	r3, [r2], #4
 8009b40:	f841 3b04 	str.w	r3, [r1], #4
 8009b44:	e7f7      	b.n	8009b36 <rshift+0x1e>
 8009b46:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009b4a:	f1c1 0c20 	rsb	ip, r1, #32
 8009b4e:	40cd      	lsrs	r5, r1
 8009b50:	3204      	adds	r2, #4
 8009b52:	4623      	mov	r3, r4
 8009b54:	42b2      	cmp	r2, r6
 8009b56:	4617      	mov	r7, r2
 8009b58:	d30c      	bcc.n	8009b74 <rshift+0x5c>
 8009b5a:	601d      	str	r5, [r3, #0]
 8009b5c:	b105      	cbz	r5, 8009b60 <rshift+0x48>
 8009b5e:	3304      	adds	r3, #4
 8009b60:	1b1a      	subs	r2, r3, r4
 8009b62:	42a3      	cmp	r3, r4
 8009b64:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b68:	bf08      	it	eq
 8009b6a:	2300      	moveq	r3, #0
 8009b6c:	6102      	str	r2, [r0, #16]
 8009b6e:	bf08      	it	eq
 8009b70:	6143      	streq	r3, [r0, #20]
 8009b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b74:	683f      	ldr	r7, [r7, #0]
 8009b76:	fa07 f70c 	lsl.w	r7, r7, ip
 8009b7a:	433d      	orrs	r5, r7
 8009b7c:	f843 5b04 	str.w	r5, [r3], #4
 8009b80:	f852 5b04 	ldr.w	r5, [r2], #4
 8009b84:	40cd      	lsrs	r5, r1
 8009b86:	e7e5      	b.n	8009b54 <rshift+0x3c>
 8009b88:	4623      	mov	r3, r4
 8009b8a:	e7e9      	b.n	8009b60 <rshift+0x48>

08009b8c <__hexdig_fun>:
 8009b8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b90:	2b09      	cmp	r3, #9
 8009b92:	d802      	bhi.n	8009b9a <__hexdig_fun+0xe>
 8009b94:	3820      	subs	r0, #32
 8009b96:	b2c0      	uxtb	r0, r0
 8009b98:	4770      	bx	lr
 8009b9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009b9e:	2b05      	cmp	r3, #5
 8009ba0:	d801      	bhi.n	8009ba6 <__hexdig_fun+0x1a>
 8009ba2:	3847      	subs	r0, #71	; 0x47
 8009ba4:	e7f7      	b.n	8009b96 <__hexdig_fun+0xa>
 8009ba6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009baa:	2b05      	cmp	r3, #5
 8009bac:	d801      	bhi.n	8009bb2 <__hexdig_fun+0x26>
 8009bae:	3827      	subs	r0, #39	; 0x27
 8009bb0:	e7f1      	b.n	8009b96 <__hexdig_fun+0xa>
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	4770      	bx	lr

08009bb6 <__gethex>:
 8009bb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bba:	b08b      	sub	sp, #44	; 0x2c
 8009bbc:	468a      	mov	sl, r1
 8009bbe:	9002      	str	r0, [sp, #8]
 8009bc0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009bc2:	9306      	str	r3, [sp, #24]
 8009bc4:	4690      	mov	r8, r2
 8009bc6:	f000 facd 	bl	800a164 <__localeconv_l>
 8009bca:	6803      	ldr	r3, [r0, #0]
 8009bcc:	9303      	str	r3, [sp, #12]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7f6 fb06 	bl	80001e0 <strlen>
 8009bd4:	9b03      	ldr	r3, [sp, #12]
 8009bd6:	9001      	str	r0, [sp, #4]
 8009bd8:	4403      	add	r3, r0
 8009bda:	f04f 0b00 	mov.w	fp, #0
 8009bde:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009be2:	9307      	str	r3, [sp, #28]
 8009be4:	f8da 3000 	ldr.w	r3, [sl]
 8009be8:	3302      	adds	r3, #2
 8009bea:	461f      	mov	r7, r3
 8009bec:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009bf0:	2830      	cmp	r0, #48	; 0x30
 8009bf2:	d06c      	beq.n	8009cce <__gethex+0x118>
 8009bf4:	f7ff ffca 	bl	8009b8c <__hexdig_fun>
 8009bf8:	4604      	mov	r4, r0
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d16a      	bne.n	8009cd4 <__gethex+0x11e>
 8009bfe:	9a01      	ldr	r2, [sp, #4]
 8009c00:	9903      	ldr	r1, [sp, #12]
 8009c02:	4638      	mov	r0, r7
 8009c04:	f001 f8fa 	bl	800adfc <strncmp>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d166      	bne.n	8009cda <__gethex+0x124>
 8009c0c:	9b01      	ldr	r3, [sp, #4]
 8009c0e:	5cf8      	ldrb	r0, [r7, r3]
 8009c10:	18fe      	adds	r6, r7, r3
 8009c12:	f7ff ffbb 	bl	8009b8c <__hexdig_fun>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	d062      	beq.n	8009ce0 <__gethex+0x12a>
 8009c1a:	4633      	mov	r3, r6
 8009c1c:	7818      	ldrb	r0, [r3, #0]
 8009c1e:	2830      	cmp	r0, #48	; 0x30
 8009c20:	461f      	mov	r7, r3
 8009c22:	f103 0301 	add.w	r3, r3, #1
 8009c26:	d0f9      	beq.n	8009c1c <__gethex+0x66>
 8009c28:	f7ff ffb0 	bl	8009b8c <__hexdig_fun>
 8009c2c:	fab0 f580 	clz	r5, r0
 8009c30:	096d      	lsrs	r5, r5, #5
 8009c32:	4634      	mov	r4, r6
 8009c34:	f04f 0b01 	mov.w	fp, #1
 8009c38:	463a      	mov	r2, r7
 8009c3a:	4616      	mov	r6, r2
 8009c3c:	3201      	adds	r2, #1
 8009c3e:	7830      	ldrb	r0, [r6, #0]
 8009c40:	f7ff ffa4 	bl	8009b8c <__hexdig_fun>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	d1f8      	bne.n	8009c3a <__gethex+0x84>
 8009c48:	9a01      	ldr	r2, [sp, #4]
 8009c4a:	9903      	ldr	r1, [sp, #12]
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f001 f8d5 	bl	800adfc <strncmp>
 8009c52:	b950      	cbnz	r0, 8009c6a <__gethex+0xb4>
 8009c54:	b954      	cbnz	r4, 8009c6c <__gethex+0xb6>
 8009c56:	9b01      	ldr	r3, [sp, #4]
 8009c58:	18f4      	adds	r4, r6, r3
 8009c5a:	4622      	mov	r2, r4
 8009c5c:	4616      	mov	r6, r2
 8009c5e:	3201      	adds	r2, #1
 8009c60:	7830      	ldrb	r0, [r6, #0]
 8009c62:	f7ff ff93 	bl	8009b8c <__hexdig_fun>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	d1f8      	bne.n	8009c5c <__gethex+0xa6>
 8009c6a:	b10c      	cbz	r4, 8009c70 <__gethex+0xba>
 8009c6c:	1ba4      	subs	r4, r4, r6
 8009c6e:	00a4      	lsls	r4, r4, #2
 8009c70:	7833      	ldrb	r3, [r6, #0]
 8009c72:	2b50      	cmp	r3, #80	; 0x50
 8009c74:	d001      	beq.n	8009c7a <__gethex+0xc4>
 8009c76:	2b70      	cmp	r3, #112	; 0x70
 8009c78:	d140      	bne.n	8009cfc <__gethex+0x146>
 8009c7a:	7873      	ldrb	r3, [r6, #1]
 8009c7c:	2b2b      	cmp	r3, #43	; 0x2b
 8009c7e:	d031      	beq.n	8009ce4 <__gethex+0x12e>
 8009c80:	2b2d      	cmp	r3, #45	; 0x2d
 8009c82:	d033      	beq.n	8009cec <__gethex+0x136>
 8009c84:	1c71      	adds	r1, r6, #1
 8009c86:	f04f 0900 	mov.w	r9, #0
 8009c8a:	7808      	ldrb	r0, [r1, #0]
 8009c8c:	f7ff ff7e 	bl	8009b8c <__hexdig_fun>
 8009c90:	1e43      	subs	r3, r0, #1
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b18      	cmp	r3, #24
 8009c96:	d831      	bhi.n	8009cfc <__gethex+0x146>
 8009c98:	f1a0 0210 	sub.w	r2, r0, #16
 8009c9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009ca0:	f7ff ff74 	bl	8009b8c <__hexdig_fun>
 8009ca4:	1e43      	subs	r3, r0, #1
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	2b18      	cmp	r3, #24
 8009caa:	d922      	bls.n	8009cf2 <__gethex+0x13c>
 8009cac:	f1b9 0f00 	cmp.w	r9, #0
 8009cb0:	d000      	beq.n	8009cb4 <__gethex+0xfe>
 8009cb2:	4252      	negs	r2, r2
 8009cb4:	4414      	add	r4, r2
 8009cb6:	f8ca 1000 	str.w	r1, [sl]
 8009cba:	b30d      	cbz	r5, 8009d00 <__gethex+0x14a>
 8009cbc:	f1bb 0f00 	cmp.w	fp, #0
 8009cc0:	bf0c      	ite	eq
 8009cc2:	2706      	moveq	r7, #6
 8009cc4:	2700      	movne	r7, #0
 8009cc6:	4638      	mov	r0, r7
 8009cc8:	b00b      	add	sp, #44	; 0x2c
 8009cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cce:	f10b 0b01 	add.w	fp, fp, #1
 8009cd2:	e78a      	b.n	8009bea <__gethex+0x34>
 8009cd4:	2500      	movs	r5, #0
 8009cd6:	462c      	mov	r4, r5
 8009cd8:	e7ae      	b.n	8009c38 <__gethex+0x82>
 8009cda:	463e      	mov	r6, r7
 8009cdc:	2501      	movs	r5, #1
 8009cde:	e7c7      	b.n	8009c70 <__gethex+0xba>
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	e7fb      	b.n	8009cdc <__gethex+0x126>
 8009ce4:	f04f 0900 	mov.w	r9, #0
 8009ce8:	1cb1      	adds	r1, r6, #2
 8009cea:	e7ce      	b.n	8009c8a <__gethex+0xd4>
 8009cec:	f04f 0901 	mov.w	r9, #1
 8009cf0:	e7fa      	b.n	8009ce8 <__gethex+0x132>
 8009cf2:	230a      	movs	r3, #10
 8009cf4:	fb03 0202 	mla	r2, r3, r2, r0
 8009cf8:	3a10      	subs	r2, #16
 8009cfa:	e7cf      	b.n	8009c9c <__gethex+0xe6>
 8009cfc:	4631      	mov	r1, r6
 8009cfe:	e7da      	b.n	8009cb6 <__gethex+0x100>
 8009d00:	1bf3      	subs	r3, r6, r7
 8009d02:	3b01      	subs	r3, #1
 8009d04:	4629      	mov	r1, r5
 8009d06:	2b07      	cmp	r3, #7
 8009d08:	dc49      	bgt.n	8009d9e <__gethex+0x1e8>
 8009d0a:	9802      	ldr	r0, [sp, #8]
 8009d0c:	f000 fa5f 	bl	800a1ce <_Balloc>
 8009d10:	9b01      	ldr	r3, [sp, #4]
 8009d12:	f100 0914 	add.w	r9, r0, #20
 8009d16:	f04f 0b00 	mov.w	fp, #0
 8009d1a:	f1c3 0301 	rsb	r3, r3, #1
 8009d1e:	4605      	mov	r5, r0
 8009d20:	f8cd 9010 	str.w	r9, [sp, #16]
 8009d24:	46da      	mov	sl, fp
 8009d26:	9308      	str	r3, [sp, #32]
 8009d28:	42b7      	cmp	r7, r6
 8009d2a:	d33b      	bcc.n	8009da4 <__gethex+0x1ee>
 8009d2c:	9804      	ldr	r0, [sp, #16]
 8009d2e:	f840 ab04 	str.w	sl, [r0], #4
 8009d32:	eba0 0009 	sub.w	r0, r0, r9
 8009d36:	1080      	asrs	r0, r0, #2
 8009d38:	6128      	str	r0, [r5, #16]
 8009d3a:	0147      	lsls	r7, r0, #5
 8009d3c:	4650      	mov	r0, sl
 8009d3e:	f000 fb0a 	bl	800a356 <__hi0bits>
 8009d42:	f8d8 6000 	ldr.w	r6, [r8]
 8009d46:	1a3f      	subs	r7, r7, r0
 8009d48:	42b7      	cmp	r7, r6
 8009d4a:	dd64      	ble.n	8009e16 <__gethex+0x260>
 8009d4c:	1bbf      	subs	r7, r7, r6
 8009d4e:	4639      	mov	r1, r7
 8009d50:	4628      	mov	r0, r5
 8009d52:	f000 fe19 	bl	800a988 <__any_on>
 8009d56:	4682      	mov	sl, r0
 8009d58:	b178      	cbz	r0, 8009d7a <__gethex+0x1c4>
 8009d5a:	1e7b      	subs	r3, r7, #1
 8009d5c:	1159      	asrs	r1, r3, #5
 8009d5e:	f003 021f 	and.w	r2, r3, #31
 8009d62:	f04f 0a01 	mov.w	sl, #1
 8009d66:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009d6a:	fa0a f202 	lsl.w	r2, sl, r2
 8009d6e:	420a      	tst	r2, r1
 8009d70:	d003      	beq.n	8009d7a <__gethex+0x1c4>
 8009d72:	4553      	cmp	r3, sl
 8009d74:	dc46      	bgt.n	8009e04 <__gethex+0x24e>
 8009d76:	f04f 0a02 	mov.w	sl, #2
 8009d7a:	4639      	mov	r1, r7
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	f7ff fecb 	bl	8009b18 <rshift>
 8009d82:	443c      	add	r4, r7
 8009d84:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d88:	42a3      	cmp	r3, r4
 8009d8a:	da52      	bge.n	8009e32 <__gethex+0x27c>
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	9802      	ldr	r0, [sp, #8]
 8009d90:	f000 fa51 	bl	800a236 <_Bfree>
 8009d94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d96:	2300      	movs	r3, #0
 8009d98:	6013      	str	r3, [r2, #0]
 8009d9a:	27a3      	movs	r7, #163	; 0xa3
 8009d9c:	e793      	b.n	8009cc6 <__gethex+0x110>
 8009d9e:	3101      	adds	r1, #1
 8009da0:	105b      	asrs	r3, r3, #1
 8009da2:	e7b0      	b.n	8009d06 <__gethex+0x150>
 8009da4:	1e73      	subs	r3, r6, #1
 8009da6:	9305      	str	r3, [sp, #20]
 8009da8:	9a07      	ldr	r2, [sp, #28]
 8009daa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d018      	beq.n	8009de4 <__gethex+0x22e>
 8009db2:	f1bb 0f20 	cmp.w	fp, #32
 8009db6:	d107      	bne.n	8009dc8 <__gethex+0x212>
 8009db8:	9b04      	ldr	r3, [sp, #16]
 8009dba:	f8c3 a000 	str.w	sl, [r3]
 8009dbe:	3304      	adds	r3, #4
 8009dc0:	f04f 0a00 	mov.w	sl, #0
 8009dc4:	9304      	str	r3, [sp, #16]
 8009dc6:	46d3      	mov	fp, sl
 8009dc8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009dcc:	f7ff fede 	bl	8009b8c <__hexdig_fun>
 8009dd0:	f000 000f 	and.w	r0, r0, #15
 8009dd4:	fa00 f00b 	lsl.w	r0, r0, fp
 8009dd8:	ea4a 0a00 	orr.w	sl, sl, r0
 8009ddc:	f10b 0b04 	add.w	fp, fp, #4
 8009de0:	9b05      	ldr	r3, [sp, #20]
 8009de2:	e00d      	b.n	8009e00 <__gethex+0x24a>
 8009de4:	9b05      	ldr	r3, [sp, #20]
 8009de6:	9a08      	ldr	r2, [sp, #32]
 8009de8:	4413      	add	r3, r2
 8009dea:	42bb      	cmp	r3, r7
 8009dec:	d3e1      	bcc.n	8009db2 <__gethex+0x1fc>
 8009dee:	4618      	mov	r0, r3
 8009df0:	9a01      	ldr	r2, [sp, #4]
 8009df2:	9903      	ldr	r1, [sp, #12]
 8009df4:	9309      	str	r3, [sp, #36]	; 0x24
 8009df6:	f001 f801 	bl	800adfc <strncmp>
 8009dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	d1d8      	bne.n	8009db2 <__gethex+0x1fc>
 8009e00:	461e      	mov	r6, r3
 8009e02:	e791      	b.n	8009d28 <__gethex+0x172>
 8009e04:	1eb9      	subs	r1, r7, #2
 8009e06:	4628      	mov	r0, r5
 8009e08:	f000 fdbe 	bl	800a988 <__any_on>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d0b2      	beq.n	8009d76 <__gethex+0x1c0>
 8009e10:	f04f 0a03 	mov.w	sl, #3
 8009e14:	e7b1      	b.n	8009d7a <__gethex+0x1c4>
 8009e16:	da09      	bge.n	8009e2c <__gethex+0x276>
 8009e18:	1bf7      	subs	r7, r6, r7
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	463a      	mov	r2, r7
 8009e1e:	9802      	ldr	r0, [sp, #8]
 8009e20:	f000 fbd4 	bl	800a5cc <__lshift>
 8009e24:	1be4      	subs	r4, r4, r7
 8009e26:	4605      	mov	r5, r0
 8009e28:	f100 0914 	add.w	r9, r0, #20
 8009e2c:	f04f 0a00 	mov.w	sl, #0
 8009e30:	e7a8      	b.n	8009d84 <__gethex+0x1ce>
 8009e32:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009e36:	42a0      	cmp	r0, r4
 8009e38:	dd6a      	ble.n	8009f10 <__gethex+0x35a>
 8009e3a:	1b04      	subs	r4, r0, r4
 8009e3c:	42a6      	cmp	r6, r4
 8009e3e:	dc2e      	bgt.n	8009e9e <__gethex+0x2e8>
 8009e40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	d022      	beq.n	8009e8e <__gethex+0x2d8>
 8009e48:	2b03      	cmp	r3, #3
 8009e4a:	d024      	beq.n	8009e96 <__gethex+0x2e0>
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d115      	bne.n	8009e7c <__gethex+0x2c6>
 8009e50:	42a6      	cmp	r6, r4
 8009e52:	d113      	bne.n	8009e7c <__gethex+0x2c6>
 8009e54:	2e01      	cmp	r6, #1
 8009e56:	dc0b      	bgt.n	8009e70 <__gethex+0x2ba>
 8009e58:	9a06      	ldr	r2, [sp, #24]
 8009e5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	2301      	movs	r3, #1
 8009e62:	612b      	str	r3, [r5, #16]
 8009e64:	f8c9 3000 	str.w	r3, [r9]
 8009e68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e6a:	2762      	movs	r7, #98	; 0x62
 8009e6c:	601d      	str	r5, [r3, #0]
 8009e6e:	e72a      	b.n	8009cc6 <__gethex+0x110>
 8009e70:	1e71      	subs	r1, r6, #1
 8009e72:	4628      	mov	r0, r5
 8009e74:	f000 fd88 	bl	800a988 <__any_on>
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d1ed      	bne.n	8009e58 <__gethex+0x2a2>
 8009e7c:	4629      	mov	r1, r5
 8009e7e:	9802      	ldr	r0, [sp, #8]
 8009e80:	f000 f9d9 	bl	800a236 <_Bfree>
 8009e84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e86:	2300      	movs	r3, #0
 8009e88:	6013      	str	r3, [r2, #0]
 8009e8a:	2750      	movs	r7, #80	; 0x50
 8009e8c:	e71b      	b.n	8009cc6 <__gethex+0x110>
 8009e8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d0e1      	beq.n	8009e58 <__gethex+0x2a2>
 8009e94:	e7f2      	b.n	8009e7c <__gethex+0x2c6>
 8009e96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1dd      	bne.n	8009e58 <__gethex+0x2a2>
 8009e9c:	e7ee      	b.n	8009e7c <__gethex+0x2c6>
 8009e9e:	1e67      	subs	r7, r4, #1
 8009ea0:	f1ba 0f00 	cmp.w	sl, #0
 8009ea4:	d131      	bne.n	8009f0a <__gethex+0x354>
 8009ea6:	b127      	cbz	r7, 8009eb2 <__gethex+0x2fc>
 8009ea8:	4639      	mov	r1, r7
 8009eaa:	4628      	mov	r0, r5
 8009eac:	f000 fd6c 	bl	800a988 <__any_on>
 8009eb0:	4682      	mov	sl, r0
 8009eb2:	117a      	asrs	r2, r7, #5
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	f007 071f 	and.w	r7, r7, #31
 8009eba:	fa03 f707 	lsl.w	r7, r3, r7
 8009ebe:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009ec2:	4621      	mov	r1, r4
 8009ec4:	421f      	tst	r7, r3
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	bf18      	it	ne
 8009eca:	f04a 0a02 	orrne.w	sl, sl, #2
 8009ece:	1b36      	subs	r6, r6, r4
 8009ed0:	f7ff fe22 	bl	8009b18 <rshift>
 8009ed4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009ed8:	2702      	movs	r7, #2
 8009eda:	f1ba 0f00 	cmp.w	sl, #0
 8009ede:	d048      	beq.n	8009f72 <__gethex+0x3bc>
 8009ee0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d015      	beq.n	8009f14 <__gethex+0x35e>
 8009ee8:	2b03      	cmp	r3, #3
 8009eea:	d017      	beq.n	8009f1c <__gethex+0x366>
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d109      	bne.n	8009f04 <__gethex+0x34e>
 8009ef0:	f01a 0f02 	tst.w	sl, #2
 8009ef4:	d006      	beq.n	8009f04 <__gethex+0x34e>
 8009ef6:	f8d9 3000 	ldr.w	r3, [r9]
 8009efa:	ea4a 0a03 	orr.w	sl, sl, r3
 8009efe:	f01a 0f01 	tst.w	sl, #1
 8009f02:	d10e      	bne.n	8009f22 <__gethex+0x36c>
 8009f04:	f047 0710 	orr.w	r7, r7, #16
 8009f08:	e033      	b.n	8009f72 <__gethex+0x3bc>
 8009f0a:	f04f 0a01 	mov.w	sl, #1
 8009f0e:	e7d0      	b.n	8009eb2 <__gethex+0x2fc>
 8009f10:	2701      	movs	r7, #1
 8009f12:	e7e2      	b.n	8009eda <__gethex+0x324>
 8009f14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f16:	f1c3 0301 	rsb	r3, r3, #1
 8009f1a:	9315      	str	r3, [sp, #84]	; 0x54
 8009f1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d0f0      	beq.n	8009f04 <__gethex+0x34e>
 8009f22:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009f26:	f105 0314 	add.w	r3, r5, #20
 8009f2a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009f2e:	eb03 010a 	add.w	r1, r3, sl
 8009f32:	f04f 0c00 	mov.w	ip, #0
 8009f36:	4618      	mov	r0, r3
 8009f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009f40:	d01c      	beq.n	8009f7c <__gethex+0x3c6>
 8009f42:	3201      	adds	r2, #1
 8009f44:	6002      	str	r2, [r0, #0]
 8009f46:	2f02      	cmp	r7, #2
 8009f48:	f105 0314 	add.w	r3, r5, #20
 8009f4c:	d138      	bne.n	8009fc0 <__gethex+0x40a>
 8009f4e:	f8d8 2000 	ldr.w	r2, [r8]
 8009f52:	3a01      	subs	r2, #1
 8009f54:	42b2      	cmp	r2, r6
 8009f56:	d10a      	bne.n	8009f6e <__gethex+0x3b8>
 8009f58:	1171      	asrs	r1, r6, #5
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f006 061f 	and.w	r6, r6, #31
 8009f60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f64:	fa02 f606 	lsl.w	r6, r2, r6
 8009f68:	421e      	tst	r6, r3
 8009f6a:	bf18      	it	ne
 8009f6c:	4617      	movne	r7, r2
 8009f6e:	f047 0720 	orr.w	r7, r7, #32
 8009f72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f74:	601d      	str	r5, [r3, #0]
 8009f76:	9b06      	ldr	r3, [sp, #24]
 8009f78:	601c      	str	r4, [r3, #0]
 8009f7a:	e6a4      	b.n	8009cc6 <__gethex+0x110>
 8009f7c:	4299      	cmp	r1, r3
 8009f7e:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f82:	d8d8      	bhi.n	8009f36 <__gethex+0x380>
 8009f84:	68ab      	ldr	r3, [r5, #8]
 8009f86:	4599      	cmp	r9, r3
 8009f88:	db12      	blt.n	8009fb0 <__gethex+0x3fa>
 8009f8a:	6869      	ldr	r1, [r5, #4]
 8009f8c:	9802      	ldr	r0, [sp, #8]
 8009f8e:	3101      	adds	r1, #1
 8009f90:	f000 f91d 	bl	800a1ce <_Balloc>
 8009f94:	692a      	ldr	r2, [r5, #16]
 8009f96:	3202      	adds	r2, #2
 8009f98:	f105 010c 	add.w	r1, r5, #12
 8009f9c:	4683      	mov	fp, r0
 8009f9e:	0092      	lsls	r2, r2, #2
 8009fa0:	300c      	adds	r0, #12
 8009fa2:	f000 f909 	bl	800a1b8 <memcpy>
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	9802      	ldr	r0, [sp, #8]
 8009faa:	f000 f944 	bl	800a236 <_Bfree>
 8009fae:	465d      	mov	r5, fp
 8009fb0:	692b      	ldr	r3, [r5, #16]
 8009fb2:	1c5a      	adds	r2, r3, #1
 8009fb4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009fb8:	612a      	str	r2, [r5, #16]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	615a      	str	r2, [r3, #20]
 8009fbe:	e7c2      	b.n	8009f46 <__gethex+0x390>
 8009fc0:	692a      	ldr	r2, [r5, #16]
 8009fc2:	454a      	cmp	r2, r9
 8009fc4:	dd0b      	ble.n	8009fde <__gethex+0x428>
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	4628      	mov	r0, r5
 8009fca:	f7ff fda5 	bl	8009b18 <rshift>
 8009fce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009fd2:	3401      	adds	r4, #1
 8009fd4:	42a3      	cmp	r3, r4
 8009fd6:	f6ff aed9 	blt.w	8009d8c <__gethex+0x1d6>
 8009fda:	2701      	movs	r7, #1
 8009fdc:	e7c7      	b.n	8009f6e <__gethex+0x3b8>
 8009fde:	f016 061f 	ands.w	r6, r6, #31
 8009fe2:	d0fa      	beq.n	8009fda <__gethex+0x424>
 8009fe4:	449a      	add	sl, r3
 8009fe6:	f1c6 0620 	rsb	r6, r6, #32
 8009fea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009fee:	f000 f9b2 	bl	800a356 <__hi0bits>
 8009ff2:	42b0      	cmp	r0, r6
 8009ff4:	dbe7      	blt.n	8009fc6 <__gethex+0x410>
 8009ff6:	e7f0      	b.n	8009fda <__gethex+0x424>

08009ff8 <L_shift>:
 8009ff8:	f1c2 0208 	rsb	r2, r2, #8
 8009ffc:	0092      	lsls	r2, r2, #2
 8009ffe:	b570      	push	{r4, r5, r6, lr}
 800a000:	f1c2 0620 	rsb	r6, r2, #32
 800a004:	6843      	ldr	r3, [r0, #4]
 800a006:	6804      	ldr	r4, [r0, #0]
 800a008:	fa03 f506 	lsl.w	r5, r3, r6
 800a00c:	432c      	orrs	r4, r5
 800a00e:	40d3      	lsrs	r3, r2
 800a010:	6004      	str	r4, [r0, #0]
 800a012:	f840 3f04 	str.w	r3, [r0, #4]!
 800a016:	4288      	cmp	r0, r1
 800a018:	d3f4      	bcc.n	800a004 <L_shift+0xc>
 800a01a:	bd70      	pop	{r4, r5, r6, pc}

0800a01c <__match>:
 800a01c:	b530      	push	{r4, r5, lr}
 800a01e:	6803      	ldr	r3, [r0, #0]
 800a020:	3301      	adds	r3, #1
 800a022:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a026:	b914      	cbnz	r4, 800a02e <__match+0x12>
 800a028:	6003      	str	r3, [r0, #0]
 800a02a:	2001      	movs	r0, #1
 800a02c:	bd30      	pop	{r4, r5, pc}
 800a02e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a032:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a036:	2d19      	cmp	r5, #25
 800a038:	bf98      	it	ls
 800a03a:	3220      	addls	r2, #32
 800a03c:	42a2      	cmp	r2, r4
 800a03e:	d0f0      	beq.n	800a022 <__match+0x6>
 800a040:	2000      	movs	r0, #0
 800a042:	e7f3      	b.n	800a02c <__match+0x10>

0800a044 <__hexnan>:
 800a044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a048:	680b      	ldr	r3, [r1, #0]
 800a04a:	6801      	ldr	r1, [r0, #0]
 800a04c:	115f      	asrs	r7, r3, #5
 800a04e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a052:	f013 031f 	ands.w	r3, r3, #31
 800a056:	b087      	sub	sp, #28
 800a058:	bf18      	it	ne
 800a05a:	3704      	addne	r7, #4
 800a05c:	2500      	movs	r5, #0
 800a05e:	1f3e      	subs	r6, r7, #4
 800a060:	4682      	mov	sl, r0
 800a062:	4690      	mov	r8, r2
 800a064:	9301      	str	r3, [sp, #4]
 800a066:	f847 5c04 	str.w	r5, [r7, #-4]
 800a06a:	46b1      	mov	r9, r6
 800a06c:	4634      	mov	r4, r6
 800a06e:	9502      	str	r5, [sp, #8]
 800a070:	46ab      	mov	fp, r5
 800a072:	784a      	ldrb	r2, [r1, #1]
 800a074:	1c4b      	adds	r3, r1, #1
 800a076:	9303      	str	r3, [sp, #12]
 800a078:	b342      	cbz	r2, 800a0cc <__hexnan+0x88>
 800a07a:	4610      	mov	r0, r2
 800a07c:	9105      	str	r1, [sp, #20]
 800a07e:	9204      	str	r2, [sp, #16]
 800a080:	f7ff fd84 	bl	8009b8c <__hexdig_fun>
 800a084:	2800      	cmp	r0, #0
 800a086:	d143      	bne.n	800a110 <__hexnan+0xcc>
 800a088:	9a04      	ldr	r2, [sp, #16]
 800a08a:	9905      	ldr	r1, [sp, #20]
 800a08c:	2a20      	cmp	r2, #32
 800a08e:	d818      	bhi.n	800a0c2 <__hexnan+0x7e>
 800a090:	9b02      	ldr	r3, [sp, #8]
 800a092:	459b      	cmp	fp, r3
 800a094:	dd13      	ble.n	800a0be <__hexnan+0x7a>
 800a096:	454c      	cmp	r4, r9
 800a098:	d206      	bcs.n	800a0a8 <__hexnan+0x64>
 800a09a:	2d07      	cmp	r5, #7
 800a09c:	dc04      	bgt.n	800a0a8 <__hexnan+0x64>
 800a09e:	462a      	mov	r2, r5
 800a0a0:	4649      	mov	r1, r9
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f7ff ffa8 	bl	8009ff8 <L_shift>
 800a0a8:	4544      	cmp	r4, r8
 800a0aa:	d944      	bls.n	800a136 <__hexnan+0xf2>
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f1a4 0904 	sub.w	r9, r4, #4
 800a0b2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0b6:	f8cd b008 	str.w	fp, [sp, #8]
 800a0ba:	464c      	mov	r4, r9
 800a0bc:	461d      	mov	r5, r3
 800a0be:	9903      	ldr	r1, [sp, #12]
 800a0c0:	e7d7      	b.n	800a072 <__hexnan+0x2e>
 800a0c2:	2a29      	cmp	r2, #41	; 0x29
 800a0c4:	d14a      	bne.n	800a15c <__hexnan+0x118>
 800a0c6:	3102      	adds	r1, #2
 800a0c8:	f8ca 1000 	str.w	r1, [sl]
 800a0cc:	f1bb 0f00 	cmp.w	fp, #0
 800a0d0:	d044      	beq.n	800a15c <__hexnan+0x118>
 800a0d2:	454c      	cmp	r4, r9
 800a0d4:	d206      	bcs.n	800a0e4 <__hexnan+0xa0>
 800a0d6:	2d07      	cmp	r5, #7
 800a0d8:	dc04      	bgt.n	800a0e4 <__hexnan+0xa0>
 800a0da:	462a      	mov	r2, r5
 800a0dc:	4649      	mov	r1, r9
 800a0de:	4620      	mov	r0, r4
 800a0e0:	f7ff ff8a 	bl	8009ff8 <L_shift>
 800a0e4:	4544      	cmp	r4, r8
 800a0e6:	d928      	bls.n	800a13a <__hexnan+0xf6>
 800a0e8:	4643      	mov	r3, r8
 800a0ea:	f854 2b04 	ldr.w	r2, [r4], #4
 800a0ee:	f843 2b04 	str.w	r2, [r3], #4
 800a0f2:	42a6      	cmp	r6, r4
 800a0f4:	d2f9      	bcs.n	800a0ea <__hexnan+0xa6>
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f843 2b04 	str.w	r2, [r3], #4
 800a0fc:	429e      	cmp	r6, r3
 800a0fe:	d2fb      	bcs.n	800a0f8 <__hexnan+0xb4>
 800a100:	6833      	ldr	r3, [r6, #0]
 800a102:	b91b      	cbnz	r3, 800a10c <__hexnan+0xc8>
 800a104:	4546      	cmp	r6, r8
 800a106:	d127      	bne.n	800a158 <__hexnan+0x114>
 800a108:	2301      	movs	r3, #1
 800a10a:	6033      	str	r3, [r6, #0]
 800a10c:	2005      	movs	r0, #5
 800a10e:	e026      	b.n	800a15e <__hexnan+0x11a>
 800a110:	3501      	adds	r5, #1
 800a112:	2d08      	cmp	r5, #8
 800a114:	f10b 0b01 	add.w	fp, fp, #1
 800a118:	dd06      	ble.n	800a128 <__hexnan+0xe4>
 800a11a:	4544      	cmp	r4, r8
 800a11c:	d9cf      	bls.n	800a0be <__hexnan+0x7a>
 800a11e:	2300      	movs	r3, #0
 800a120:	f844 3c04 	str.w	r3, [r4, #-4]
 800a124:	2501      	movs	r5, #1
 800a126:	3c04      	subs	r4, #4
 800a128:	6822      	ldr	r2, [r4, #0]
 800a12a:	f000 000f 	and.w	r0, r0, #15
 800a12e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a132:	6020      	str	r0, [r4, #0]
 800a134:	e7c3      	b.n	800a0be <__hexnan+0x7a>
 800a136:	2508      	movs	r5, #8
 800a138:	e7c1      	b.n	800a0be <__hexnan+0x7a>
 800a13a:	9b01      	ldr	r3, [sp, #4]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d0df      	beq.n	800a100 <__hexnan+0xbc>
 800a140:	f04f 32ff 	mov.w	r2, #4294967295
 800a144:	f1c3 0320 	rsb	r3, r3, #32
 800a148:	fa22 f303 	lsr.w	r3, r2, r3
 800a14c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a150:	401a      	ands	r2, r3
 800a152:	f847 2c04 	str.w	r2, [r7, #-4]
 800a156:	e7d3      	b.n	800a100 <__hexnan+0xbc>
 800a158:	3e04      	subs	r6, #4
 800a15a:	e7d1      	b.n	800a100 <__hexnan+0xbc>
 800a15c:	2004      	movs	r0, #4
 800a15e:	b007      	add	sp, #28
 800a160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a164 <__localeconv_l>:
 800a164:	30f0      	adds	r0, #240	; 0xf0
 800a166:	4770      	bx	lr

0800a168 <_localeconv_r>:
 800a168:	4b04      	ldr	r3, [pc, #16]	; (800a17c <_localeconv_r+0x14>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6a18      	ldr	r0, [r3, #32]
 800a16e:	4b04      	ldr	r3, [pc, #16]	; (800a180 <_localeconv_r+0x18>)
 800a170:	2800      	cmp	r0, #0
 800a172:	bf08      	it	eq
 800a174:	4618      	moveq	r0, r3
 800a176:	30f0      	adds	r0, #240	; 0xf0
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	20000024 	.word	0x20000024
 800a180:	20000088 	.word	0x20000088

0800a184 <malloc>:
 800a184:	4b02      	ldr	r3, [pc, #8]	; (800a190 <malloc+0xc>)
 800a186:	4601      	mov	r1, r0
 800a188:	6818      	ldr	r0, [r3, #0]
 800a18a:	f000 bc7b 	b.w	800aa84 <_malloc_r>
 800a18e:	bf00      	nop
 800a190:	20000024 	.word	0x20000024

0800a194 <__ascii_mbtowc>:
 800a194:	b082      	sub	sp, #8
 800a196:	b901      	cbnz	r1, 800a19a <__ascii_mbtowc+0x6>
 800a198:	a901      	add	r1, sp, #4
 800a19a:	b142      	cbz	r2, 800a1ae <__ascii_mbtowc+0x1a>
 800a19c:	b14b      	cbz	r3, 800a1b2 <__ascii_mbtowc+0x1e>
 800a19e:	7813      	ldrb	r3, [r2, #0]
 800a1a0:	600b      	str	r3, [r1, #0]
 800a1a2:	7812      	ldrb	r2, [r2, #0]
 800a1a4:	1c10      	adds	r0, r2, #0
 800a1a6:	bf18      	it	ne
 800a1a8:	2001      	movne	r0, #1
 800a1aa:	b002      	add	sp, #8
 800a1ac:	4770      	bx	lr
 800a1ae:	4610      	mov	r0, r2
 800a1b0:	e7fb      	b.n	800a1aa <__ascii_mbtowc+0x16>
 800a1b2:	f06f 0001 	mvn.w	r0, #1
 800a1b6:	e7f8      	b.n	800a1aa <__ascii_mbtowc+0x16>

0800a1b8 <memcpy>:
 800a1b8:	b510      	push	{r4, lr}
 800a1ba:	1e43      	subs	r3, r0, #1
 800a1bc:	440a      	add	r2, r1
 800a1be:	4291      	cmp	r1, r2
 800a1c0:	d100      	bne.n	800a1c4 <memcpy+0xc>
 800a1c2:	bd10      	pop	{r4, pc}
 800a1c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1cc:	e7f7      	b.n	800a1be <memcpy+0x6>

0800a1ce <_Balloc>:
 800a1ce:	b570      	push	{r4, r5, r6, lr}
 800a1d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	460e      	mov	r6, r1
 800a1d6:	b93d      	cbnz	r5, 800a1e8 <_Balloc+0x1a>
 800a1d8:	2010      	movs	r0, #16
 800a1da:	f7ff ffd3 	bl	800a184 <malloc>
 800a1de:	6260      	str	r0, [r4, #36]	; 0x24
 800a1e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a1e4:	6005      	str	r5, [r0, #0]
 800a1e6:	60c5      	str	r5, [r0, #12]
 800a1e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a1ea:	68eb      	ldr	r3, [r5, #12]
 800a1ec:	b183      	cbz	r3, 800a210 <_Balloc+0x42>
 800a1ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a1f6:	b9b8      	cbnz	r0, 800a228 <_Balloc+0x5a>
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	fa01 f506 	lsl.w	r5, r1, r6
 800a1fe:	1d6a      	adds	r2, r5, #5
 800a200:	0092      	lsls	r2, r2, #2
 800a202:	4620      	mov	r0, r4
 800a204:	f000 fbe1 	bl	800a9ca <_calloc_r>
 800a208:	b160      	cbz	r0, 800a224 <_Balloc+0x56>
 800a20a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a20e:	e00e      	b.n	800a22e <_Balloc+0x60>
 800a210:	2221      	movs	r2, #33	; 0x21
 800a212:	2104      	movs	r1, #4
 800a214:	4620      	mov	r0, r4
 800a216:	f000 fbd8 	bl	800a9ca <_calloc_r>
 800a21a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a21c:	60e8      	str	r0, [r5, #12]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1e4      	bne.n	800a1ee <_Balloc+0x20>
 800a224:	2000      	movs	r0, #0
 800a226:	bd70      	pop	{r4, r5, r6, pc}
 800a228:	6802      	ldr	r2, [r0, #0]
 800a22a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a22e:	2300      	movs	r3, #0
 800a230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a234:	e7f7      	b.n	800a226 <_Balloc+0x58>

0800a236 <_Bfree>:
 800a236:	b570      	push	{r4, r5, r6, lr}
 800a238:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a23a:	4606      	mov	r6, r0
 800a23c:	460d      	mov	r5, r1
 800a23e:	b93c      	cbnz	r4, 800a250 <_Bfree+0x1a>
 800a240:	2010      	movs	r0, #16
 800a242:	f7ff ff9f 	bl	800a184 <malloc>
 800a246:	6270      	str	r0, [r6, #36]	; 0x24
 800a248:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a24c:	6004      	str	r4, [r0, #0]
 800a24e:	60c4      	str	r4, [r0, #12]
 800a250:	b13d      	cbz	r5, 800a262 <_Bfree+0x2c>
 800a252:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a254:	686a      	ldr	r2, [r5, #4]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a25c:	6029      	str	r1, [r5, #0]
 800a25e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a262:	bd70      	pop	{r4, r5, r6, pc}

0800a264 <__multadd>:
 800a264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a268:	690d      	ldr	r5, [r1, #16]
 800a26a:	461f      	mov	r7, r3
 800a26c:	4606      	mov	r6, r0
 800a26e:	460c      	mov	r4, r1
 800a270:	f101 0c14 	add.w	ip, r1, #20
 800a274:	2300      	movs	r3, #0
 800a276:	f8dc 0000 	ldr.w	r0, [ip]
 800a27a:	b281      	uxth	r1, r0
 800a27c:	fb02 7101 	mla	r1, r2, r1, r7
 800a280:	0c0f      	lsrs	r7, r1, #16
 800a282:	0c00      	lsrs	r0, r0, #16
 800a284:	fb02 7000 	mla	r0, r2, r0, r7
 800a288:	b289      	uxth	r1, r1
 800a28a:	3301      	adds	r3, #1
 800a28c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a290:	429d      	cmp	r5, r3
 800a292:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a296:	f84c 1b04 	str.w	r1, [ip], #4
 800a29a:	dcec      	bgt.n	800a276 <__multadd+0x12>
 800a29c:	b1d7      	cbz	r7, 800a2d4 <__multadd+0x70>
 800a29e:	68a3      	ldr	r3, [r4, #8]
 800a2a0:	42ab      	cmp	r3, r5
 800a2a2:	dc12      	bgt.n	800a2ca <__multadd+0x66>
 800a2a4:	6861      	ldr	r1, [r4, #4]
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	3101      	adds	r1, #1
 800a2aa:	f7ff ff90 	bl	800a1ce <_Balloc>
 800a2ae:	6922      	ldr	r2, [r4, #16]
 800a2b0:	3202      	adds	r2, #2
 800a2b2:	f104 010c 	add.w	r1, r4, #12
 800a2b6:	4680      	mov	r8, r0
 800a2b8:	0092      	lsls	r2, r2, #2
 800a2ba:	300c      	adds	r0, #12
 800a2bc:	f7ff ff7c 	bl	800a1b8 <memcpy>
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	f7ff ffb7 	bl	800a236 <_Bfree>
 800a2c8:	4644      	mov	r4, r8
 800a2ca:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2ce:	3501      	adds	r5, #1
 800a2d0:	615f      	str	r7, [r3, #20]
 800a2d2:	6125      	str	r5, [r4, #16]
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a2da <__s2b>:
 800a2da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2de:	460c      	mov	r4, r1
 800a2e0:	4615      	mov	r5, r2
 800a2e2:	461f      	mov	r7, r3
 800a2e4:	2209      	movs	r2, #9
 800a2e6:	3308      	adds	r3, #8
 800a2e8:	4606      	mov	r6, r0
 800a2ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	db20      	blt.n	800a338 <__s2b+0x5e>
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	f7ff ff69 	bl	800a1ce <_Balloc>
 800a2fc:	9b08      	ldr	r3, [sp, #32]
 800a2fe:	6143      	str	r3, [r0, #20]
 800a300:	2d09      	cmp	r5, #9
 800a302:	f04f 0301 	mov.w	r3, #1
 800a306:	6103      	str	r3, [r0, #16]
 800a308:	dd19      	ble.n	800a33e <__s2b+0x64>
 800a30a:	f104 0809 	add.w	r8, r4, #9
 800a30e:	46c1      	mov	r9, r8
 800a310:	442c      	add	r4, r5
 800a312:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a316:	4601      	mov	r1, r0
 800a318:	3b30      	subs	r3, #48	; 0x30
 800a31a:	220a      	movs	r2, #10
 800a31c:	4630      	mov	r0, r6
 800a31e:	f7ff ffa1 	bl	800a264 <__multadd>
 800a322:	45a1      	cmp	r9, r4
 800a324:	d1f5      	bne.n	800a312 <__s2b+0x38>
 800a326:	eb08 0405 	add.w	r4, r8, r5
 800a32a:	3c08      	subs	r4, #8
 800a32c:	1b2d      	subs	r5, r5, r4
 800a32e:	1963      	adds	r3, r4, r5
 800a330:	42bb      	cmp	r3, r7
 800a332:	db07      	blt.n	800a344 <__s2b+0x6a>
 800a334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a338:	0052      	lsls	r2, r2, #1
 800a33a:	3101      	adds	r1, #1
 800a33c:	e7d9      	b.n	800a2f2 <__s2b+0x18>
 800a33e:	340a      	adds	r4, #10
 800a340:	2509      	movs	r5, #9
 800a342:	e7f3      	b.n	800a32c <__s2b+0x52>
 800a344:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a348:	4601      	mov	r1, r0
 800a34a:	3b30      	subs	r3, #48	; 0x30
 800a34c:	220a      	movs	r2, #10
 800a34e:	4630      	mov	r0, r6
 800a350:	f7ff ff88 	bl	800a264 <__multadd>
 800a354:	e7eb      	b.n	800a32e <__s2b+0x54>

0800a356 <__hi0bits>:
 800a356:	0c02      	lsrs	r2, r0, #16
 800a358:	0412      	lsls	r2, r2, #16
 800a35a:	4603      	mov	r3, r0
 800a35c:	b9b2      	cbnz	r2, 800a38c <__hi0bits+0x36>
 800a35e:	0403      	lsls	r3, r0, #16
 800a360:	2010      	movs	r0, #16
 800a362:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a366:	bf04      	itt	eq
 800a368:	021b      	lsleq	r3, r3, #8
 800a36a:	3008      	addeq	r0, #8
 800a36c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a370:	bf04      	itt	eq
 800a372:	011b      	lsleq	r3, r3, #4
 800a374:	3004      	addeq	r0, #4
 800a376:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a37a:	bf04      	itt	eq
 800a37c:	009b      	lsleq	r3, r3, #2
 800a37e:	3002      	addeq	r0, #2
 800a380:	2b00      	cmp	r3, #0
 800a382:	db06      	blt.n	800a392 <__hi0bits+0x3c>
 800a384:	005b      	lsls	r3, r3, #1
 800a386:	d503      	bpl.n	800a390 <__hi0bits+0x3a>
 800a388:	3001      	adds	r0, #1
 800a38a:	4770      	bx	lr
 800a38c:	2000      	movs	r0, #0
 800a38e:	e7e8      	b.n	800a362 <__hi0bits+0xc>
 800a390:	2020      	movs	r0, #32
 800a392:	4770      	bx	lr

0800a394 <__lo0bits>:
 800a394:	6803      	ldr	r3, [r0, #0]
 800a396:	f013 0207 	ands.w	r2, r3, #7
 800a39a:	4601      	mov	r1, r0
 800a39c:	d00b      	beq.n	800a3b6 <__lo0bits+0x22>
 800a39e:	07da      	lsls	r2, r3, #31
 800a3a0:	d423      	bmi.n	800a3ea <__lo0bits+0x56>
 800a3a2:	0798      	lsls	r0, r3, #30
 800a3a4:	bf49      	itett	mi
 800a3a6:	085b      	lsrmi	r3, r3, #1
 800a3a8:	089b      	lsrpl	r3, r3, #2
 800a3aa:	2001      	movmi	r0, #1
 800a3ac:	600b      	strmi	r3, [r1, #0]
 800a3ae:	bf5c      	itt	pl
 800a3b0:	600b      	strpl	r3, [r1, #0]
 800a3b2:	2002      	movpl	r0, #2
 800a3b4:	4770      	bx	lr
 800a3b6:	b298      	uxth	r0, r3
 800a3b8:	b9a8      	cbnz	r0, 800a3e6 <__lo0bits+0x52>
 800a3ba:	0c1b      	lsrs	r3, r3, #16
 800a3bc:	2010      	movs	r0, #16
 800a3be:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a3c2:	bf04      	itt	eq
 800a3c4:	0a1b      	lsreq	r3, r3, #8
 800a3c6:	3008      	addeq	r0, #8
 800a3c8:	071a      	lsls	r2, r3, #28
 800a3ca:	bf04      	itt	eq
 800a3cc:	091b      	lsreq	r3, r3, #4
 800a3ce:	3004      	addeq	r0, #4
 800a3d0:	079a      	lsls	r2, r3, #30
 800a3d2:	bf04      	itt	eq
 800a3d4:	089b      	lsreq	r3, r3, #2
 800a3d6:	3002      	addeq	r0, #2
 800a3d8:	07da      	lsls	r2, r3, #31
 800a3da:	d402      	bmi.n	800a3e2 <__lo0bits+0x4e>
 800a3dc:	085b      	lsrs	r3, r3, #1
 800a3de:	d006      	beq.n	800a3ee <__lo0bits+0x5a>
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	600b      	str	r3, [r1, #0]
 800a3e4:	4770      	bx	lr
 800a3e6:	4610      	mov	r0, r2
 800a3e8:	e7e9      	b.n	800a3be <__lo0bits+0x2a>
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	4770      	bx	lr
 800a3ee:	2020      	movs	r0, #32
 800a3f0:	4770      	bx	lr

0800a3f2 <__i2b>:
 800a3f2:	b510      	push	{r4, lr}
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	f7ff fee9 	bl	800a1ce <_Balloc>
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	6144      	str	r4, [r0, #20]
 800a400:	6102      	str	r2, [r0, #16]
 800a402:	bd10      	pop	{r4, pc}

0800a404 <__multiply>:
 800a404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a408:	4614      	mov	r4, r2
 800a40a:	690a      	ldr	r2, [r1, #16]
 800a40c:	6923      	ldr	r3, [r4, #16]
 800a40e:	429a      	cmp	r2, r3
 800a410:	bfb8      	it	lt
 800a412:	460b      	movlt	r3, r1
 800a414:	4688      	mov	r8, r1
 800a416:	bfbc      	itt	lt
 800a418:	46a0      	movlt	r8, r4
 800a41a:	461c      	movlt	r4, r3
 800a41c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a420:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a424:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a428:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a42c:	eb07 0609 	add.w	r6, r7, r9
 800a430:	42b3      	cmp	r3, r6
 800a432:	bfb8      	it	lt
 800a434:	3101      	addlt	r1, #1
 800a436:	f7ff feca 	bl	800a1ce <_Balloc>
 800a43a:	f100 0514 	add.w	r5, r0, #20
 800a43e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a442:	462b      	mov	r3, r5
 800a444:	2200      	movs	r2, #0
 800a446:	4573      	cmp	r3, lr
 800a448:	d316      	bcc.n	800a478 <__multiply+0x74>
 800a44a:	f104 0214 	add.w	r2, r4, #20
 800a44e:	f108 0114 	add.w	r1, r8, #20
 800a452:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a456:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	9b00      	ldr	r3, [sp, #0]
 800a45e:	9201      	str	r2, [sp, #4]
 800a460:	4293      	cmp	r3, r2
 800a462:	d80c      	bhi.n	800a47e <__multiply+0x7a>
 800a464:	2e00      	cmp	r6, #0
 800a466:	dd03      	ble.n	800a470 <__multiply+0x6c>
 800a468:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d05d      	beq.n	800a52c <__multiply+0x128>
 800a470:	6106      	str	r6, [r0, #16]
 800a472:	b003      	add	sp, #12
 800a474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a478:	f843 2b04 	str.w	r2, [r3], #4
 800a47c:	e7e3      	b.n	800a446 <__multiply+0x42>
 800a47e:	f8b2 b000 	ldrh.w	fp, [r2]
 800a482:	f1bb 0f00 	cmp.w	fp, #0
 800a486:	d023      	beq.n	800a4d0 <__multiply+0xcc>
 800a488:	4689      	mov	r9, r1
 800a48a:	46ac      	mov	ip, r5
 800a48c:	f04f 0800 	mov.w	r8, #0
 800a490:	f859 4b04 	ldr.w	r4, [r9], #4
 800a494:	f8dc a000 	ldr.w	sl, [ip]
 800a498:	b2a3      	uxth	r3, r4
 800a49a:	fa1f fa8a 	uxth.w	sl, sl
 800a49e:	fb0b a303 	mla	r3, fp, r3, sl
 800a4a2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a4a6:	f8dc 4000 	ldr.w	r4, [ip]
 800a4aa:	4443      	add	r3, r8
 800a4ac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a4b0:	fb0b 840a 	mla	r4, fp, sl, r8
 800a4b4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a4b8:	46e2      	mov	sl, ip
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a4c0:	454f      	cmp	r7, r9
 800a4c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a4c6:	f84a 3b04 	str.w	r3, [sl], #4
 800a4ca:	d82b      	bhi.n	800a524 <__multiply+0x120>
 800a4cc:	f8cc 8004 	str.w	r8, [ip, #4]
 800a4d0:	9b01      	ldr	r3, [sp, #4]
 800a4d2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a4d6:	3204      	adds	r2, #4
 800a4d8:	f1ba 0f00 	cmp.w	sl, #0
 800a4dc:	d020      	beq.n	800a520 <__multiply+0x11c>
 800a4de:	682b      	ldr	r3, [r5, #0]
 800a4e0:	4689      	mov	r9, r1
 800a4e2:	46a8      	mov	r8, r5
 800a4e4:	f04f 0b00 	mov.w	fp, #0
 800a4e8:	f8b9 c000 	ldrh.w	ip, [r9]
 800a4ec:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a4f0:	fb0a 440c 	mla	r4, sl, ip, r4
 800a4f4:	445c      	add	r4, fp
 800a4f6:	46c4      	mov	ip, r8
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a4fe:	f84c 3b04 	str.w	r3, [ip], #4
 800a502:	f859 3b04 	ldr.w	r3, [r9], #4
 800a506:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a50a:	0c1b      	lsrs	r3, r3, #16
 800a50c:	fb0a b303 	mla	r3, sl, r3, fp
 800a510:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a514:	454f      	cmp	r7, r9
 800a516:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a51a:	d805      	bhi.n	800a528 <__multiply+0x124>
 800a51c:	f8c8 3004 	str.w	r3, [r8, #4]
 800a520:	3504      	adds	r5, #4
 800a522:	e79b      	b.n	800a45c <__multiply+0x58>
 800a524:	46d4      	mov	ip, sl
 800a526:	e7b3      	b.n	800a490 <__multiply+0x8c>
 800a528:	46e0      	mov	r8, ip
 800a52a:	e7dd      	b.n	800a4e8 <__multiply+0xe4>
 800a52c:	3e01      	subs	r6, #1
 800a52e:	e799      	b.n	800a464 <__multiply+0x60>

0800a530 <__pow5mult>:
 800a530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a534:	4615      	mov	r5, r2
 800a536:	f012 0203 	ands.w	r2, r2, #3
 800a53a:	4606      	mov	r6, r0
 800a53c:	460f      	mov	r7, r1
 800a53e:	d007      	beq.n	800a550 <__pow5mult+0x20>
 800a540:	3a01      	subs	r2, #1
 800a542:	4c21      	ldr	r4, [pc, #132]	; (800a5c8 <__pow5mult+0x98>)
 800a544:	2300      	movs	r3, #0
 800a546:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a54a:	f7ff fe8b 	bl	800a264 <__multadd>
 800a54e:	4607      	mov	r7, r0
 800a550:	10ad      	asrs	r5, r5, #2
 800a552:	d035      	beq.n	800a5c0 <__pow5mult+0x90>
 800a554:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a556:	b93c      	cbnz	r4, 800a568 <__pow5mult+0x38>
 800a558:	2010      	movs	r0, #16
 800a55a:	f7ff fe13 	bl	800a184 <malloc>
 800a55e:	6270      	str	r0, [r6, #36]	; 0x24
 800a560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a564:	6004      	str	r4, [r0, #0]
 800a566:	60c4      	str	r4, [r0, #12]
 800a568:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a56c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a570:	b94c      	cbnz	r4, 800a586 <__pow5mult+0x56>
 800a572:	f240 2171 	movw	r1, #625	; 0x271
 800a576:	4630      	mov	r0, r6
 800a578:	f7ff ff3b 	bl	800a3f2 <__i2b>
 800a57c:	2300      	movs	r3, #0
 800a57e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a582:	4604      	mov	r4, r0
 800a584:	6003      	str	r3, [r0, #0]
 800a586:	f04f 0800 	mov.w	r8, #0
 800a58a:	07eb      	lsls	r3, r5, #31
 800a58c:	d50a      	bpl.n	800a5a4 <__pow5mult+0x74>
 800a58e:	4639      	mov	r1, r7
 800a590:	4622      	mov	r2, r4
 800a592:	4630      	mov	r0, r6
 800a594:	f7ff ff36 	bl	800a404 <__multiply>
 800a598:	4639      	mov	r1, r7
 800a59a:	4681      	mov	r9, r0
 800a59c:	4630      	mov	r0, r6
 800a59e:	f7ff fe4a 	bl	800a236 <_Bfree>
 800a5a2:	464f      	mov	r7, r9
 800a5a4:	106d      	asrs	r5, r5, #1
 800a5a6:	d00b      	beq.n	800a5c0 <__pow5mult+0x90>
 800a5a8:	6820      	ldr	r0, [r4, #0]
 800a5aa:	b938      	cbnz	r0, 800a5bc <__pow5mult+0x8c>
 800a5ac:	4622      	mov	r2, r4
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f7ff ff27 	bl	800a404 <__multiply>
 800a5b6:	6020      	str	r0, [r4, #0]
 800a5b8:	f8c0 8000 	str.w	r8, [r0]
 800a5bc:	4604      	mov	r4, r0
 800a5be:	e7e4      	b.n	800a58a <__pow5mult+0x5a>
 800a5c0:	4638      	mov	r0, r7
 800a5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5c6:	bf00      	nop
 800a5c8:	0800b458 	.word	0x0800b458

0800a5cc <__lshift>:
 800a5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5d6:	6923      	ldr	r3, [r4, #16]
 800a5d8:	6849      	ldr	r1, [r1, #4]
 800a5da:	eb0a 0903 	add.w	r9, sl, r3
 800a5de:	68a3      	ldr	r3, [r4, #8]
 800a5e0:	4607      	mov	r7, r0
 800a5e2:	4616      	mov	r6, r2
 800a5e4:	f109 0501 	add.w	r5, r9, #1
 800a5e8:	42ab      	cmp	r3, r5
 800a5ea:	db32      	blt.n	800a652 <__lshift+0x86>
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	f7ff fdee 	bl	800a1ce <_Balloc>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	4680      	mov	r8, r0
 800a5f6:	f100 0114 	add.w	r1, r0, #20
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	4553      	cmp	r3, sl
 800a5fe:	db2b      	blt.n	800a658 <__lshift+0x8c>
 800a600:	6920      	ldr	r0, [r4, #16]
 800a602:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a606:	f104 0314 	add.w	r3, r4, #20
 800a60a:	f016 021f 	ands.w	r2, r6, #31
 800a60e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a612:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a616:	d025      	beq.n	800a664 <__lshift+0x98>
 800a618:	f1c2 0e20 	rsb	lr, r2, #32
 800a61c:	2000      	movs	r0, #0
 800a61e:	681e      	ldr	r6, [r3, #0]
 800a620:	468a      	mov	sl, r1
 800a622:	4096      	lsls	r6, r2
 800a624:	4330      	orrs	r0, r6
 800a626:	f84a 0b04 	str.w	r0, [sl], #4
 800a62a:	f853 0b04 	ldr.w	r0, [r3], #4
 800a62e:	459c      	cmp	ip, r3
 800a630:	fa20 f00e 	lsr.w	r0, r0, lr
 800a634:	d814      	bhi.n	800a660 <__lshift+0x94>
 800a636:	6048      	str	r0, [r1, #4]
 800a638:	b108      	cbz	r0, 800a63e <__lshift+0x72>
 800a63a:	f109 0502 	add.w	r5, r9, #2
 800a63e:	3d01      	subs	r5, #1
 800a640:	4638      	mov	r0, r7
 800a642:	f8c8 5010 	str.w	r5, [r8, #16]
 800a646:	4621      	mov	r1, r4
 800a648:	f7ff fdf5 	bl	800a236 <_Bfree>
 800a64c:	4640      	mov	r0, r8
 800a64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a652:	3101      	adds	r1, #1
 800a654:	005b      	lsls	r3, r3, #1
 800a656:	e7c7      	b.n	800a5e8 <__lshift+0x1c>
 800a658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a65c:	3301      	adds	r3, #1
 800a65e:	e7cd      	b.n	800a5fc <__lshift+0x30>
 800a660:	4651      	mov	r1, sl
 800a662:	e7dc      	b.n	800a61e <__lshift+0x52>
 800a664:	3904      	subs	r1, #4
 800a666:	f853 2b04 	ldr.w	r2, [r3], #4
 800a66a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a66e:	459c      	cmp	ip, r3
 800a670:	d8f9      	bhi.n	800a666 <__lshift+0x9a>
 800a672:	e7e4      	b.n	800a63e <__lshift+0x72>

0800a674 <__mcmp>:
 800a674:	6903      	ldr	r3, [r0, #16]
 800a676:	690a      	ldr	r2, [r1, #16]
 800a678:	1a9b      	subs	r3, r3, r2
 800a67a:	b530      	push	{r4, r5, lr}
 800a67c:	d10c      	bne.n	800a698 <__mcmp+0x24>
 800a67e:	0092      	lsls	r2, r2, #2
 800a680:	3014      	adds	r0, #20
 800a682:	3114      	adds	r1, #20
 800a684:	1884      	adds	r4, r0, r2
 800a686:	4411      	add	r1, r2
 800a688:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a68c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a690:	4295      	cmp	r5, r2
 800a692:	d003      	beq.n	800a69c <__mcmp+0x28>
 800a694:	d305      	bcc.n	800a6a2 <__mcmp+0x2e>
 800a696:	2301      	movs	r3, #1
 800a698:	4618      	mov	r0, r3
 800a69a:	bd30      	pop	{r4, r5, pc}
 800a69c:	42a0      	cmp	r0, r4
 800a69e:	d3f3      	bcc.n	800a688 <__mcmp+0x14>
 800a6a0:	e7fa      	b.n	800a698 <__mcmp+0x24>
 800a6a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a6:	e7f7      	b.n	800a698 <__mcmp+0x24>

0800a6a8 <__mdiff>:
 800a6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6ac:	460d      	mov	r5, r1
 800a6ae:	4607      	mov	r7, r0
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	4614      	mov	r4, r2
 800a6b6:	f7ff ffdd 	bl	800a674 <__mcmp>
 800a6ba:	1e06      	subs	r6, r0, #0
 800a6bc:	d108      	bne.n	800a6d0 <__mdiff+0x28>
 800a6be:	4631      	mov	r1, r6
 800a6c0:	4638      	mov	r0, r7
 800a6c2:	f7ff fd84 	bl	800a1ce <_Balloc>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d0:	bfa4      	itt	ge
 800a6d2:	4623      	movge	r3, r4
 800a6d4:	462c      	movge	r4, r5
 800a6d6:	4638      	mov	r0, r7
 800a6d8:	6861      	ldr	r1, [r4, #4]
 800a6da:	bfa6      	itte	ge
 800a6dc:	461d      	movge	r5, r3
 800a6de:	2600      	movge	r6, #0
 800a6e0:	2601      	movlt	r6, #1
 800a6e2:	f7ff fd74 	bl	800a1ce <_Balloc>
 800a6e6:	692b      	ldr	r3, [r5, #16]
 800a6e8:	60c6      	str	r6, [r0, #12]
 800a6ea:	6926      	ldr	r6, [r4, #16]
 800a6ec:	f105 0914 	add.w	r9, r5, #20
 800a6f0:	f104 0214 	add.w	r2, r4, #20
 800a6f4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a6f8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a6fc:	f100 0514 	add.w	r5, r0, #20
 800a700:	f04f 0e00 	mov.w	lr, #0
 800a704:	f852 ab04 	ldr.w	sl, [r2], #4
 800a708:	f859 4b04 	ldr.w	r4, [r9], #4
 800a70c:	fa1e f18a 	uxtah	r1, lr, sl
 800a710:	b2a3      	uxth	r3, r4
 800a712:	1ac9      	subs	r1, r1, r3
 800a714:	0c23      	lsrs	r3, r4, #16
 800a716:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a71a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a71e:	b289      	uxth	r1, r1
 800a720:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a724:	45c8      	cmp	r8, r9
 800a726:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a72a:	4694      	mov	ip, r2
 800a72c:	f845 3b04 	str.w	r3, [r5], #4
 800a730:	d8e8      	bhi.n	800a704 <__mdiff+0x5c>
 800a732:	45bc      	cmp	ip, r7
 800a734:	d304      	bcc.n	800a740 <__mdiff+0x98>
 800a736:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a73a:	b183      	cbz	r3, 800a75e <__mdiff+0xb6>
 800a73c:	6106      	str	r6, [r0, #16]
 800a73e:	e7c5      	b.n	800a6cc <__mdiff+0x24>
 800a740:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a744:	fa1e f381 	uxtah	r3, lr, r1
 800a748:	141a      	asrs	r2, r3, #16
 800a74a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a74e:	b29b      	uxth	r3, r3
 800a750:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a754:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a758:	f845 3b04 	str.w	r3, [r5], #4
 800a75c:	e7e9      	b.n	800a732 <__mdiff+0x8a>
 800a75e:	3e01      	subs	r6, #1
 800a760:	e7e9      	b.n	800a736 <__mdiff+0x8e>
	...

0800a764 <__ulp>:
 800a764:	4b12      	ldr	r3, [pc, #72]	; (800a7b0 <__ulp+0x4c>)
 800a766:	ee10 2a90 	vmov	r2, s1
 800a76a:	401a      	ands	r2, r3
 800a76c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a770:	2b00      	cmp	r3, #0
 800a772:	dd04      	ble.n	800a77e <__ulp+0x1a>
 800a774:	2000      	movs	r0, #0
 800a776:	4619      	mov	r1, r3
 800a778:	ec41 0b10 	vmov	d0, r0, r1
 800a77c:	4770      	bx	lr
 800a77e:	425b      	negs	r3, r3
 800a780:	151b      	asrs	r3, r3, #20
 800a782:	2b13      	cmp	r3, #19
 800a784:	f04f 0000 	mov.w	r0, #0
 800a788:	f04f 0100 	mov.w	r1, #0
 800a78c:	dc04      	bgt.n	800a798 <__ulp+0x34>
 800a78e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a792:	fa42 f103 	asr.w	r1, r2, r3
 800a796:	e7ef      	b.n	800a778 <__ulp+0x14>
 800a798:	3b14      	subs	r3, #20
 800a79a:	2b1e      	cmp	r3, #30
 800a79c:	f04f 0201 	mov.w	r2, #1
 800a7a0:	bfda      	itte	le
 800a7a2:	f1c3 031f 	rsble	r3, r3, #31
 800a7a6:	fa02 f303 	lslle.w	r3, r2, r3
 800a7aa:	4613      	movgt	r3, r2
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	e7e3      	b.n	800a778 <__ulp+0x14>
 800a7b0:	7ff00000 	.word	0x7ff00000

0800a7b4 <__b2d>:
 800a7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b6:	6905      	ldr	r5, [r0, #16]
 800a7b8:	f100 0714 	add.w	r7, r0, #20
 800a7bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a7c0:	1f2e      	subs	r6, r5, #4
 800a7c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f7ff fdc5 	bl	800a356 <__hi0bits>
 800a7cc:	f1c0 0320 	rsb	r3, r0, #32
 800a7d0:	280a      	cmp	r0, #10
 800a7d2:	600b      	str	r3, [r1, #0]
 800a7d4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a84c <__b2d+0x98>
 800a7d8:	dc14      	bgt.n	800a804 <__b2d+0x50>
 800a7da:	f1c0 0e0b 	rsb	lr, r0, #11
 800a7de:	fa24 f10e 	lsr.w	r1, r4, lr
 800a7e2:	42b7      	cmp	r7, r6
 800a7e4:	ea41 030c 	orr.w	r3, r1, ip
 800a7e8:	bf34      	ite	cc
 800a7ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a7ee:	2100      	movcs	r1, #0
 800a7f0:	3015      	adds	r0, #21
 800a7f2:	fa04 f000 	lsl.w	r0, r4, r0
 800a7f6:	fa21 f10e 	lsr.w	r1, r1, lr
 800a7fa:	ea40 0201 	orr.w	r2, r0, r1
 800a7fe:	ec43 2b10 	vmov	d0, r2, r3
 800a802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a804:	42b7      	cmp	r7, r6
 800a806:	bf3a      	itte	cc
 800a808:	f1a5 0608 	subcc.w	r6, r5, #8
 800a80c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a810:	2100      	movcs	r1, #0
 800a812:	380b      	subs	r0, #11
 800a814:	d015      	beq.n	800a842 <__b2d+0x8e>
 800a816:	4084      	lsls	r4, r0
 800a818:	f1c0 0520 	rsb	r5, r0, #32
 800a81c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a820:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a824:	42be      	cmp	r6, r7
 800a826:	fa21 fc05 	lsr.w	ip, r1, r5
 800a82a:	ea44 030c 	orr.w	r3, r4, ip
 800a82e:	bf8c      	ite	hi
 800a830:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a834:	2400      	movls	r4, #0
 800a836:	fa01 f000 	lsl.w	r0, r1, r0
 800a83a:	40ec      	lsrs	r4, r5
 800a83c:	ea40 0204 	orr.w	r2, r0, r4
 800a840:	e7dd      	b.n	800a7fe <__b2d+0x4a>
 800a842:	ea44 030c 	orr.w	r3, r4, ip
 800a846:	460a      	mov	r2, r1
 800a848:	e7d9      	b.n	800a7fe <__b2d+0x4a>
 800a84a:	bf00      	nop
 800a84c:	3ff00000 	.word	0x3ff00000

0800a850 <__d2b>:
 800a850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a854:	460e      	mov	r6, r1
 800a856:	2101      	movs	r1, #1
 800a858:	ec59 8b10 	vmov	r8, r9, d0
 800a85c:	4615      	mov	r5, r2
 800a85e:	f7ff fcb6 	bl	800a1ce <_Balloc>
 800a862:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a866:	4607      	mov	r7, r0
 800a868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a86c:	bb34      	cbnz	r4, 800a8bc <__d2b+0x6c>
 800a86e:	9301      	str	r3, [sp, #4]
 800a870:	f1b8 0300 	subs.w	r3, r8, #0
 800a874:	d027      	beq.n	800a8c6 <__d2b+0x76>
 800a876:	a802      	add	r0, sp, #8
 800a878:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a87c:	f7ff fd8a 	bl	800a394 <__lo0bits>
 800a880:	9900      	ldr	r1, [sp, #0]
 800a882:	b1f0      	cbz	r0, 800a8c2 <__d2b+0x72>
 800a884:	9a01      	ldr	r2, [sp, #4]
 800a886:	f1c0 0320 	rsb	r3, r0, #32
 800a88a:	fa02 f303 	lsl.w	r3, r2, r3
 800a88e:	430b      	orrs	r3, r1
 800a890:	40c2      	lsrs	r2, r0
 800a892:	617b      	str	r3, [r7, #20]
 800a894:	9201      	str	r2, [sp, #4]
 800a896:	9b01      	ldr	r3, [sp, #4]
 800a898:	61bb      	str	r3, [r7, #24]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	bf14      	ite	ne
 800a89e:	2102      	movne	r1, #2
 800a8a0:	2101      	moveq	r1, #1
 800a8a2:	6139      	str	r1, [r7, #16]
 800a8a4:	b1c4      	cbz	r4, 800a8d8 <__d2b+0x88>
 800a8a6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a8aa:	4404      	add	r4, r0
 800a8ac:	6034      	str	r4, [r6, #0]
 800a8ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a8b2:	6028      	str	r0, [r5, #0]
 800a8b4:	4638      	mov	r0, r7
 800a8b6:	b003      	add	sp, #12
 800a8b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8c0:	e7d5      	b.n	800a86e <__d2b+0x1e>
 800a8c2:	6179      	str	r1, [r7, #20]
 800a8c4:	e7e7      	b.n	800a896 <__d2b+0x46>
 800a8c6:	a801      	add	r0, sp, #4
 800a8c8:	f7ff fd64 	bl	800a394 <__lo0bits>
 800a8cc:	9b01      	ldr	r3, [sp, #4]
 800a8ce:	617b      	str	r3, [r7, #20]
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	6139      	str	r1, [r7, #16]
 800a8d4:	3020      	adds	r0, #32
 800a8d6:	e7e5      	b.n	800a8a4 <__d2b+0x54>
 800a8d8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a8dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8e0:	6030      	str	r0, [r6, #0]
 800a8e2:	6918      	ldr	r0, [r3, #16]
 800a8e4:	f7ff fd37 	bl	800a356 <__hi0bits>
 800a8e8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a8ec:	e7e1      	b.n	800a8b2 <__d2b+0x62>

0800a8ee <__ratio>:
 800a8ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f2:	4688      	mov	r8, r1
 800a8f4:	4669      	mov	r1, sp
 800a8f6:	4681      	mov	r9, r0
 800a8f8:	f7ff ff5c 	bl	800a7b4 <__b2d>
 800a8fc:	a901      	add	r1, sp, #4
 800a8fe:	4640      	mov	r0, r8
 800a900:	ec57 6b10 	vmov	r6, r7, d0
 800a904:	f7ff ff56 	bl	800a7b4 <__b2d>
 800a908:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a90c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a910:	eba3 0c02 	sub.w	ip, r3, r2
 800a914:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a918:	1a9b      	subs	r3, r3, r2
 800a91a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a91e:	ec5b ab10 	vmov	sl, fp, d0
 800a922:	2b00      	cmp	r3, #0
 800a924:	bfce      	itee	gt
 800a926:	463a      	movgt	r2, r7
 800a928:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a92c:	465a      	movle	r2, fp
 800a92e:	4659      	mov	r1, fp
 800a930:	463d      	mov	r5, r7
 800a932:	bfd4      	ite	le
 800a934:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a938:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800a93c:	4630      	mov	r0, r6
 800a93e:	ee10 2a10 	vmov	r2, s0
 800a942:	460b      	mov	r3, r1
 800a944:	4629      	mov	r1, r5
 800a946:	f7f5 ff89 	bl	800085c <__aeabi_ddiv>
 800a94a:	ec41 0b10 	vmov	d0, r0, r1
 800a94e:	b003      	add	sp, #12
 800a950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a954 <__copybits>:
 800a954:	3901      	subs	r1, #1
 800a956:	b510      	push	{r4, lr}
 800a958:	1149      	asrs	r1, r1, #5
 800a95a:	6914      	ldr	r4, [r2, #16]
 800a95c:	3101      	adds	r1, #1
 800a95e:	f102 0314 	add.w	r3, r2, #20
 800a962:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a966:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a96a:	42a3      	cmp	r3, r4
 800a96c:	4602      	mov	r2, r0
 800a96e:	d303      	bcc.n	800a978 <__copybits+0x24>
 800a970:	2300      	movs	r3, #0
 800a972:	428a      	cmp	r2, r1
 800a974:	d305      	bcc.n	800a982 <__copybits+0x2e>
 800a976:	bd10      	pop	{r4, pc}
 800a978:	f853 2b04 	ldr.w	r2, [r3], #4
 800a97c:	f840 2b04 	str.w	r2, [r0], #4
 800a980:	e7f3      	b.n	800a96a <__copybits+0x16>
 800a982:	f842 3b04 	str.w	r3, [r2], #4
 800a986:	e7f4      	b.n	800a972 <__copybits+0x1e>

0800a988 <__any_on>:
 800a988:	f100 0214 	add.w	r2, r0, #20
 800a98c:	6900      	ldr	r0, [r0, #16]
 800a98e:	114b      	asrs	r3, r1, #5
 800a990:	4298      	cmp	r0, r3
 800a992:	b510      	push	{r4, lr}
 800a994:	db11      	blt.n	800a9ba <__any_on+0x32>
 800a996:	dd0a      	ble.n	800a9ae <__any_on+0x26>
 800a998:	f011 011f 	ands.w	r1, r1, #31
 800a99c:	d007      	beq.n	800a9ae <__any_on+0x26>
 800a99e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a9a2:	fa24 f001 	lsr.w	r0, r4, r1
 800a9a6:	fa00 f101 	lsl.w	r1, r0, r1
 800a9aa:	428c      	cmp	r4, r1
 800a9ac:	d10b      	bne.n	800a9c6 <__any_on+0x3e>
 800a9ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d803      	bhi.n	800a9be <__any_on+0x36>
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	bd10      	pop	{r4, pc}
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	e7f7      	b.n	800a9ae <__any_on+0x26>
 800a9be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9c2:	2900      	cmp	r1, #0
 800a9c4:	d0f5      	beq.n	800a9b2 <__any_on+0x2a>
 800a9c6:	2001      	movs	r0, #1
 800a9c8:	e7f6      	b.n	800a9b8 <__any_on+0x30>

0800a9ca <_calloc_r>:
 800a9ca:	b538      	push	{r3, r4, r5, lr}
 800a9cc:	fb02 f401 	mul.w	r4, r2, r1
 800a9d0:	4621      	mov	r1, r4
 800a9d2:	f000 f857 	bl	800aa84 <_malloc_r>
 800a9d6:	4605      	mov	r5, r0
 800a9d8:	b118      	cbz	r0, 800a9e2 <_calloc_r+0x18>
 800a9da:	4622      	mov	r2, r4
 800a9dc:	2100      	movs	r1, #0
 800a9de:	f7fc ff49 	bl	8007874 <memset>
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a9e8 <_free_r>:
 800a9e8:	b538      	push	{r3, r4, r5, lr}
 800a9ea:	4605      	mov	r5, r0
 800a9ec:	2900      	cmp	r1, #0
 800a9ee:	d045      	beq.n	800aa7c <_free_r+0x94>
 800a9f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9f4:	1f0c      	subs	r4, r1, #4
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	bfb8      	it	lt
 800a9fa:	18e4      	addlt	r4, r4, r3
 800a9fc:	f000 fa36 	bl	800ae6c <__malloc_lock>
 800aa00:	4a1f      	ldr	r2, [pc, #124]	; (800aa80 <_free_r+0x98>)
 800aa02:	6813      	ldr	r3, [r2, #0]
 800aa04:	4610      	mov	r0, r2
 800aa06:	b933      	cbnz	r3, 800aa16 <_free_r+0x2e>
 800aa08:	6063      	str	r3, [r4, #4]
 800aa0a:	6014      	str	r4, [r2, #0]
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa12:	f000 ba2c 	b.w	800ae6e <__malloc_unlock>
 800aa16:	42a3      	cmp	r3, r4
 800aa18:	d90c      	bls.n	800aa34 <_free_r+0x4c>
 800aa1a:	6821      	ldr	r1, [r4, #0]
 800aa1c:	1862      	adds	r2, r4, r1
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	bf04      	itt	eq
 800aa22:	681a      	ldreq	r2, [r3, #0]
 800aa24:	685b      	ldreq	r3, [r3, #4]
 800aa26:	6063      	str	r3, [r4, #4]
 800aa28:	bf04      	itt	eq
 800aa2a:	1852      	addeq	r2, r2, r1
 800aa2c:	6022      	streq	r2, [r4, #0]
 800aa2e:	6004      	str	r4, [r0, #0]
 800aa30:	e7ec      	b.n	800aa0c <_free_r+0x24>
 800aa32:	4613      	mov	r3, r2
 800aa34:	685a      	ldr	r2, [r3, #4]
 800aa36:	b10a      	cbz	r2, 800aa3c <_free_r+0x54>
 800aa38:	42a2      	cmp	r2, r4
 800aa3a:	d9fa      	bls.n	800aa32 <_free_r+0x4a>
 800aa3c:	6819      	ldr	r1, [r3, #0]
 800aa3e:	1858      	adds	r0, r3, r1
 800aa40:	42a0      	cmp	r0, r4
 800aa42:	d10b      	bne.n	800aa5c <_free_r+0x74>
 800aa44:	6820      	ldr	r0, [r4, #0]
 800aa46:	4401      	add	r1, r0
 800aa48:	1858      	adds	r0, r3, r1
 800aa4a:	4282      	cmp	r2, r0
 800aa4c:	6019      	str	r1, [r3, #0]
 800aa4e:	d1dd      	bne.n	800aa0c <_free_r+0x24>
 800aa50:	6810      	ldr	r0, [r2, #0]
 800aa52:	6852      	ldr	r2, [r2, #4]
 800aa54:	605a      	str	r2, [r3, #4]
 800aa56:	4401      	add	r1, r0
 800aa58:	6019      	str	r1, [r3, #0]
 800aa5a:	e7d7      	b.n	800aa0c <_free_r+0x24>
 800aa5c:	d902      	bls.n	800aa64 <_free_r+0x7c>
 800aa5e:	230c      	movs	r3, #12
 800aa60:	602b      	str	r3, [r5, #0]
 800aa62:	e7d3      	b.n	800aa0c <_free_r+0x24>
 800aa64:	6820      	ldr	r0, [r4, #0]
 800aa66:	1821      	adds	r1, r4, r0
 800aa68:	428a      	cmp	r2, r1
 800aa6a:	bf04      	itt	eq
 800aa6c:	6811      	ldreq	r1, [r2, #0]
 800aa6e:	6852      	ldreq	r2, [r2, #4]
 800aa70:	6062      	str	r2, [r4, #4]
 800aa72:	bf04      	itt	eq
 800aa74:	1809      	addeq	r1, r1, r0
 800aa76:	6021      	streq	r1, [r4, #0]
 800aa78:	605c      	str	r4, [r3, #4]
 800aa7a:	e7c7      	b.n	800aa0c <_free_r+0x24>
 800aa7c:	bd38      	pop	{r3, r4, r5, pc}
 800aa7e:	bf00      	nop
 800aa80:	2000023c 	.word	0x2000023c

0800aa84 <_malloc_r>:
 800aa84:	b570      	push	{r4, r5, r6, lr}
 800aa86:	1ccd      	adds	r5, r1, #3
 800aa88:	f025 0503 	bic.w	r5, r5, #3
 800aa8c:	3508      	adds	r5, #8
 800aa8e:	2d0c      	cmp	r5, #12
 800aa90:	bf38      	it	cc
 800aa92:	250c      	movcc	r5, #12
 800aa94:	2d00      	cmp	r5, #0
 800aa96:	4606      	mov	r6, r0
 800aa98:	db01      	blt.n	800aa9e <_malloc_r+0x1a>
 800aa9a:	42a9      	cmp	r1, r5
 800aa9c:	d903      	bls.n	800aaa6 <_malloc_r+0x22>
 800aa9e:	230c      	movs	r3, #12
 800aaa0:	6033      	str	r3, [r6, #0]
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	bd70      	pop	{r4, r5, r6, pc}
 800aaa6:	f000 f9e1 	bl	800ae6c <__malloc_lock>
 800aaaa:	4a21      	ldr	r2, [pc, #132]	; (800ab30 <_malloc_r+0xac>)
 800aaac:	6814      	ldr	r4, [r2, #0]
 800aaae:	4621      	mov	r1, r4
 800aab0:	b991      	cbnz	r1, 800aad8 <_malloc_r+0x54>
 800aab2:	4c20      	ldr	r4, [pc, #128]	; (800ab34 <_malloc_r+0xb0>)
 800aab4:	6823      	ldr	r3, [r4, #0]
 800aab6:	b91b      	cbnz	r3, 800aac0 <_malloc_r+0x3c>
 800aab8:	4630      	mov	r0, r6
 800aaba:	f000 f98f 	bl	800addc <_sbrk_r>
 800aabe:	6020      	str	r0, [r4, #0]
 800aac0:	4629      	mov	r1, r5
 800aac2:	4630      	mov	r0, r6
 800aac4:	f000 f98a 	bl	800addc <_sbrk_r>
 800aac8:	1c43      	adds	r3, r0, #1
 800aaca:	d124      	bne.n	800ab16 <_malloc_r+0x92>
 800aacc:	230c      	movs	r3, #12
 800aace:	6033      	str	r3, [r6, #0]
 800aad0:	4630      	mov	r0, r6
 800aad2:	f000 f9cc 	bl	800ae6e <__malloc_unlock>
 800aad6:	e7e4      	b.n	800aaa2 <_malloc_r+0x1e>
 800aad8:	680b      	ldr	r3, [r1, #0]
 800aada:	1b5b      	subs	r3, r3, r5
 800aadc:	d418      	bmi.n	800ab10 <_malloc_r+0x8c>
 800aade:	2b0b      	cmp	r3, #11
 800aae0:	d90f      	bls.n	800ab02 <_malloc_r+0x7e>
 800aae2:	600b      	str	r3, [r1, #0]
 800aae4:	50cd      	str	r5, [r1, r3]
 800aae6:	18cc      	adds	r4, r1, r3
 800aae8:	4630      	mov	r0, r6
 800aaea:	f000 f9c0 	bl	800ae6e <__malloc_unlock>
 800aaee:	f104 000b 	add.w	r0, r4, #11
 800aaf2:	1d23      	adds	r3, r4, #4
 800aaf4:	f020 0007 	bic.w	r0, r0, #7
 800aaf8:	1ac3      	subs	r3, r0, r3
 800aafa:	d0d3      	beq.n	800aaa4 <_malloc_r+0x20>
 800aafc:	425a      	negs	r2, r3
 800aafe:	50e2      	str	r2, [r4, r3]
 800ab00:	e7d0      	b.n	800aaa4 <_malloc_r+0x20>
 800ab02:	428c      	cmp	r4, r1
 800ab04:	684b      	ldr	r3, [r1, #4]
 800ab06:	bf16      	itet	ne
 800ab08:	6063      	strne	r3, [r4, #4]
 800ab0a:	6013      	streq	r3, [r2, #0]
 800ab0c:	460c      	movne	r4, r1
 800ab0e:	e7eb      	b.n	800aae8 <_malloc_r+0x64>
 800ab10:	460c      	mov	r4, r1
 800ab12:	6849      	ldr	r1, [r1, #4]
 800ab14:	e7cc      	b.n	800aab0 <_malloc_r+0x2c>
 800ab16:	1cc4      	adds	r4, r0, #3
 800ab18:	f024 0403 	bic.w	r4, r4, #3
 800ab1c:	42a0      	cmp	r0, r4
 800ab1e:	d005      	beq.n	800ab2c <_malloc_r+0xa8>
 800ab20:	1a21      	subs	r1, r4, r0
 800ab22:	4630      	mov	r0, r6
 800ab24:	f000 f95a 	bl	800addc <_sbrk_r>
 800ab28:	3001      	adds	r0, #1
 800ab2a:	d0cf      	beq.n	800aacc <_malloc_r+0x48>
 800ab2c:	6025      	str	r5, [r4, #0]
 800ab2e:	e7db      	b.n	800aae8 <_malloc_r+0x64>
 800ab30:	2000023c 	.word	0x2000023c
 800ab34:	20000240 	.word	0x20000240

0800ab38 <__ssputs_r>:
 800ab38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab3c:	688e      	ldr	r6, [r1, #8]
 800ab3e:	429e      	cmp	r6, r3
 800ab40:	4682      	mov	sl, r0
 800ab42:	460c      	mov	r4, r1
 800ab44:	4690      	mov	r8, r2
 800ab46:	4699      	mov	r9, r3
 800ab48:	d837      	bhi.n	800abba <__ssputs_r+0x82>
 800ab4a:	898a      	ldrh	r2, [r1, #12]
 800ab4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab50:	d031      	beq.n	800abb6 <__ssputs_r+0x7e>
 800ab52:	6825      	ldr	r5, [r4, #0]
 800ab54:	6909      	ldr	r1, [r1, #16]
 800ab56:	1a6f      	subs	r7, r5, r1
 800ab58:	6965      	ldr	r5, [r4, #20]
 800ab5a:	2302      	movs	r3, #2
 800ab5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab60:	fb95 f5f3 	sdiv	r5, r5, r3
 800ab64:	f109 0301 	add.w	r3, r9, #1
 800ab68:	443b      	add	r3, r7
 800ab6a:	429d      	cmp	r5, r3
 800ab6c:	bf38      	it	cc
 800ab6e:	461d      	movcc	r5, r3
 800ab70:	0553      	lsls	r3, r2, #21
 800ab72:	d530      	bpl.n	800abd6 <__ssputs_r+0x9e>
 800ab74:	4629      	mov	r1, r5
 800ab76:	f7ff ff85 	bl	800aa84 <_malloc_r>
 800ab7a:	4606      	mov	r6, r0
 800ab7c:	b950      	cbnz	r0, 800ab94 <__ssputs_r+0x5c>
 800ab7e:	230c      	movs	r3, #12
 800ab80:	f8ca 3000 	str.w	r3, [sl]
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab8a:	81a3      	strh	r3, [r4, #12]
 800ab8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab94:	463a      	mov	r2, r7
 800ab96:	6921      	ldr	r1, [r4, #16]
 800ab98:	f7ff fb0e 	bl	800a1b8 <memcpy>
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aba6:	81a3      	strh	r3, [r4, #12]
 800aba8:	6126      	str	r6, [r4, #16]
 800abaa:	6165      	str	r5, [r4, #20]
 800abac:	443e      	add	r6, r7
 800abae:	1bed      	subs	r5, r5, r7
 800abb0:	6026      	str	r6, [r4, #0]
 800abb2:	60a5      	str	r5, [r4, #8]
 800abb4:	464e      	mov	r6, r9
 800abb6:	454e      	cmp	r6, r9
 800abb8:	d900      	bls.n	800abbc <__ssputs_r+0x84>
 800abba:	464e      	mov	r6, r9
 800abbc:	4632      	mov	r2, r6
 800abbe:	4641      	mov	r1, r8
 800abc0:	6820      	ldr	r0, [r4, #0]
 800abc2:	f000 f93a 	bl	800ae3a <memmove>
 800abc6:	68a3      	ldr	r3, [r4, #8]
 800abc8:	1b9b      	subs	r3, r3, r6
 800abca:	60a3      	str	r3, [r4, #8]
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	441e      	add	r6, r3
 800abd0:	6026      	str	r6, [r4, #0]
 800abd2:	2000      	movs	r0, #0
 800abd4:	e7dc      	b.n	800ab90 <__ssputs_r+0x58>
 800abd6:	462a      	mov	r2, r5
 800abd8:	f000 f94a 	bl	800ae70 <_realloc_r>
 800abdc:	4606      	mov	r6, r0
 800abde:	2800      	cmp	r0, #0
 800abe0:	d1e2      	bne.n	800aba8 <__ssputs_r+0x70>
 800abe2:	6921      	ldr	r1, [r4, #16]
 800abe4:	4650      	mov	r0, sl
 800abe6:	f7ff feff 	bl	800a9e8 <_free_r>
 800abea:	e7c8      	b.n	800ab7e <__ssputs_r+0x46>

0800abec <_svfiprintf_r>:
 800abec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf0:	461d      	mov	r5, r3
 800abf2:	898b      	ldrh	r3, [r1, #12]
 800abf4:	061f      	lsls	r7, r3, #24
 800abf6:	b09d      	sub	sp, #116	; 0x74
 800abf8:	4680      	mov	r8, r0
 800abfa:	460c      	mov	r4, r1
 800abfc:	4616      	mov	r6, r2
 800abfe:	d50f      	bpl.n	800ac20 <_svfiprintf_r+0x34>
 800ac00:	690b      	ldr	r3, [r1, #16]
 800ac02:	b96b      	cbnz	r3, 800ac20 <_svfiprintf_r+0x34>
 800ac04:	2140      	movs	r1, #64	; 0x40
 800ac06:	f7ff ff3d 	bl	800aa84 <_malloc_r>
 800ac0a:	6020      	str	r0, [r4, #0]
 800ac0c:	6120      	str	r0, [r4, #16]
 800ac0e:	b928      	cbnz	r0, 800ac1c <_svfiprintf_r+0x30>
 800ac10:	230c      	movs	r3, #12
 800ac12:	f8c8 3000 	str.w	r3, [r8]
 800ac16:	f04f 30ff 	mov.w	r0, #4294967295
 800ac1a:	e0c8      	b.n	800adae <_svfiprintf_r+0x1c2>
 800ac1c:	2340      	movs	r3, #64	; 0x40
 800ac1e:	6163      	str	r3, [r4, #20]
 800ac20:	2300      	movs	r3, #0
 800ac22:	9309      	str	r3, [sp, #36]	; 0x24
 800ac24:	2320      	movs	r3, #32
 800ac26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac2a:	2330      	movs	r3, #48	; 0x30
 800ac2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac30:	9503      	str	r5, [sp, #12]
 800ac32:	f04f 0b01 	mov.w	fp, #1
 800ac36:	4637      	mov	r7, r6
 800ac38:	463d      	mov	r5, r7
 800ac3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ac3e:	b10b      	cbz	r3, 800ac44 <_svfiprintf_r+0x58>
 800ac40:	2b25      	cmp	r3, #37	; 0x25
 800ac42:	d13e      	bne.n	800acc2 <_svfiprintf_r+0xd6>
 800ac44:	ebb7 0a06 	subs.w	sl, r7, r6
 800ac48:	d00b      	beq.n	800ac62 <_svfiprintf_r+0x76>
 800ac4a:	4653      	mov	r3, sl
 800ac4c:	4632      	mov	r2, r6
 800ac4e:	4621      	mov	r1, r4
 800ac50:	4640      	mov	r0, r8
 800ac52:	f7ff ff71 	bl	800ab38 <__ssputs_r>
 800ac56:	3001      	adds	r0, #1
 800ac58:	f000 80a4 	beq.w	800ada4 <_svfiprintf_r+0x1b8>
 800ac5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac5e:	4453      	add	r3, sl
 800ac60:	9309      	str	r3, [sp, #36]	; 0x24
 800ac62:	783b      	ldrb	r3, [r7, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 809d 	beq.w	800ada4 <_svfiprintf_r+0x1b8>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac74:	9304      	str	r3, [sp, #16]
 800ac76:	9307      	str	r3, [sp, #28]
 800ac78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac7c:	931a      	str	r3, [sp, #104]	; 0x68
 800ac7e:	462f      	mov	r7, r5
 800ac80:	2205      	movs	r2, #5
 800ac82:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ac86:	4850      	ldr	r0, [pc, #320]	; (800adc8 <_svfiprintf_r+0x1dc>)
 800ac88:	f7f5 fab2 	bl	80001f0 <memchr>
 800ac8c:	9b04      	ldr	r3, [sp, #16]
 800ac8e:	b9d0      	cbnz	r0, 800acc6 <_svfiprintf_r+0xda>
 800ac90:	06d9      	lsls	r1, r3, #27
 800ac92:	bf44      	itt	mi
 800ac94:	2220      	movmi	r2, #32
 800ac96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ac9a:	071a      	lsls	r2, r3, #28
 800ac9c:	bf44      	itt	mi
 800ac9e:	222b      	movmi	r2, #43	; 0x2b
 800aca0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aca4:	782a      	ldrb	r2, [r5, #0]
 800aca6:	2a2a      	cmp	r2, #42	; 0x2a
 800aca8:	d015      	beq.n	800acd6 <_svfiprintf_r+0xea>
 800acaa:	9a07      	ldr	r2, [sp, #28]
 800acac:	462f      	mov	r7, r5
 800acae:	2000      	movs	r0, #0
 800acb0:	250a      	movs	r5, #10
 800acb2:	4639      	mov	r1, r7
 800acb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acb8:	3b30      	subs	r3, #48	; 0x30
 800acba:	2b09      	cmp	r3, #9
 800acbc:	d94d      	bls.n	800ad5a <_svfiprintf_r+0x16e>
 800acbe:	b1b8      	cbz	r0, 800acf0 <_svfiprintf_r+0x104>
 800acc0:	e00f      	b.n	800ace2 <_svfiprintf_r+0xf6>
 800acc2:	462f      	mov	r7, r5
 800acc4:	e7b8      	b.n	800ac38 <_svfiprintf_r+0x4c>
 800acc6:	4a40      	ldr	r2, [pc, #256]	; (800adc8 <_svfiprintf_r+0x1dc>)
 800acc8:	1a80      	subs	r0, r0, r2
 800acca:	fa0b f000 	lsl.w	r0, fp, r0
 800acce:	4318      	orrs	r0, r3
 800acd0:	9004      	str	r0, [sp, #16]
 800acd2:	463d      	mov	r5, r7
 800acd4:	e7d3      	b.n	800ac7e <_svfiprintf_r+0x92>
 800acd6:	9a03      	ldr	r2, [sp, #12]
 800acd8:	1d11      	adds	r1, r2, #4
 800acda:	6812      	ldr	r2, [r2, #0]
 800acdc:	9103      	str	r1, [sp, #12]
 800acde:	2a00      	cmp	r2, #0
 800ace0:	db01      	blt.n	800ace6 <_svfiprintf_r+0xfa>
 800ace2:	9207      	str	r2, [sp, #28]
 800ace4:	e004      	b.n	800acf0 <_svfiprintf_r+0x104>
 800ace6:	4252      	negs	r2, r2
 800ace8:	f043 0302 	orr.w	r3, r3, #2
 800acec:	9207      	str	r2, [sp, #28]
 800acee:	9304      	str	r3, [sp, #16]
 800acf0:	783b      	ldrb	r3, [r7, #0]
 800acf2:	2b2e      	cmp	r3, #46	; 0x2e
 800acf4:	d10c      	bne.n	800ad10 <_svfiprintf_r+0x124>
 800acf6:	787b      	ldrb	r3, [r7, #1]
 800acf8:	2b2a      	cmp	r3, #42	; 0x2a
 800acfa:	d133      	bne.n	800ad64 <_svfiprintf_r+0x178>
 800acfc:	9b03      	ldr	r3, [sp, #12]
 800acfe:	1d1a      	adds	r2, r3, #4
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	9203      	str	r2, [sp, #12]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	bfb8      	it	lt
 800ad08:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad0c:	3702      	adds	r7, #2
 800ad0e:	9305      	str	r3, [sp, #20]
 800ad10:	4d2e      	ldr	r5, [pc, #184]	; (800adcc <_svfiprintf_r+0x1e0>)
 800ad12:	7839      	ldrb	r1, [r7, #0]
 800ad14:	2203      	movs	r2, #3
 800ad16:	4628      	mov	r0, r5
 800ad18:	f7f5 fa6a 	bl	80001f0 <memchr>
 800ad1c:	b138      	cbz	r0, 800ad2e <_svfiprintf_r+0x142>
 800ad1e:	2340      	movs	r3, #64	; 0x40
 800ad20:	1b40      	subs	r0, r0, r5
 800ad22:	fa03 f000 	lsl.w	r0, r3, r0
 800ad26:	9b04      	ldr	r3, [sp, #16]
 800ad28:	4303      	orrs	r3, r0
 800ad2a:	3701      	adds	r7, #1
 800ad2c:	9304      	str	r3, [sp, #16]
 800ad2e:	7839      	ldrb	r1, [r7, #0]
 800ad30:	4827      	ldr	r0, [pc, #156]	; (800add0 <_svfiprintf_r+0x1e4>)
 800ad32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad36:	2206      	movs	r2, #6
 800ad38:	1c7e      	adds	r6, r7, #1
 800ad3a:	f7f5 fa59 	bl	80001f0 <memchr>
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	d038      	beq.n	800adb4 <_svfiprintf_r+0x1c8>
 800ad42:	4b24      	ldr	r3, [pc, #144]	; (800add4 <_svfiprintf_r+0x1e8>)
 800ad44:	bb13      	cbnz	r3, 800ad8c <_svfiprintf_r+0x1a0>
 800ad46:	9b03      	ldr	r3, [sp, #12]
 800ad48:	3307      	adds	r3, #7
 800ad4a:	f023 0307 	bic.w	r3, r3, #7
 800ad4e:	3308      	adds	r3, #8
 800ad50:	9303      	str	r3, [sp, #12]
 800ad52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad54:	444b      	add	r3, r9
 800ad56:	9309      	str	r3, [sp, #36]	; 0x24
 800ad58:	e76d      	b.n	800ac36 <_svfiprintf_r+0x4a>
 800ad5a:	fb05 3202 	mla	r2, r5, r2, r3
 800ad5e:	2001      	movs	r0, #1
 800ad60:	460f      	mov	r7, r1
 800ad62:	e7a6      	b.n	800acb2 <_svfiprintf_r+0xc6>
 800ad64:	2300      	movs	r3, #0
 800ad66:	3701      	adds	r7, #1
 800ad68:	9305      	str	r3, [sp, #20]
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	250a      	movs	r5, #10
 800ad6e:	4638      	mov	r0, r7
 800ad70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad74:	3a30      	subs	r2, #48	; 0x30
 800ad76:	2a09      	cmp	r2, #9
 800ad78:	d903      	bls.n	800ad82 <_svfiprintf_r+0x196>
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d0c8      	beq.n	800ad10 <_svfiprintf_r+0x124>
 800ad7e:	9105      	str	r1, [sp, #20]
 800ad80:	e7c6      	b.n	800ad10 <_svfiprintf_r+0x124>
 800ad82:	fb05 2101 	mla	r1, r5, r1, r2
 800ad86:	2301      	movs	r3, #1
 800ad88:	4607      	mov	r7, r0
 800ad8a:	e7f0      	b.n	800ad6e <_svfiprintf_r+0x182>
 800ad8c:	ab03      	add	r3, sp, #12
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	4622      	mov	r2, r4
 800ad92:	4b11      	ldr	r3, [pc, #68]	; (800add8 <_svfiprintf_r+0x1ec>)
 800ad94:	a904      	add	r1, sp, #16
 800ad96:	4640      	mov	r0, r8
 800ad98:	f7fc fe08 	bl	80079ac <_printf_float>
 800ad9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ada0:	4681      	mov	r9, r0
 800ada2:	d1d6      	bne.n	800ad52 <_svfiprintf_r+0x166>
 800ada4:	89a3      	ldrh	r3, [r4, #12]
 800ada6:	065b      	lsls	r3, r3, #25
 800ada8:	f53f af35 	bmi.w	800ac16 <_svfiprintf_r+0x2a>
 800adac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adae:	b01d      	add	sp, #116	; 0x74
 800adb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb4:	ab03      	add	r3, sp, #12
 800adb6:	9300      	str	r3, [sp, #0]
 800adb8:	4622      	mov	r2, r4
 800adba:	4b07      	ldr	r3, [pc, #28]	; (800add8 <_svfiprintf_r+0x1ec>)
 800adbc:	a904      	add	r1, sp, #16
 800adbe:	4640      	mov	r0, r8
 800adc0:	f7fd f8aa 	bl	8007f18 <_printf_i>
 800adc4:	e7ea      	b.n	800ad9c <_svfiprintf_r+0x1b0>
 800adc6:	bf00      	nop
 800adc8:	0800b464 	.word	0x0800b464
 800adcc:	0800b46a 	.word	0x0800b46a
 800add0:	0800b46e 	.word	0x0800b46e
 800add4:	080079ad 	.word	0x080079ad
 800add8:	0800ab39 	.word	0x0800ab39

0800addc <_sbrk_r>:
 800addc:	b538      	push	{r3, r4, r5, lr}
 800adde:	4c06      	ldr	r4, [pc, #24]	; (800adf8 <_sbrk_r+0x1c>)
 800ade0:	2300      	movs	r3, #0
 800ade2:	4605      	mov	r5, r0
 800ade4:	4608      	mov	r0, r1
 800ade6:	6023      	str	r3, [r4, #0]
 800ade8:	f7f8 f9be 	bl	8003168 <_sbrk>
 800adec:	1c43      	adds	r3, r0, #1
 800adee:	d102      	bne.n	800adf6 <_sbrk_r+0x1a>
 800adf0:	6823      	ldr	r3, [r4, #0]
 800adf2:	b103      	cbz	r3, 800adf6 <_sbrk_r+0x1a>
 800adf4:	602b      	str	r3, [r5, #0]
 800adf6:	bd38      	pop	{r3, r4, r5, pc}
 800adf8:	2000056c 	.word	0x2000056c

0800adfc <strncmp>:
 800adfc:	b510      	push	{r4, lr}
 800adfe:	b16a      	cbz	r2, 800ae1c <strncmp+0x20>
 800ae00:	3901      	subs	r1, #1
 800ae02:	1884      	adds	r4, r0, r2
 800ae04:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ae08:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d103      	bne.n	800ae18 <strncmp+0x1c>
 800ae10:	42a0      	cmp	r0, r4
 800ae12:	d001      	beq.n	800ae18 <strncmp+0x1c>
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d1f5      	bne.n	800ae04 <strncmp+0x8>
 800ae18:	1a98      	subs	r0, r3, r2
 800ae1a:	bd10      	pop	{r4, pc}
 800ae1c:	4610      	mov	r0, r2
 800ae1e:	e7fc      	b.n	800ae1a <strncmp+0x1e>

0800ae20 <__ascii_wctomb>:
 800ae20:	b149      	cbz	r1, 800ae36 <__ascii_wctomb+0x16>
 800ae22:	2aff      	cmp	r2, #255	; 0xff
 800ae24:	bf85      	ittet	hi
 800ae26:	238a      	movhi	r3, #138	; 0x8a
 800ae28:	6003      	strhi	r3, [r0, #0]
 800ae2a:	700a      	strbls	r2, [r1, #0]
 800ae2c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ae30:	bf98      	it	ls
 800ae32:	2001      	movls	r0, #1
 800ae34:	4770      	bx	lr
 800ae36:	4608      	mov	r0, r1
 800ae38:	4770      	bx	lr

0800ae3a <memmove>:
 800ae3a:	4288      	cmp	r0, r1
 800ae3c:	b510      	push	{r4, lr}
 800ae3e:	eb01 0302 	add.w	r3, r1, r2
 800ae42:	d807      	bhi.n	800ae54 <memmove+0x1a>
 800ae44:	1e42      	subs	r2, r0, #1
 800ae46:	4299      	cmp	r1, r3
 800ae48:	d00a      	beq.n	800ae60 <memmove+0x26>
 800ae4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae4e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ae52:	e7f8      	b.n	800ae46 <memmove+0xc>
 800ae54:	4283      	cmp	r3, r0
 800ae56:	d9f5      	bls.n	800ae44 <memmove+0xa>
 800ae58:	1881      	adds	r1, r0, r2
 800ae5a:	1ad2      	subs	r2, r2, r3
 800ae5c:	42d3      	cmn	r3, r2
 800ae5e:	d100      	bne.n	800ae62 <memmove+0x28>
 800ae60:	bd10      	pop	{r4, pc}
 800ae62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae66:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ae6a:	e7f7      	b.n	800ae5c <memmove+0x22>

0800ae6c <__malloc_lock>:
 800ae6c:	4770      	bx	lr

0800ae6e <__malloc_unlock>:
 800ae6e:	4770      	bx	lr

0800ae70 <_realloc_r>:
 800ae70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae72:	4607      	mov	r7, r0
 800ae74:	4614      	mov	r4, r2
 800ae76:	460e      	mov	r6, r1
 800ae78:	b921      	cbnz	r1, 800ae84 <_realloc_r+0x14>
 800ae7a:	4611      	mov	r1, r2
 800ae7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ae80:	f7ff be00 	b.w	800aa84 <_malloc_r>
 800ae84:	b922      	cbnz	r2, 800ae90 <_realloc_r+0x20>
 800ae86:	f7ff fdaf 	bl	800a9e8 <_free_r>
 800ae8a:	4625      	mov	r5, r4
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae90:	f000 f814 	bl	800aebc <_malloc_usable_size_r>
 800ae94:	42a0      	cmp	r0, r4
 800ae96:	d20f      	bcs.n	800aeb8 <_realloc_r+0x48>
 800ae98:	4621      	mov	r1, r4
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	f7ff fdf2 	bl	800aa84 <_malloc_r>
 800aea0:	4605      	mov	r5, r0
 800aea2:	2800      	cmp	r0, #0
 800aea4:	d0f2      	beq.n	800ae8c <_realloc_r+0x1c>
 800aea6:	4631      	mov	r1, r6
 800aea8:	4622      	mov	r2, r4
 800aeaa:	f7ff f985 	bl	800a1b8 <memcpy>
 800aeae:	4631      	mov	r1, r6
 800aeb0:	4638      	mov	r0, r7
 800aeb2:	f7ff fd99 	bl	800a9e8 <_free_r>
 800aeb6:	e7e9      	b.n	800ae8c <_realloc_r+0x1c>
 800aeb8:	4635      	mov	r5, r6
 800aeba:	e7e7      	b.n	800ae8c <_realloc_r+0x1c>

0800aebc <_malloc_usable_size_r>:
 800aebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aec0:	1f18      	subs	r0, r3, #4
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	bfbc      	itt	lt
 800aec6:	580b      	ldrlt	r3, [r1, r0]
 800aec8:	18c0      	addlt	r0, r0, r3
 800aeca:	4770      	bx	lr

0800aecc <_init>:
 800aecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aece:	bf00      	nop
 800aed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aed2:	bc08      	pop	{r3}
 800aed4:	469e      	mov	lr, r3
 800aed6:	4770      	bx	lr

0800aed8 <_fini>:
 800aed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeda:	bf00      	nop
 800aedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aede:	bc08      	pop	{r3}
 800aee0:	469e      	mov	lr, r3
 800aee2:	4770      	bx	lr
