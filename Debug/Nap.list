
Nap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  08008e18  08008e18  00018e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009370  08009370  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08009370  08009370  00019370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009378  08009378  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009378  08009378  00019378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800937c  0800937c  0001937c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08009380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001f0  08009570  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08009570  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159b9  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000288c  00000000  00000000  00035bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001168  00000000  00000000  00038468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001058  00000000  00000000  000395d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000184c0  00000000  00000000  0003a628  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e398  00000000  00000000  00052ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093cca  00000000  00000000  00060e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4b4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000549c  00000000  00000000  000f4bc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008e00 	.word	0x08008e00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08008e00 	.word	0x08008e00

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <Menu_system_control>:
uint8_t line = 1;
extern uint16_t Left,Right;
extern uint16_t Sensor_Threshold[6];
extern uint16_t Sensor_ADC_Value[6];
void Menu_system_control(uint8_t Menu_type,uint8_t line)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	460a      	mov	r2, r1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	4613      	mov	r3, r2
 8000f66:	71bb      	strb	r3, [r7, #6]
	switch(Menu_type){
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b05      	cmp	r3, #5
 8000f6c:	d826      	bhi.n	8000fbc <Menu_system_control+0x64>
 8000f6e:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <Menu_system_control+0x1c>)
 8000f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f74:	08000f8d 	.word	0x08000f8d
 8000f78:	08000f93 	.word	0x08000f93
 8000f7c:	08000f9d 	.word	0x08000f9d
 8000f80:	08000fa3 	.word	0x08000fa3
 8000f84:	08000fad 	.word	0x08000fad
 8000f88:	08000fb7 	.word	0x08000fb7
	case 0:
		Running();
 8000f8c:	f000 fb98 	bl	80016c0 <Running>
		break;
 8000f90:	e014      	b.n	8000fbc <Menu_system_control+0x64>
	case 1:
		Mainmenu(line);
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 f815 	bl	8000fc4 <Mainmenu>
		break;
 8000f9a:	e00f      	b.n	8000fbc <Menu_system_control+0x64>
	case 2:
		Color_Studying_process();
 8000f9c:	f000 fa80 	bl	80014a0 <Color_Studying_process>
		break;
 8000fa0:	e00c      	b.n	8000fbc <Menu_system_control+0x64>
	case 3:
		PID_menu(line);
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 f8bb 	bl	8001120 <PID_menu>
		break;
 8000faa:	e007      	b.n	8000fbc <Menu_system_control+0x64>
	case 4:
		Speed_menu(line);
 8000fac:	79bb      	ldrb	r3, [r7, #6]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f9ee 	bl	8001390 <Speed_menu>
		break;
 8000fb4:	e002      	b.n	8000fbc <Menu_system_control+0x64>
	case 5:
		LineDetect_show();
 8000fb6:	f000 fabf 	bl	8001538 <LineDetect_show>
		break;
 8000fba:	bf00      	nop
	}
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <Mainmenu>:
void Mainmenu(uint8_t line)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
	switch(line){
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	f200 808b 	bhi.w	80010ee <Mainmenu+0x12a>
 8000fd8:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <Mainmenu+0x1c>)
 8000fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fde:	bf00      	nop
 8000fe0:	08000ff5 	.word	0x08000ff5
 8000fe4:	08001027 	.word	0x08001027
 8000fe8:	08001059 	.word	0x08001059
 8000fec:	0800108b 	.word	0x0800108b
 8000ff0:	080010bd 	.word	0x080010bd
	case 1:
		lcd_send_cmd (0x80|0x00);
 8000ff4:	2080      	movs	r0, #128	; 0x80
 8000ff6:	f000 fc47 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(">Car Run            ");
 8000ffa:	483f      	ldr	r0, [pc, #252]	; (80010f8 <Mainmenu+0x134>)
 8000ffc:	f000 fcf4 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x40);
 8001000:	20c0      	movs	r0, #192	; 0xc0
 8001002:	f000 fc41 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(" Color studying     ");
 8001006:	483d      	ldr	r0, [pc, #244]	; (80010fc <Mainmenu+0x138>)
 8001008:	f000 fcee 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x14);
 800100c:	2094      	movs	r0, #148	; 0x94
 800100e:	f000 fc3b 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(" PID value modify   ");
 8001012:	483b      	ldr	r0, [pc, #236]	; (8001100 <Mainmenu+0x13c>)
 8001014:	f000 fce8 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x54);
 8001018:	20d4      	movs	r0, #212	; 0xd4
 800101a:	f000 fc35 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(" Max speed config   ");
 800101e:	4839      	ldr	r0, [pc, #228]	; (8001104 <Mainmenu+0x140>)
 8001020:	f000 fce2 	bl	80019e8 <lcd_send_string>
		break;
 8001024:	e063      	b.n	80010ee <Mainmenu+0x12a>
	case 2:
		lcd_send_cmd (0x80|0x00);
 8001026:	2080      	movs	r0, #128	; 0x80
 8001028:	f000 fc2e 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(" Car Run            ");
 800102c:	4836      	ldr	r0, [pc, #216]	; (8001108 <Mainmenu+0x144>)
 800102e:	f000 fcdb 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x40);
 8001032:	20c0      	movs	r0, #192	; 0xc0
 8001034:	f000 fc28 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(">Color studying     ");
 8001038:	4834      	ldr	r0, [pc, #208]	; (800110c <Mainmenu+0x148>)
 800103a:	f000 fcd5 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x14);
 800103e:	2094      	movs	r0, #148	; 0x94
 8001040:	f000 fc22 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(" PID value modify   ");
 8001044:	482e      	ldr	r0, [pc, #184]	; (8001100 <Mainmenu+0x13c>)
 8001046:	f000 fccf 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x54);
 800104a:	20d4      	movs	r0, #212	; 0xd4
 800104c:	f000 fc1c 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(" Max speed config   ");
 8001050:	482c      	ldr	r0, [pc, #176]	; (8001104 <Mainmenu+0x140>)
 8001052:	f000 fcc9 	bl	80019e8 <lcd_send_string>
		break;
 8001056:	e04a      	b.n	80010ee <Mainmenu+0x12a>
	case 3:
		lcd_send_cmd (0x80|0x00);
 8001058:	2080      	movs	r0, #128	; 0x80
 800105a:	f000 fc15 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(" Car Run            ");
 800105e:	482a      	ldr	r0, [pc, #168]	; (8001108 <Mainmenu+0x144>)
 8001060:	f000 fcc2 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x40);
 8001064:	20c0      	movs	r0, #192	; 0xc0
 8001066:	f000 fc0f 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(" Color studying     ");
 800106a:	4824      	ldr	r0, [pc, #144]	; (80010fc <Mainmenu+0x138>)
 800106c:	f000 fcbc 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x14);
 8001070:	2094      	movs	r0, #148	; 0x94
 8001072:	f000 fc09 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(">PID value modify   ");
 8001076:	4826      	ldr	r0, [pc, #152]	; (8001110 <Mainmenu+0x14c>)
 8001078:	f000 fcb6 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x54);
 800107c:	20d4      	movs	r0, #212	; 0xd4
 800107e:	f000 fc03 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(" Max speed config   ");
 8001082:	4820      	ldr	r0, [pc, #128]	; (8001104 <Mainmenu+0x140>)
 8001084:	f000 fcb0 	bl	80019e8 <lcd_send_string>
		break;
 8001088:	e031      	b.n	80010ee <Mainmenu+0x12a>
	case 4:
		lcd_send_cmd (0x80|0x00);
 800108a:	2080      	movs	r0, #128	; 0x80
 800108c:	f000 fbfc 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(" Car Run            ");
 8001090:	481d      	ldr	r0, [pc, #116]	; (8001108 <Mainmenu+0x144>)
 8001092:	f000 fca9 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x40);
 8001096:	20c0      	movs	r0, #192	; 0xc0
 8001098:	f000 fbf6 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(" Color studying     ");
 800109c:	4817      	ldr	r0, [pc, #92]	; (80010fc <Mainmenu+0x138>)
 800109e:	f000 fca3 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x14);
 80010a2:	2094      	movs	r0, #148	; 0x94
 80010a4:	f000 fbf0 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(" PID value modify   ");
 80010a8:	4815      	ldr	r0, [pc, #84]	; (8001100 <Mainmenu+0x13c>)
 80010aa:	f000 fc9d 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x54);
 80010ae:	20d4      	movs	r0, #212	; 0xd4
 80010b0:	f000 fbea 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(">Max speed config   ");
 80010b4:	4817      	ldr	r0, [pc, #92]	; (8001114 <Mainmenu+0x150>)
 80010b6:	f000 fc97 	bl	80019e8 <lcd_send_string>
		break;
 80010ba:	e018      	b.n	80010ee <Mainmenu+0x12a>
	case 5:
		lcd_send_cmd (0x80|0x00);
 80010bc:	2080      	movs	r0, #128	; 0x80
 80010be:	f000 fbe3 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(">Line Detect show   ");
 80010c2:	4815      	ldr	r0, [pc, #84]	; (8001118 <Mainmenu+0x154>)
 80010c4:	f000 fc90 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x40);
 80010c8:	20c0      	movs	r0, #192	; 0xc0
 80010ca:	f000 fbdd 	bl	8001888 <lcd_send_cmd>
		lcd_send_string("                    ");
 80010ce:	4813      	ldr	r0, [pc, #76]	; (800111c <Mainmenu+0x158>)
 80010d0:	f000 fc8a 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x14);
 80010d4:	2094      	movs	r0, #148	; 0x94
 80010d6:	f000 fbd7 	bl	8001888 <lcd_send_cmd>
		lcd_send_string("                    ");
 80010da:	4810      	ldr	r0, [pc, #64]	; (800111c <Mainmenu+0x158>)
 80010dc:	f000 fc84 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x54);
 80010e0:	20d4      	movs	r0, #212	; 0xd4
 80010e2:	f000 fbd1 	bl	8001888 <lcd_send_cmd>
		lcd_send_string("                    ");
 80010e6:	480d      	ldr	r0, [pc, #52]	; (800111c <Mainmenu+0x158>)
 80010e8:	f000 fc7e 	bl	80019e8 <lcd_send_string>
		break;
 80010ec:	bf00      	nop
	}
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	08008e18 	.word	0x08008e18
 80010fc:	08008e30 	.word	0x08008e30
 8001100:	08008e48 	.word	0x08008e48
 8001104:	08008e60 	.word	0x08008e60
 8001108:	08008e78 	.word	0x08008e78
 800110c:	08008e90 	.word	0x08008e90
 8001110:	08008ea8 	.word	0x08008ea8
 8001114:	08008ec0 	.word	0x08008ec0
 8001118:	08008ed8 	.word	0x08008ed8
 800111c:	08008ef0 	.word	0x08008ef0

08001120 <PID_menu>:
void PID_menu(uint8_t line){
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]

	switch(line){
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	3b01      	subs	r3, #1
 800112e:	2b03      	cmp	r3, #3
 8001130:	f200 810c 	bhi.w	800134c <PID_menu+0x22c>
 8001134:	a201      	add	r2, pc, #4	; (adr r2, 800113c <PID_menu+0x1c>)
 8001136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113a:	bf00      	nop
 800113c:	0800114d 	.word	0x0800114d
 8001140:	080011cd 	.word	0x080011cd
 8001144:	0800124d 	.word	0x0800124d
 8001148:	080012cd 	.word	0x080012cd
	case 1:
		sprintf(kp_str,">Kp = %1.2f",(float)Kp);
 800114c:	4b81      	ldr	r3, [pc, #516]	; (8001354 <PID_menu+0x234>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fa01 	bl	8000558 <__aeabi_f2d>
 8001156:	4603      	mov	r3, r0
 8001158:	460c      	mov	r4, r1
 800115a:	461a      	mov	r2, r3
 800115c:	4623      	mov	r3, r4
 800115e:	497e      	ldr	r1, [pc, #504]	; (8001358 <PID_menu+0x238>)
 8001160:	487e      	ldr	r0, [pc, #504]	; (800135c <PID_menu+0x23c>)
 8001162:	f006 fa6b 	bl	800763c <siprintf>
		lcd_send_cmd (0x80|0x00);
 8001166:	2080      	movs	r0, #128	; 0x80
 8001168:	f000 fb8e 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(kp_str);
 800116c:	487b      	ldr	r0, [pc, #492]	; (800135c <PID_menu+0x23c>)
 800116e:	f000 fc3b 	bl	80019e8 <lcd_send_string>
		sprintf(ki_str," Ki = %1.2f",Ki);
 8001172:	4b7b      	ldr	r3, [pc, #492]	; (8001360 <PID_menu+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9ee 	bl	8000558 <__aeabi_f2d>
 800117c:	4603      	mov	r3, r0
 800117e:	460c      	mov	r4, r1
 8001180:	461a      	mov	r2, r3
 8001182:	4623      	mov	r3, r4
 8001184:	4977      	ldr	r1, [pc, #476]	; (8001364 <PID_menu+0x244>)
 8001186:	4878      	ldr	r0, [pc, #480]	; (8001368 <PID_menu+0x248>)
 8001188:	f006 fa58 	bl	800763c <siprintf>
		lcd_send_cmd (0x80|0x40);
 800118c:	20c0      	movs	r0, #192	; 0xc0
 800118e:	f000 fb7b 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(ki_str);
 8001192:	4875      	ldr	r0, [pc, #468]	; (8001368 <PID_menu+0x248>)
 8001194:	f000 fc28 	bl	80019e8 <lcd_send_string>
		sprintf(kd_str," Kd = %1.2f",Kd);
 8001198:	4b74      	ldr	r3, [pc, #464]	; (800136c <PID_menu+0x24c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9db 	bl	8000558 <__aeabi_f2d>
 80011a2:	4603      	mov	r3, r0
 80011a4:	460c      	mov	r4, r1
 80011a6:	461a      	mov	r2, r3
 80011a8:	4623      	mov	r3, r4
 80011aa:	4971      	ldr	r1, [pc, #452]	; (8001370 <PID_menu+0x250>)
 80011ac:	4871      	ldr	r0, [pc, #452]	; (8001374 <PID_menu+0x254>)
 80011ae:	f006 fa45 	bl	800763c <siprintf>
		lcd_send_cmd (0x80|0x14);
 80011b2:	2094      	movs	r0, #148	; 0x94
 80011b4:	f000 fb68 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(kd_str);
 80011b8:	486e      	ldr	r0, [pc, #440]	; (8001374 <PID_menu+0x254>)
 80011ba:	f000 fc15 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x54);
 80011be:	20d4      	movs	r0, #212	; 0xd4
 80011c0:	f000 fb62 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(" Save & return      ");
 80011c4:	486c      	ldr	r0, [pc, #432]	; (8001378 <PID_menu+0x258>)
 80011c6:	f000 fc0f 	bl	80019e8 <lcd_send_string>
		break;
 80011ca:	e0bf      	b.n	800134c <PID_menu+0x22c>
	case 2:
		sprintf(kp_str," Kp = %1.2f",Kp);
 80011cc:	4b61      	ldr	r3, [pc, #388]	; (8001354 <PID_menu+0x234>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9c1 	bl	8000558 <__aeabi_f2d>
 80011d6:	4603      	mov	r3, r0
 80011d8:	460c      	mov	r4, r1
 80011da:	461a      	mov	r2, r3
 80011dc:	4623      	mov	r3, r4
 80011de:	4967      	ldr	r1, [pc, #412]	; (800137c <PID_menu+0x25c>)
 80011e0:	485e      	ldr	r0, [pc, #376]	; (800135c <PID_menu+0x23c>)
 80011e2:	f006 fa2b 	bl	800763c <siprintf>
		lcd_send_cmd (0x80|0x00);
 80011e6:	2080      	movs	r0, #128	; 0x80
 80011e8:	f000 fb4e 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(kp_str);
 80011ec:	485b      	ldr	r0, [pc, #364]	; (800135c <PID_menu+0x23c>)
 80011ee:	f000 fbfb 	bl	80019e8 <lcd_send_string>
		sprintf(ki_str,">Ki = %1.2f",Ki);
 80011f2:	4b5b      	ldr	r3, [pc, #364]	; (8001360 <PID_menu+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f9ae 	bl	8000558 <__aeabi_f2d>
 80011fc:	4603      	mov	r3, r0
 80011fe:	460c      	mov	r4, r1
 8001200:	461a      	mov	r2, r3
 8001202:	4623      	mov	r3, r4
 8001204:	495e      	ldr	r1, [pc, #376]	; (8001380 <PID_menu+0x260>)
 8001206:	4858      	ldr	r0, [pc, #352]	; (8001368 <PID_menu+0x248>)
 8001208:	f006 fa18 	bl	800763c <siprintf>
		lcd_send_cmd (0x80|0x40);
 800120c:	20c0      	movs	r0, #192	; 0xc0
 800120e:	f000 fb3b 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(ki_str);
 8001212:	4855      	ldr	r0, [pc, #340]	; (8001368 <PID_menu+0x248>)
 8001214:	f000 fbe8 	bl	80019e8 <lcd_send_string>
		sprintf(kd_str," Kd = %1.2f",Kd);
 8001218:	4b54      	ldr	r3, [pc, #336]	; (800136c <PID_menu+0x24c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f99b 	bl	8000558 <__aeabi_f2d>
 8001222:	4603      	mov	r3, r0
 8001224:	460c      	mov	r4, r1
 8001226:	461a      	mov	r2, r3
 8001228:	4623      	mov	r3, r4
 800122a:	4951      	ldr	r1, [pc, #324]	; (8001370 <PID_menu+0x250>)
 800122c:	4851      	ldr	r0, [pc, #324]	; (8001374 <PID_menu+0x254>)
 800122e:	f006 fa05 	bl	800763c <siprintf>
		lcd_send_cmd (0x80|0x14);
 8001232:	2094      	movs	r0, #148	; 0x94
 8001234:	f000 fb28 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(kd_str);
 8001238:	484e      	ldr	r0, [pc, #312]	; (8001374 <PID_menu+0x254>)
 800123a:	f000 fbd5 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x54);
 800123e:	20d4      	movs	r0, #212	; 0xd4
 8001240:	f000 fb22 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(" Save & return     ");
 8001244:	484f      	ldr	r0, [pc, #316]	; (8001384 <PID_menu+0x264>)
 8001246:	f000 fbcf 	bl	80019e8 <lcd_send_string>
		break;
 800124a:	e07f      	b.n	800134c <PID_menu+0x22c>
	case 3:
		sprintf(kp_str," Kp = %1.2f",Kp);
 800124c:	4b41      	ldr	r3, [pc, #260]	; (8001354 <PID_menu+0x234>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f981 	bl	8000558 <__aeabi_f2d>
 8001256:	4603      	mov	r3, r0
 8001258:	460c      	mov	r4, r1
 800125a:	461a      	mov	r2, r3
 800125c:	4623      	mov	r3, r4
 800125e:	4947      	ldr	r1, [pc, #284]	; (800137c <PID_menu+0x25c>)
 8001260:	483e      	ldr	r0, [pc, #248]	; (800135c <PID_menu+0x23c>)
 8001262:	f006 f9eb 	bl	800763c <siprintf>
		lcd_send_cmd (0x80|0x00);
 8001266:	2080      	movs	r0, #128	; 0x80
 8001268:	f000 fb0e 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(kp_str);
 800126c:	483b      	ldr	r0, [pc, #236]	; (800135c <PID_menu+0x23c>)
 800126e:	f000 fbbb 	bl	80019e8 <lcd_send_string>
		sprintf(ki_str," Ki = %1.2f",Ki);
 8001272:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <PID_menu+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f96e 	bl	8000558 <__aeabi_f2d>
 800127c:	4603      	mov	r3, r0
 800127e:	460c      	mov	r4, r1
 8001280:	461a      	mov	r2, r3
 8001282:	4623      	mov	r3, r4
 8001284:	4937      	ldr	r1, [pc, #220]	; (8001364 <PID_menu+0x244>)
 8001286:	4838      	ldr	r0, [pc, #224]	; (8001368 <PID_menu+0x248>)
 8001288:	f006 f9d8 	bl	800763c <siprintf>
		lcd_send_cmd (0x80|0x40);
 800128c:	20c0      	movs	r0, #192	; 0xc0
 800128e:	f000 fafb 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(ki_str);
 8001292:	4835      	ldr	r0, [pc, #212]	; (8001368 <PID_menu+0x248>)
 8001294:	f000 fba8 	bl	80019e8 <lcd_send_string>
		sprintf(kd_str,">Kd = %1.2f",Kd);
 8001298:	4b34      	ldr	r3, [pc, #208]	; (800136c <PID_menu+0x24c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f95b 	bl	8000558 <__aeabi_f2d>
 80012a2:	4603      	mov	r3, r0
 80012a4:	460c      	mov	r4, r1
 80012a6:	461a      	mov	r2, r3
 80012a8:	4623      	mov	r3, r4
 80012aa:	4937      	ldr	r1, [pc, #220]	; (8001388 <PID_menu+0x268>)
 80012ac:	4831      	ldr	r0, [pc, #196]	; (8001374 <PID_menu+0x254>)
 80012ae:	f006 f9c5 	bl	800763c <siprintf>
		lcd_send_cmd (0x80|0x14);
 80012b2:	2094      	movs	r0, #148	; 0x94
 80012b4:	f000 fae8 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(kd_str);
 80012b8:	482e      	ldr	r0, [pc, #184]	; (8001374 <PID_menu+0x254>)
 80012ba:	f000 fb95 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x54);
 80012be:	20d4      	movs	r0, #212	; 0xd4
 80012c0:	f000 fae2 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(" Save & return     ");
 80012c4:	482f      	ldr	r0, [pc, #188]	; (8001384 <PID_menu+0x264>)
 80012c6:	f000 fb8f 	bl	80019e8 <lcd_send_string>
		break;
 80012ca:	e03f      	b.n	800134c <PID_menu+0x22c>
	case 4:
		sprintf(kp_str," Kp = %1.2f",Kp);
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <PID_menu+0x234>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f941 	bl	8000558 <__aeabi_f2d>
 80012d6:	4603      	mov	r3, r0
 80012d8:	460c      	mov	r4, r1
 80012da:	461a      	mov	r2, r3
 80012dc:	4623      	mov	r3, r4
 80012de:	4927      	ldr	r1, [pc, #156]	; (800137c <PID_menu+0x25c>)
 80012e0:	481e      	ldr	r0, [pc, #120]	; (800135c <PID_menu+0x23c>)
 80012e2:	f006 f9ab 	bl	800763c <siprintf>
		lcd_send_cmd (0x80|0x00);
 80012e6:	2080      	movs	r0, #128	; 0x80
 80012e8:	f000 face 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(kp_str);
 80012ec:	481b      	ldr	r0, [pc, #108]	; (800135c <PID_menu+0x23c>)
 80012ee:	f000 fb7b 	bl	80019e8 <lcd_send_string>
		sprintf(ki_str," Ki = %1.2f",Ki);
 80012f2:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <PID_menu+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f92e 	bl	8000558 <__aeabi_f2d>
 80012fc:	4603      	mov	r3, r0
 80012fe:	460c      	mov	r4, r1
 8001300:	461a      	mov	r2, r3
 8001302:	4623      	mov	r3, r4
 8001304:	4917      	ldr	r1, [pc, #92]	; (8001364 <PID_menu+0x244>)
 8001306:	4818      	ldr	r0, [pc, #96]	; (8001368 <PID_menu+0x248>)
 8001308:	f006 f998 	bl	800763c <siprintf>
		lcd_send_cmd (0x80|0x40);
 800130c:	20c0      	movs	r0, #192	; 0xc0
 800130e:	f000 fabb 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(ki_str);
 8001312:	4815      	ldr	r0, [pc, #84]	; (8001368 <PID_menu+0x248>)
 8001314:	f000 fb68 	bl	80019e8 <lcd_send_string>
		sprintf(kd_str," Kd = %1.2f",Kd);
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <PID_menu+0x24c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f91b 	bl	8000558 <__aeabi_f2d>
 8001322:	4603      	mov	r3, r0
 8001324:	460c      	mov	r4, r1
 8001326:	461a      	mov	r2, r3
 8001328:	4623      	mov	r3, r4
 800132a:	4911      	ldr	r1, [pc, #68]	; (8001370 <PID_menu+0x250>)
 800132c:	4811      	ldr	r0, [pc, #68]	; (8001374 <PID_menu+0x254>)
 800132e:	f006 f985 	bl	800763c <siprintf>
		lcd_send_cmd (0x80|0x14);
 8001332:	2094      	movs	r0, #148	; 0x94
 8001334:	f000 faa8 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(kd_str);
 8001338:	480e      	ldr	r0, [pc, #56]	; (8001374 <PID_menu+0x254>)
 800133a:	f000 fb55 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x54);
 800133e:	20d4      	movs	r0, #212	; 0xd4
 8001340:	f000 faa2 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(">Save & return     ");
 8001344:	4811      	ldr	r0, [pc, #68]	; (800138c <PID_menu+0x26c>)
 8001346:	f000 fb4f 	bl	80019e8 <lcd_send_string>
		break;
 800134a:	bf00      	nop
	}
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	bd90      	pop	{r4, r7, pc}
 8001354:	20000218 	.word	0x20000218
 8001358:	08008f08 	.word	0x08008f08
 800135c:	20000278 	.word	0x20000278
 8001360:	2000021c 	.word	0x2000021c
 8001364:	08008f14 	.word	0x08008f14
 8001368:	20000258 	.word	0x20000258
 800136c:	20000220 	.word	0x20000220
 8001370:	08008f20 	.word	0x08008f20
 8001374:	20000268 	.word	0x20000268
 8001378:	08008f2c 	.word	0x08008f2c
 800137c:	08008f44 	.word	0x08008f44
 8001380:	08008f50 	.word	0x08008f50
 8001384:	08008f5c 	.word	0x08008f5c
 8001388:	08008f70 	.word	0x08008f70
 800138c:	08008f7c 	.word	0x08008f7c

08001390 <Speed_menu>:
void Speed_menu(uint8_t line)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
	switch(line){
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d025      	beq.n	80013ec <Speed_menu+0x5c>
 80013a0:	2b03      	cmp	r3, #3
 80013a2:	d044      	beq.n	800142e <Speed_menu+0x9e>
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d000      	beq.n	80013aa <Speed_menu+0x1a>
		lcd_send_string(Right_str);
		lcd_send_cmd (0x80|0x14);
		lcd_send_string(">Save & return     ");
		break;
	}
}
 80013a8:	e062      	b.n	8001470 <Speed_menu+0xe0>
		sprintf(Left_str,">Left Engine = %u",Left);
 80013aa:	4b33      	ldr	r3, [pc, #204]	; (8001478 <Speed_menu+0xe8>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4932      	ldr	r1, [pc, #200]	; (800147c <Speed_menu+0xec>)
 80013b2:	4833      	ldr	r0, [pc, #204]	; (8001480 <Speed_menu+0xf0>)
 80013b4:	f006 f942 	bl	800763c <siprintf>
		lcd_send_cmd (0x80|0x00);
 80013b8:	2080      	movs	r0, #128	; 0x80
 80013ba:	f000 fa65 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(Left_str);
 80013be:	4830      	ldr	r0, [pc, #192]	; (8001480 <Speed_menu+0xf0>)
 80013c0:	f000 fb12 	bl	80019e8 <lcd_send_string>
		sprintf(Right_str," Right Engine = %u",Right);
 80013c4:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <Speed_menu+0xf4>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	492f      	ldr	r1, [pc, #188]	; (8001488 <Speed_menu+0xf8>)
 80013cc:	482f      	ldr	r0, [pc, #188]	; (800148c <Speed_menu+0xfc>)
 80013ce:	f006 f935 	bl	800763c <siprintf>
		lcd_send_cmd (0x80|0x40);
 80013d2:	20c0      	movs	r0, #192	; 0xc0
 80013d4:	f000 fa58 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(Right_str);
 80013d8:	482c      	ldr	r0, [pc, #176]	; (800148c <Speed_menu+0xfc>)
 80013da:	f000 fb05 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x14);
 80013de:	2094      	movs	r0, #148	; 0x94
 80013e0:	f000 fa52 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(" Save & return     ");
 80013e4:	482a      	ldr	r0, [pc, #168]	; (8001490 <Speed_menu+0x100>)
 80013e6:	f000 faff 	bl	80019e8 <lcd_send_string>
		break;
 80013ea:	e041      	b.n	8001470 <Speed_menu+0xe0>
		sprintf(Left_str," Left Engine = %u",Left);
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <Speed_menu+0xe8>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4928      	ldr	r1, [pc, #160]	; (8001494 <Speed_menu+0x104>)
 80013f4:	4822      	ldr	r0, [pc, #136]	; (8001480 <Speed_menu+0xf0>)
 80013f6:	f006 f921 	bl	800763c <siprintf>
		lcd_send_cmd (0x80|0x00);
 80013fa:	2080      	movs	r0, #128	; 0x80
 80013fc:	f000 fa44 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(Left_str);
 8001400:	481f      	ldr	r0, [pc, #124]	; (8001480 <Speed_menu+0xf0>)
 8001402:	f000 faf1 	bl	80019e8 <lcd_send_string>
		sprintf(Right_str,">Right Engine = %u",Right);
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <Speed_menu+0xf4>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	4922      	ldr	r1, [pc, #136]	; (8001498 <Speed_menu+0x108>)
 800140e:	481f      	ldr	r0, [pc, #124]	; (800148c <Speed_menu+0xfc>)
 8001410:	f006 f914 	bl	800763c <siprintf>
		lcd_send_cmd (0x80|0x40);
 8001414:	20c0      	movs	r0, #192	; 0xc0
 8001416:	f000 fa37 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(Right_str);
 800141a:	481c      	ldr	r0, [pc, #112]	; (800148c <Speed_menu+0xfc>)
 800141c:	f000 fae4 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x14);
 8001420:	2094      	movs	r0, #148	; 0x94
 8001422:	f000 fa31 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(" Save & return     ");
 8001426:	481a      	ldr	r0, [pc, #104]	; (8001490 <Speed_menu+0x100>)
 8001428:	f000 fade 	bl	80019e8 <lcd_send_string>
		break;
 800142c:	e020      	b.n	8001470 <Speed_menu+0xe0>
		sprintf(Left_str," Left Engine = %u",Left);
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <Speed_menu+0xe8>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	4917      	ldr	r1, [pc, #92]	; (8001494 <Speed_menu+0x104>)
 8001436:	4812      	ldr	r0, [pc, #72]	; (8001480 <Speed_menu+0xf0>)
 8001438:	f006 f900 	bl	800763c <siprintf>
		lcd_send_cmd (0x80|0x00);
 800143c:	2080      	movs	r0, #128	; 0x80
 800143e:	f000 fa23 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(Left_str);
 8001442:	480f      	ldr	r0, [pc, #60]	; (8001480 <Speed_menu+0xf0>)
 8001444:	f000 fad0 	bl	80019e8 <lcd_send_string>
		sprintf(Right_str," Right Engine = %u",Right);
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <Speed_menu+0xf4>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	490e      	ldr	r1, [pc, #56]	; (8001488 <Speed_menu+0xf8>)
 8001450:	480e      	ldr	r0, [pc, #56]	; (800148c <Speed_menu+0xfc>)
 8001452:	f006 f8f3 	bl	800763c <siprintf>
		lcd_send_cmd (0x80|0x40);
 8001456:	20c0      	movs	r0, #192	; 0xc0
 8001458:	f000 fa16 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(Right_str);
 800145c:	480b      	ldr	r0, [pc, #44]	; (800148c <Speed_menu+0xfc>)
 800145e:	f000 fac3 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x14);
 8001462:	2094      	movs	r0, #148	; 0x94
 8001464:	f000 fa10 	bl	8001888 <lcd_send_cmd>
		lcd_send_string(">Save & return     ");
 8001468:	480c      	ldr	r0, [pc, #48]	; (800149c <Speed_menu+0x10c>)
 800146a:	f000 fabd 	bl	80019e8 <lcd_send_string>
		break;
 800146e:	bf00      	nop
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000212 	.word	0x20000212
 800147c:	08008f90 	.word	0x08008f90
 8001480:	20000244 	.word	0x20000244
 8001484:	20000214 	.word	0x20000214
 8001488:	08008fa4 	.word	0x08008fa4
 800148c:	20000230 	.word	0x20000230
 8001490:	08008f5c 	.word	0x08008f5c
 8001494:	08008fb8 	.word	0x08008fb8
 8001498:	08008fcc 	.word	0x08008fcc
 800149c:	08008f7c 	.word	0x08008f7c

080014a0 <Color_Studying_process>:
void Color_Studying_process(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
	for(int i = 0;i<5;i++){
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	e022      	b.n	80014f2 <Color_Studying_process+0x52>
	lcd_send_cmd (0x80|0x00);
 80014ac:	2080      	movs	r0, #128	; 0x80
 80014ae:	f000 f9eb 	bl	8001888 <lcd_send_cmd>
	lcd_send_string("Processing .       ");
 80014b2:	481c      	ldr	r0, [pc, #112]	; (8001524 <Color_Studying_process+0x84>)
 80014b4:	f000 fa98 	bl	80019e8 <lcd_send_string>
	HAL_Delay(500);
 80014b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014bc:	f001 fcc6 	bl	8002e4c <HAL_Delay>
	lcd_send_cmd (0x80|0x00);
 80014c0:	2080      	movs	r0, #128	; 0x80
 80014c2:	f000 f9e1 	bl	8001888 <lcd_send_cmd>
	lcd_send_string("Processing . .     ");
 80014c6:	4818      	ldr	r0, [pc, #96]	; (8001528 <Color_Studying_process+0x88>)
 80014c8:	f000 fa8e 	bl	80019e8 <lcd_send_string>
	HAL_Delay(500);
 80014cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014d0:	f001 fcbc 	bl	8002e4c <HAL_Delay>
	lcd_send_cmd (0x80|0x00);
 80014d4:	2080      	movs	r0, #128	; 0x80
 80014d6:	f000 f9d7 	bl	8001888 <lcd_send_cmd>
	lcd_send_string("Processing . . .   ");
 80014da:	4814      	ldr	r0, [pc, #80]	; (800152c <Color_Studying_process+0x8c>)
 80014dc:	f000 fa84 	bl	80019e8 <lcd_send_string>
	HAL_Delay(500);
 80014e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014e4:	f001 fcb2 	bl	8002e4c <HAL_Delay>
	lcd_clear();
 80014e8:	f000 fa2e 	bl	8001948 <lcd_clear>
	for(int i = 0;i<5;i++){
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3301      	adds	r3, #1
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	ddd9      	ble.n	80014ac <Color_Studying_process+0xc>
	}
	HAL_Delay(100);
 80014f8:	2064      	movs	r0, #100	; 0x64
 80014fa:	f001 fca7 	bl	8002e4c <HAL_Delay>
	lcd_send_cmd (0x80|0x00);
 80014fe:	2080      	movs	r0, #128	; 0x80
 8001500:	f000 f9c2 	bl	8001888 <lcd_send_cmd>
	lcd_send_string("Done               ");
 8001504:	480a      	ldr	r0, [pc, #40]	; (8001530 <Color_Studying_process+0x90>)
 8001506:	f000 fa6f 	bl	80019e8 <lcd_send_string>
	HAL_Delay(500);
 800150a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800150e:	f001 fc9d 	bl	8002e4c <HAL_Delay>
	Menu_type = Main_menu;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <Color_Studying_process+0x94>)
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
	lcd_clear();
 8001518:	f000 fa16 	bl	8001948 <lcd_clear>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	08008fe0 	.word	0x08008fe0
 8001528:	08008ff4 	.word	0x08008ff4
 800152c:	08009008 	.word	0x08009008
 8001530:	0800901c 	.word	0x0800901c
 8001534:	20000001 	.word	0x20000001

08001538 <LineDetect_show>:
void LineDetect_show(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80|0x00);
 800153e:	2080      	movs	r0, #128	; 0x80
 8001540:	f000 f9a2 	bl	8001888 <lcd_send_cmd>
	lcd_send_string("Line Detect        ");
 8001544:	4857      	ldr	r0, [pc, #348]	; (80016a4 <LineDetect_show+0x16c>)
 8001546:	f000 fa4f 	bl	80019e8 <lcd_send_string>
	lcd_send_cmd (0x80|0x40);
 800154a:	20c0      	movs	r0, #192	; 0xc0
 800154c:	f000 f99c 	bl	8001888 <lcd_send_cmd>
	lcd_send_string("Press C for cancer ");
 8001550:	4855      	ldr	r0, [pc, #340]	; (80016a8 <LineDetect_show+0x170>)
 8001552:	f000 fa49 	bl	80019e8 <lcd_send_string>
	while(cancer_menu){
 8001556:	e099      	b.n	800168c <LineDetect_show+0x154>
		for(int i=0;i<6;i++)
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	e092      	b.n	8001684 <LineDetect_show+0x14c>
		{
			if(Sensor_ADC_Value[0] > Sensor_Threshold[0]){
 800155e:	4b53      	ldr	r3, [pc, #332]	; (80016ac <LineDetect_show+0x174>)
 8001560:	881a      	ldrh	r2, [r3, #0]
 8001562:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <LineDetect_show+0x178>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d905      	bls.n	8001576 <LineDetect_show+0x3e>
				lcd_send_cmd (0x80|0x16);
 800156a:	2096      	movs	r0, #150	; 0x96
 800156c:	f000 f98c 	bl	8001888 <lcd_send_cmd>
				lcd_send_string("1");}
 8001570:	4850      	ldr	r0, [pc, #320]	; (80016b4 <LineDetect_show+0x17c>)
 8001572:	f000 fa39 	bl	80019e8 <lcd_send_string>
			if(Sensor_ADC_Value[1] > Sensor_Threshold[1]){
 8001576:	4b4d      	ldr	r3, [pc, #308]	; (80016ac <LineDetect_show+0x174>)
 8001578:	885a      	ldrh	r2, [r3, #2]
 800157a:	4b4d      	ldr	r3, [pc, #308]	; (80016b0 <LineDetect_show+0x178>)
 800157c:	885b      	ldrh	r3, [r3, #2]
 800157e:	429a      	cmp	r2, r3
 8001580:	d905      	bls.n	800158e <LineDetect_show+0x56>
				lcd_send_cmd (0x80|0x18);
 8001582:	2098      	movs	r0, #152	; 0x98
 8001584:	f000 f980 	bl	8001888 <lcd_send_cmd>
				lcd_send_string("1");}
 8001588:	484a      	ldr	r0, [pc, #296]	; (80016b4 <LineDetect_show+0x17c>)
 800158a:	f000 fa2d 	bl	80019e8 <lcd_send_string>
			if(Sensor_ADC_Value[2] > Sensor_Threshold[2]){
 800158e:	4b47      	ldr	r3, [pc, #284]	; (80016ac <LineDetect_show+0x174>)
 8001590:	889a      	ldrh	r2, [r3, #4]
 8001592:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <LineDetect_show+0x178>)
 8001594:	889b      	ldrh	r3, [r3, #4]
 8001596:	429a      	cmp	r2, r3
 8001598:	d905      	bls.n	80015a6 <LineDetect_show+0x6e>
				lcd_send_cmd (0x80|0x1A);
 800159a:	209a      	movs	r0, #154	; 0x9a
 800159c:	f000 f974 	bl	8001888 <lcd_send_cmd>
				lcd_send_string("1");}
 80015a0:	4844      	ldr	r0, [pc, #272]	; (80016b4 <LineDetect_show+0x17c>)
 80015a2:	f000 fa21 	bl	80019e8 <lcd_send_string>
			if(Sensor_ADC_Value[3] > Sensor_Threshold[3]){
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <LineDetect_show+0x174>)
 80015a8:	88da      	ldrh	r2, [r3, #6]
 80015aa:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <LineDetect_show+0x178>)
 80015ac:	88db      	ldrh	r3, [r3, #6]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d905      	bls.n	80015be <LineDetect_show+0x86>
				lcd_send_cmd (0x80|0x1C);
 80015b2:	209c      	movs	r0, #156	; 0x9c
 80015b4:	f000 f968 	bl	8001888 <lcd_send_cmd>
				lcd_send_string("1");}
 80015b8:	483e      	ldr	r0, [pc, #248]	; (80016b4 <LineDetect_show+0x17c>)
 80015ba:	f000 fa15 	bl	80019e8 <lcd_send_string>
			if(Sensor_ADC_Value[4] > Sensor_Threshold[4]){
 80015be:	4b3b      	ldr	r3, [pc, #236]	; (80016ac <LineDetect_show+0x174>)
 80015c0:	891a      	ldrh	r2, [r3, #8]
 80015c2:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <LineDetect_show+0x178>)
 80015c4:	891b      	ldrh	r3, [r3, #8]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d905      	bls.n	80015d6 <LineDetect_show+0x9e>
				lcd_send_cmd (0x80|0x1E);
 80015ca:	209e      	movs	r0, #158	; 0x9e
 80015cc:	f000 f95c 	bl	8001888 <lcd_send_cmd>
				lcd_send_string("1");}
 80015d0:	4838      	ldr	r0, [pc, #224]	; (80016b4 <LineDetect_show+0x17c>)
 80015d2:	f000 fa09 	bl	80019e8 <lcd_send_string>
			if(Sensor_ADC_Value[5] > Sensor_Threshold[5]){
 80015d6:	4b35      	ldr	r3, [pc, #212]	; (80016ac <LineDetect_show+0x174>)
 80015d8:	895a      	ldrh	r2, [r3, #10]
 80015da:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <LineDetect_show+0x178>)
 80015dc:	895b      	ldrh	r3, [r3, #10]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d905      	bls.n	80015ee <LineDetect_show+0xb6>
				lcd_send_cmd (0x80|0x20);
 80015e2:	20a0      	movs	r0, #160	; 0xa0
 80015e4:	f000 f950 	bl	8001888 <lcd_send_cmd>
				lcd_send_string("1");}
 80015e8:	4832      	ldr	r0, [pc, #200]	; (80016b4 <LineDetect_show+0x17c>)
 80015ea:	f000 f9fd 	bl	80019e8 <lcd_send_string>
			if(Sensor_ADC_Value[0] < Sensor_Threshold[0]){
 80015ee:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <LineDetect_show+0x174>)
 80015f0:	881a      	ldrh	r2, [r3, #0]
 80015f2:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <LineDetect_show+0x178>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d205      	bcs.n	8001606 <LineDetect_show+0xce>
				lcd_send_cmd (0x80|0x16);
 80015fa:	2096      	movs	r0, #150	; 0x96
 80015fc:	f000 f944 	bl	8001888 <lcd_send_cmd>
				lcd_send_string(" ");}
 8001600:	482d      	ldr	r0, [pc, #180]	; (80016b8 <LineDetect_show+0x180>)
 8001602:	f000 f9f1 	bl	80019e8 <lcd_send_string>
			if(Sensor_ADC_Value[1] < Sensor_Threshold[1]){
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <LineDetect_show+0x174>)
 8001608:	885a      	ldrh	r2, [r3, #2]
 800160a:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <LineDetect_show+0x178>)
 800160c:	885b      	ldrh	r3, [r3, #2]
 800160e:	429a      	cmp	r2, r3
 8001610:	d205      	bcs.n	800161e <LineDetect_show+0xe6>
				lcd_send_cmd (0x80|0x18);
 8001612:	2098      	movs	r0, #152	; 0x98
 8001614:	f000 f938 	bl	8001888 <lcd_send_cmd>
				lcd_send_string(" ");}
 8001618:	4827      	ldr	r0, [pc, #156]	; (80016b8 <LineDetect_show+0x180>)
 800161a:	f000 f9e5 	bl	80019e8 <lcd_send_string>
			if(Sensor_ADC_Value[2] < Sensor_Threshold[2]){
 800161e:	4b23      	ldr	r3, [pc, #140]	; (80016ac <LineDetect_show+0x174>)
 8001620:	889a      	ldrh	r2, [r3, #4]
 8001622:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <LineDetect_show+0x178>)
 8001624:	889b      	ldrh	r3, [r3, #4]
 8001626:	429a      	cmp	r2, r3
 8001628:	d205      	bcs.n	8001636 <LineDetect_show+0xfe>
				lcd_send_cmd (0x80|0x1A);
 800162a:	209a      	movs	r0, #154	; 0x9a
 800162c:	f000 f92c 	bl	8001888 <lcd_send_cmd>
				lcd_send_string(" ");}
 8001630:	4821      	ldr	r0, [pc, #132]	; (80016b8 <LineDetect_show+0x180>)
 8001632:	f000 f9d9 	bl	80019e8 <lcd_send_string>
			if(Sensor_ADC_Value[3] < Sensor_Threshold[3]){
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <LineDetect_show+0x174>)
 8001638:	88da      	ldrh	r2, [r3, #6]
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <LineDetect_show+0x178>)
 800163c:	88db      	ldrh	r3, [r3, #6]
 800163e:	429a      	cmp	r2, r3
 8001640:	d205      	bcs.n	800164e <LineDetect_show+0x116>
				lcd_send_cmd (0x80|0x1C);
 8001642:	209c      	movs	r0, #156	; 0x9c
 8001644:	f000 f920 	bl	8001888 <lcd_send_cmd>
				lcd_send_string(" ");}
 8001648:	481b      	ldr	r0, [pc, #108]	; (80016b8 <LineDetect_show+0x180>)
 800164a:	f000 f9cd 	bl	80019e8 <lcd_send_string>
			if(Sensor_ADC_Value[4] < Sensor_Threshold[4]){
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <LineDetect_show+0x174>)
 8001650:	891a      	ldrh	r2, [r3, #8]
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <LineDetect_show+0x178>)
 8001654:	891b      	ldrh	r3, [r3, #8]
 8001656:	429a      	cmp	r2, r3
 8001658:	d205      	bcs.n	8001666 <LineDetect_show+0x12e>
				lcd_send_cmd (0x80|0x1E);
 800165a:	209e      	movs	r0, #158	; 0x9e
 800165c:	f000 f914 	bl	8001888 <lcd_send_cmd>
				lcd_send_string(" ");}
 8001660:	4815      	ldr	r0, [pc, #84]	; (80016b8 <LineDetect_show+0x180>)
 8001662:	f000 f9c1 	bl	80019e8 <lcd_send_string>
			if(Sensor_ADC_Value[5] < Sensor_Threshold[5]){
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <LineDetect_show+0x174>)
 8001668:	895a      	ldrh	r2, [r3, #10]
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <LineDetect_show+0x178>)
 800166c:	895b      	ldrh	r3, [r3, #10]
 800166e:	429a      	cmp	r2, r3
 8001670:	d205      	bcs.n	800167e <LineDetect_show+0x146>
				lcd_send_cmd (0x80|0x20);
 8001672:	20a0      	movs	r0, #160	; 0xa0
 8001674:	f000 f908 	bl	8001888 <lcd_send_cmd>
				lcd_send_string(" ");}
 8001678:	480f      	ldr	r0, [pc, #60]	; (80016b8 <LineDetect_show+0x180>)
 800167a:	f000 f9b5 	bl	80019e8 <lcd_send_string>
		for(int i=0;i<6;i++)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3301      	adds	r3, #1
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b05      	cmp	r3, #5
 8001688:	f77f af69 	ble.w	800155e <LineDetect_show+0x26>
	while(cancer_menu){
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <LineDetect_show+0x184>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	f47f af61 	bne.w	8001558 <LineDetect_show+0x20>
		}
	}
	lcd_clear();
 8001696:	f000 f957 	bl	8001948 <lcd_clear>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	08009030 	.word	0x08009030
 80016a8:	08009044 	.word	0x08009044
 80016ac:	20000318 	.word	0x20000318
 80016b0:	20000008 	.word	0x20000008
 80016b4:	08009058 	.word	0x08009058
 80016b8:	0800905c 	.word	0x0800905c
 80016bc:	20000004 	.word	0x20000004

080016c0 <Running>:
void Running(void) // Activate the car for running
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	while(cancer_running){
 80016c4:	e00b      	b.n	80016de <Running+0x1e>
		lcd_send_cmd (0x80|0x00);
 80016c6:	2080      	movs	r0, #128	; 0x80
 80016c8:	f000 f8de 	bl	8001888 <lcd_send_cmd>
		lcd_send_string("Car is Running!        ");
 80016cc:	4808      	ldr	r0, [pc, #32]	; (80016f0 <Running+0x30>)
 80016ce:	f000 f98b 	bl	80019e8 <lcd_send_string>
		lcd_send_cmd (0x80|0x40);
 80016d2:	20c0      	movs	r0, #192	; 0xc0
 80016d4:	f000 f8d8 	bl	8001888 <lcd_send_cmd>
		lcd_send_string("Press C for cancer     ");
 80016d8:	4806      	ldr	r0, [pc, #24]	; (80016f4 <Running+0x34>)
 80016da:	f000 f985 	bl	80019e8 <lcd_send_string>
	while(cancer_running){
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <Running+0x38>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1ef      	bne.n	80016c6 <Running+0x6>
	}
	lcd_clear();
 80016e6:	f000 f92f 	bl	8001948 <lcd_clear>
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	08009060 	.word	0x08009060
 80016f4:	08009078 	.word	0x08009078
 80016f8:	20000005 	.word	0x20000005

080016fc <executeAction>:
void executeAction(uint8_t line)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
	switch(line)
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	3b01      	subs	r3, #1
 800170a:	2b04      	cmp	r3, #4
 800170c:	f200 80a8 	bhi.w	8001860 <executeAction+0x164>
 8001710:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <executeAction+0x1c>)
 8001712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001716:	bf00      	nop
 8001718:	0800172d 	.word	0x0800172d
 800171c:	08001789 	.word	0x08001789
 8001720:	080017df 	.word	0x080017df
 8001724:	08001821 	.word	0x08001821
 8001728:	08001845 	.word	0x08001845
	{
	case 1:
		switch(Menu_type){
 800172c:	4b4e      	ldr	r3, [pc, #312]	; (8001868 <executeAction+0x16c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b03      	cmp	r3, #3
 8001732:	d00a      	beq.n	800174a <executeAction+0x4e>
 8001734:	2b04      	cmp	r3, #4
 8001736:	d016      	beq.n	8001766 <executeAction+0x6a>
 8001738:	2b01      	cmp	r3, #1
 800173a:	d122      	bne.n	8001782 <executeAction+0x86>
			case Main_menu:
				cancer_running = 1;
 800173c:	4b4b      	ldr	r3, [pc, #300]	; (800186c <executeAction+0x170>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
				Menu_type = Running_Process;
 8001742:	4b49      	ldr	r3, [pc, #292]	; (8001868 <executeAction+0x16c>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
				break;
 8001748:	e01b      	b.n	8001782 <executeAction+0x86>
			case PID_Menu:
				if(Kp_modify_flag == 0)
 800174a:	4b49      	ldr	r3, [pc, #292]	; (8001870 <executeAction+0x174>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d105      	bne.n	800175e <executeAction+0x62>
				{
					Kp_modify_flag = 1;
 8001752:	4b47      	ldr	r3, [pc, #284]	; (8001870 <executeAction+0x174>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
					line = 1;
 8001758:	2301      	movs	r3, #1
 800175a:	71fb      	strb	r3, [r7, #7]
				}
				else
				{
					Kp_modify_flag = 0;
				}
				break;
 800175c:	e011      	b.n	8001782 <executeAction+0x86>
					Kp_modify_flag = 0;
 800175e:	4b44      	ldr	r3, [pc, #272]	; (8001870 <executeAction+0x174>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
				break;
 8001764:	e00d      	b.n	8001782 <executeAction+0x86>
			case Engine_menu:
				if( Left_modify_flag== 0)
 8001766:	4b43      	ldr	r3, [pc, #268]	; (8001874 <executeAction+0x178>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d105      	bne.n	800177a <executeAction+0x7e>
				{
					Left_modify_flag = 1;
 800176e:	4b41      	ldr	r3, [pc, #260]	; (8001874 <executeAction+0x178>)
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
					line = 1;
 8001774:	2301      	movs	r3, #1
 8001776:	71fb      	strb	r3, [r7, #7]
				}
				else
				{
					Left_modify_flag = 0;
				}
				break;
 8001778:	e002      	b.n	8001780 <executeAction+0x84>
					Left_modify_flag = 0;
 800177a:	4b3e      	ldr	r3, [pc, #248]	; (8001874 <executeAction+0x178>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
				break;
 8001780:	bf00      	nop

			}
		lcd_clear();
 8001782:	f000 f8e1 	bl	8001948 <lcd_clear>
		break;
 8001786:	e06b      	b.n	8001860 <executeAction+0x164>
	case 2:
		switch(Menu_type){
 8001788:	4b37      	ldr	r3, [pc, #220]	; (8001868 <executeAction+0x16c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b03      	cmp	r3, #3
 800178e:	d007      	beq.n	80017a0 <executeAction+0xa4>
 8001790:	2b04      	cmp	r3, #4
 8001792:	d013      	beq.n	80017bc <executeAction+0xc0>
 8001794:	2b01      	cmp	r3, #1
 8001796:	d11f      	bne.n	80017d8 <executeAction+0xdc>
			case Main_menu:
				Menu_type = Color_Processing;
 8001798:	4b33      	ldr	r3, [pc, #204]	; (8001868 <executeAction+0x16c>)
 800179a:	2202      	movs	r2, #2
 800179c:	701a      	strb	r2, [r3, #0]
				break;
 800179e:	e01b      	b.n	80017d8 <executeAction+0xdc>
			case PID_Menu:
				if(Ki_modify_flag == 0)
 80017a0:	4b35      	ldr	r3, [pc, #212]	; (8001878 <executeAction+0x17c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d105      	bne.n	80017b4 <executeAction+0xb8>
				{
					Ki_modify_flag = 1;
 80017a8:	4b33      	ldr	r3, [pc, #204]	; (8001878 <executeAction+0x17c>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
					line = 2;
 80017ae:	2302      	movs	r3, #2
 80017b0:	71fb      	strb	r3, [r7, #7]
				}
				else
				{
					Ki_modify_flag = 0;
				}
				break;
 80017b2:	e011      	b.n	80017d8 <executeAction+0xdc>
					Ki_modify_flag = 0;
 80017b4:	4b30      	ldr	r3, [pc, #192]	; (8001878 <executeAction+0x17c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
				break;
 80017ba:	e00d      	b.n	80017d8 <executeAction+0xdc>
			case Engine_menu:
				if( Right_modify_flag== 0)
 80017bc:	4b2f      	ldr	r3, [pc, #188]	; (800187c <executeAction+0x180>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d105      	bne.n	80017d0 <executeAction+0xd4>
				{
					Right_modify_flag = 1;
 80017c4:	4b2d      	ldr	r3, [pc, #180]	; (800187c <executeAction+0x180>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
					line = 2;
 80017ca:	2302      	movs	r3, #2
 80017cc:	71fb      	strb	r3, [r7, #7]
				}
				else
				{
					Right_modify_flag = 0;
				}
				break;
 80017ce:	e002      	b.n	80017d6 <executeAction+0xda>
					Right_modify_flag = 0;
 80017d0:	4b2a      	ldr	r3, [pc, #168]	; (800187c <executeAction+0x180>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
				break;
 80017d6:	bf00      	nop
			}
		lcd_clear();
 80017d8:	f000 f8b6 	bl	8001948 <lcd_clear>
		break;
 80017dc:	e040      	b.n	8001860 <executeAction+0x164>
	case 3:
		switch(Menu_type){
 80017de:	4b22      	ldr	r3, [pc, #136]	; (8001868 <executeAction+0x16c>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d007      	beq.n	80017f6 <executeAction+0xfa>
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d013      	beq.n	8001812 <executeAction+0x116>
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d115      	bne.n	800181a <executeAction+0x11e>
			case Main_menu:
				Menu_type = PID_Menu;
 80017ee:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <executeAction+0x16c>)
 80017f0:	2203      	movs	r2, #3
 80017f2:	701a      	strb	r2, [r3, #0]
				break;
 80017f4:	e011      	b.n	800181a <executeAction+0x11e>
			case PID_Menu:
				if(Kd_modify_flag == 0)
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <executeAction+0x184>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d105      	bne.n	800180a <executeAction+0x10e>
				{
					Kd_modify_flag = 1;
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <executeAction+0x184>)
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
					line = 3;
 8001804:	2303      	movs	r3, #3
 8001806:	71fb      	strb	r3, [r7, #7]
				}
				else
				{
					Kd_modify_flag = 0;
				}
				break;
 8001808:	e007      	b.n	800181a <executeAction+0x11e>
					Kd_modify_flag = 0;
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <executeAction+0x184>)
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
				break;
 8001810:	e003      	b.n	800181a <executeAction+0x11e>
			case Engine_menu:
				Menu_type = Main_menu;
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <executeAction+0x16c>)
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
				break;
 8001818:	bf00      	nop

		}
		lcd_clear();
 800181a:	f000 f895 	bl	8001948 <lcd_clear>
		break;
 800181e:	e01f      	b.n	8001860 <executeAction+0x164>
	case 4:
		switch(Menu_type){
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <executeAction+0x16c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d002      	beq.n	800182e <executeAction+0x132>
 8001828:	2b03      	cmp	r3, #3
 800182a:	d004      	beq.n	8001836 <executeAction+0x13a>
 800182c:	e007      	b.n	800183e <executeAction+0x142>
			case Main_menu:
				Menu_type = Engine_menu;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <executeAction+0x16c>)
 8001830:	2204      	movs	r2, #4
 8001832:	701a      	strb	r2, [r3, #0]
				break;
 8001834:	e003      	b.n	800183e <executeAction+0x142>
			case PID_Menu:
				Menu_type = Main_menu;
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <executeAction+0x16c>)
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
				break;
 800183c:	bf00      	nop
			}
		lcd_clear();
 800183e:	f000 f883 	bl	8001948 <lcd_clear>
		break;
 8001842:	e00d      	b.n	8001860 <executeAction+0x164>
	case 5:
		switch(Menu_type){
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <executeAction+0x16c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d106      	bne.n	800185a <executeAction+0x15e>
			case Main_menu:
				cancer_menu = 1;
 800184c:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <executeAction+0x188>)
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
				Menu_type = LineDetect_Show;
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <executeAction+0x16c>)
 8001854:	2205      	movs	r2, #5
 8001856:	701a      	strb	r2, [r3, #0]
				break;
 8001858:	bf00      	nop
		}
		lcd_clear();
 800185a:	f000 f875 	bl	8001948 <lcd_clear>
		break;
 800185e:	bf00      	nop
	}
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000001 	.word	0x20000001
 800186c:	20000005 	.word	0x20000005
 8001870:	2000020c 	.word	0x2000020c
 8001874:	2000020f 	.word	0x2000020f
 8001878:	2000020d 	.word	0x2000020d
 800187c:	20000210 	.word	0x20000210
 8001880:	2000020e 	.word	0x2000020e
 8001884:	20000004 	.word	0x20000004

08001888 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c3;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af02      	add	r7, sp, #8
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f023 030f 	bic.w	r3, r3, #15
 8001898:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	f043 030c 	orr.w	r3, r3, #12
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	f043 0308 	orr.w	r3, r3, #8
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	f043 030c 	orr.w	r3, r3, #12
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80018be:	7bbb      	ldrb	r3, [r7, #14]
 80018c0:	f043 0308 	orr.w	r3, r3, #8
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018c8:	f107 0208 	add.w	r2, r7, #8
 80018cc:	2364      	movs	r3, #100	; 0x64
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2304      	movs	r3, #4
 80018d2:	214e      	movs	r1, #78	; 0x4e
 80018d4:	4803      	ldr	r0, [pc, #12]	; (80018e4 <lcd_send_cmd+0x5c>)
 80018d6:	f002 ff89 	bl	80047ec <HAL_I2C_Master_Transmit>
}
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000284 	.word	0x20000284

080018e8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af02      	add	r7, sp, #8
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	f023 030f 	bic.w	r3, r3, #15
 80018f8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	f043 030d 	orr.w	r3, r3, #13
 8001906:	b2db      	uxtb	r3, r3
 8001908:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	f043 0309 	orr.w	r3, r3, #9
 8001910:	b2db      	uxtb	r3, r3
 8001912:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001914:	7bbb      	ldrb	r3, [r7, #14]
 8001916:	f043 030d 	orr.w	r3, r3, #13
 800191a:	b2db      	uxtb	r3, r3
 800191c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800191e:	7bbb      	ldrb	r3, [r7, #14]
 8001920:	f043 0309 	orr.w	r3, r3, #9
 8001924:	b2db      	uxtb	r3, r3
 8001926:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001928:	f107 0208 	add.w	r2, r7, #8
 800192c:	2364      	movs	r3, #100	; 0x64
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2304      	movs	r3, #4
 8001932:	214e      	movs	r1, #78	; 0x4e
 8001934:	4803      	ldr	r0, [pc, #12]	; (8001944 <lcd_send_data+0x5c>)
 8001936:	f002 ff59 	bl	80047ec <HAL_I2C_Master_Transmit>
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000284 	.word	0x20000284

08001948 <lcd_clear>:

void lcd_clear (void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff ff9a 	bl	8001888 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	e005      	b.n	8001966 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800195a:	2020      	movs	r0, #32
 800195c:	f7ff ffc4 	bl	80018e8 <lcd_send_data>
	for (int i=0; i<100; i++)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3301      	adds	r3, #1
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b63      	cmp	r3, #99	; 0x63
 800196a:	ddf6      	ble.n	800195a <lcd_clear+0x12>
	}
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <lcd_init>:

void lcd_init (void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001978:	2032      	movs	r0, #50	; 0x32
 800197a:	f001 fa67 	bl	8002e4c <HAL_Delay>
	lcd_send_cmd (0x30);
 800197e:	2030      	movs	r0, #48	; 0x30
 8001980:	f7ff ff82 	bl	8001888 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001984:	2005      	movs	r0, #5
 8001986:	f001 fa61 	bl	8002e4c <HAL_Delay>
	lcd_send_cmd (0x30);
 800198a:	2030      	movs	r0, #48	; 0x30
 800198c:	f7ff ff7c 	bl	8001888 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001990:	2001      	movs	r0, #1
 8001992:	f001 fa5b 	bl	8002e4c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001996:	2030      	movs	r0, #48	; 0x30
 8001998:	f7ff ff76 	bl	8001888 <lcd_send_cmd>
	HAL_Delay(10);
 800199c:	200a      	movs	r0, #10
 800199e:	f001 fa55 	bl	8002e4c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80019a2:	2020      	movs	r0, #32
 80019a4:	f7ff ff70 	bl	8001888 <lcd_send_cmd>
	HAL_Delay(10);
 80019a8:	200a      	movs	r0, #10
 80019aa:	f001 fa4f 	bl	8002e4c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80019ae:	2028      	movs	r0, #40	; 0x28
 80019b0:	f7ff ff6a 	bl	8001888 <lcd_send_cmd>
	HAL_Delay(1);
 80019b4:	2001      	movs	r0, #1
 80019b6:	f001 fa49 	bl	8002e4c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80019ba:	2008      	movs	r0, #8
 80019bc:	f7ff ff64 	bl	8001888 <lcd_send_cmd>
	HAL_Delay(1);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f001 fa43 	bl	8002e4c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80019c6:	2001      	movs	r0, #1
 80019c8:	f7ff ff5e 	bl	8001888 <lcd_send_cmd>
	HAL_Delay(1);
 80019cc:	2001      	movs	r0, #1
 80019ce:	f001 fa3d 	bl	8002e4c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80019d2:	2006      	movs	r0, #6
 80019d4:	f7ff ff58 	bl	8001888 <lcd_send_cmd>
	HAL_Delay(1);
 80019d8:	2001      	movs	r0, #1
 80019da:	f001 fa37 	bl	8002e4c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80019de:	200c      	movs	r0, #12
 80019e0:	f7ff ff52 	bl	8001888 <lcd_send_cmd>
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80019f0:	e006      	b.n	8001a00 <lcd_send_string+0x18>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff74 	bl	80018e8 <lcd_send_data>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f4      	bne.n	80019f2 <lcd_send_string+0xa>
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <MotorL_EnablePWM>:
 *  Created on: Apr 29, 2021
 *      Author: Duc Thang
 */
#include "HAL_MOTOR_CONTROL.h"
void MotorL_EnablePWM(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001a14:	2108      	movs	r1, #8
 8001a16:	4802      	ldr	r0, [pc, #8]	; (8001a20 <MotorL_EnablePWM+0x10>)
 8001a18:	f003 fef8 	bl	800580c <HAL_TIM_PWM_Start>
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000364 	.word	0x20000364

08001a24 <MotorR_EnablePWM>:
void MotorL_DisablePWM(void)
{
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
}
void MotorR_EnablePWM(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001a28:	210c      	movs	r1, #12
 8001a2a:	4802      	ldr	r0, [pc, #8]	; (8001a34 <MotorR_EnablePWM+0x10>)
 8001a2c:	f003 feee 	bl	800580c <HAL_TIM_PWM_Start>
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000364 	.word	0x20000364

08001a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a3c:	f001 f994 	bl	8002d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a40:	f000 f83c 	bl	8001abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a44:	f000 fb0e 	bl	8002064 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a48:	f000 faec 	bl	8002024 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8001a4c:	f000 fac0 	bl	8001fd0 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8001a50:	f000 f964 	bl	8001d1c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a54:	f000 f9b6 	bl	8001dc4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001a58:	f000 f89a 	bl	8001b90 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001a5c:	f000 fa16 	bl	8001e8c <MX_TIM4_Init>
  MX_I2C3_Init();
 8001a60:	f000 f92e 	bl	8001cc0 <MX_I2C3_Init>
  MX_TIM5_Init();
 8001a64:	f000 fa66 	bl	8001f34 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	lcd_init();
 8001a68:	f7ff ff84 	bl	8001974 <lcd_init>
	MotorL_EnablePWM();
 8001a6c:	f7ff ffd0 	bl	8001a10 <MotorL_EnablePWM>
	MotorR_EnablePWM();
 8001a70:	f7ff ffd8 	bl	8001a24 <MotorR_EnablePWM>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &Sensor_ADC_Value, 6);
 8001a74:	2206      	movs	r2, #6
 8001a76:	490c      	ldr	r1, [pc, #48]	; (8001aa8 <main+0x70>)
 8001a78:	480c      	ldr	r0, [pc, #48]	; (8001aac <main+0x74>)
 8001a7a:	f001 fb8d 	bl	8003198 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		lcd_clear();
 8001a7e:	f7ff ff63 	bl	8001948 <lcd_clear>
		while (menu_display) {
 8001a82:	e00b      	b.n	8001a9c <main+0x64>
			Menu_system_control(Menu_type, line);
 8001a84:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <main+0x78>)
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <main+0x7c>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4610      	mov	r0, r2
 8001a90:	f7ff fa62 	bl	8000f58 <Menu_system_control>
			ScrollUp();
 8001a94:	f000 fb84 	bl	80021a0 <ScrollUp>
			SelectItem();
 8001a98:	f000 fc70 	bl	800237c <SelectItem>
		while (menu_display) {
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <main+0x80>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1ef      	bne.n	8001a84 <main+0x4c>
		lcd_clear();
 8001aa4:	e7eb      	b.n	8001a7e <main+0x46>
 8001aa6:	bf00      	nop
 8001aa8:	20000318 	.word	0x20000318
 8001aac:	200003a4 	.word	0x200003a4
 8001ab0:	20000001 	.word	0x20000001
 8001ab4:	20000002 	.word	0x20000002
 8001ab8:	20000000 	.word	0x20000000

08001abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b094      	sub	sp, #80	; 0x50
 8001ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac2:	f107 0320 	add.w	r3, r7, #32
 8001ac6:	2230      	movs	r2, #48	; 0x30
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f005 f952 	bl	8006d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <SystemClock_Config+0xcc>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	4a27      	ldr	r2, [pc, #156]	; (8001b88 <SystemClock_Config+0xcc>)
 8001aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aee:	6413      	str	r3, [r2, #64]	; 0x40
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <SystemClock_Config+0xcc>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001afc:	2300      	movs	r3, #0
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <SystemClock_Config+0xd0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b08:	4a20      	ldr	r2, [pc, #128]	; (8001b8c <SystemClock_Config+0xd0>)
 8001b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <SystemClock_Config+0xd0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b20:	2301      	movs	r3, #1
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b24:	2310      	movs	r3, #16
 8001b26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b30:	2308      	movs	r3, #8
 8001b32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001b34:	2348      	movs	r3, #72	; 0x48
 8001b36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b40:	f107 0320 	add.w	r3, r7, #32
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 f959 	bl	8004dfc <HAL_RCC_OscConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b50:	f000 fdca 	bl	80026e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b54:	230f      	movs	r3, #15
 8001b56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	2102      	movs	r1, #2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f003 fbb3 	bl	80052dc <HAL_RCC_ClockConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b7c:	f000 fdb4 	bl	80026e8 <Error_Handler>
  }
}
 8001b80:	bf00      	nop
 8001b82:	3750      	adds	r7, #80	; 0x50
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40007000 	.word	0x40007000

08001b90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b96:	463b      	mov	r3, r7
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ba2:	4b44      	ldr	r3, [pc, #272]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001ba4:	4a44      	ldr	r2, [pc, #272]	; (8001cb8 <MX_ADC1_Init+0x128>)
 8001ba6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ba8:	4b42      	ldr	r3, [pc, #264]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bae:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001bb4:	4b3f      	ldr	r3, [pc, #252]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001bba:	4b3e      	ldr	r3, [pc, #248]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bc0:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bc8:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bce:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001bd0:	4a3a      	ldr	r2, [pc, #232]	; (8001cbc <MX_ADC1_Init+0x12c>)
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bd4:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001bda:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001bdc:	2206      	movs	r2, #6
 8001bde:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001be0:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001be8:	4b32      	ldr	r3, [pc, #200]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bee:	4831      	ldr	r0, [pc, #196]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001bf0:	f001 f94e 	bl	8002e90 <HAL_ADC_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001bfa:	f000 fd75 	bl	80026e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c02:	2301      	movs	r3, #1
 8001c04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001c06:	2303      	movs	r3, #3
 8001c08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4829      	ldr	r0, [pc, #164]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001c10:	f001 fbbe 	bl	8003390 <HAL_ADC_ConfigChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001c1a:	f000 fd65 	bl	80026e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001c22:	2302      	movs	r3, #2
 8001c24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c26:	463b      	mov	r3, r7
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4822      	ldr	r0, [pc, #136]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001c2c:	f001 fbb0 	bl	8003390 <HAL_ADC_ConfigChannel>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001c36:	f000 fd57 	bl	80026e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c42:	463b      	mov	r3, r7
 8001c44:	4619      	mov	r1, r3
 8001c46:	481b      	ldr	r0, [pc, #108]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001c48:	f001 fba2 	bl	8003390 <HAL_ADC_ConfigChannel>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001c52:	f000 fd49 	bl	80026e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001c56:	2305      	movs	r3, #5
 8001c58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c5e:	463b      	mov	r3, r7
 8001c60:	4619      	mov	r1, r3
 8001c62:	4814      	ldr	r0, [pc, #80]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001c64:	f001 fb94 	bl	8003390 <HAL_ADC_ConfigChannel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001c6e:	f000 fd3b 	bl	80026e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001c72:	2306      	movs	r3, #6
 8001c74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001c76:	2305      	movs	r3, #5
 8001c78:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001c80:	f001 fb86 	bl	8003390 <HAL_ADC_ConfigChannel>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001c8a:	f000 fd2d 	bl	80026e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001c8e:	2307      	movs	r3, #7
 8001c90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001c92:	2306      	movs	r3, #6
 8001c94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c96:	463b      	mov	r3, r7
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4806      	ldr	r0, [pc, #24]	; (8001cb4 <MX_ADC1_Init+0x124>)
 8001c9c:	f001 fb78 	bl	8003390 <HAL_ADC_ConfigChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001ca6:	f000 fd1f 	bl	80026e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200003a4 	.word	0x200003a4
 8001cb8:	40012000 	.word	0x40012000
 8001cbc:	0f000001 	.word	0x0f000001

08001cc0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <MX_I2C3_Init+0x50>)
 8001cc6:	4a13      	ldr	r2, [pc, #76]	; (8001d14 <MX_I2C3_Init+0x54>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_I2C3_Init+0x50>)
 8001ccc:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <MX_I2C3_Init+0x58>)
 8001cce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_I2C3_Init+0x50>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <MX_I2C3_Init+0x50>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_I2C3_Init+0x50>)
 8001cde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ce2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <MX_I2C3_Init+0x50>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_I2C3_Init+0x50>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <MX_I2C3_Init+0x50>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_I2C3_Init+0x50>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001cfc:	4804      	ldr	r0, [pc, #16]	; (8001d10 <MX_I2C3_Init+0x50>)
 8001cfe:	f002 fc3d 	bl	800457c <HAL_I2C_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001d08:	f000 fcee 	bl	80026e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000284 	.word	0x20000284
 8001d14:	40005c00 	.word	0x40005c00
 8001d18:	000186a0 	.word	0x000186a0

08001d1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08c      	sub	sp, #48	; 0x30
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d22:	f107 030c 	add.w	r3, r7, #12
 8001d26:	2224      	movs	r2, #36	; 0x24
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f005 f822 	bl	8006d74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d38:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <MX_TIM2_Init+0xa4>)
 8001d3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <MX_TIM2_Init+0xa4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d46:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <MX_TIM2_Init+0xa4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d4c:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <MX_TIM2_Init+0xa4>)
 8001d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d54:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <MX_TIM2_Init+0xa4>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <MX_TIM2_Init+0xa4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d60:	2301      	movs	r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d74:	2300      	movs	r3, #0
 8001d76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	4619      	mov	r1, r3
 8001d8a:	480d      	ldr	r0, [pc, #52]	; (8001dc0 <MX_TIM2_Init+0xa4>)
 8001d8c:	f003 fd70 	bl	8005870 <HAL_TIM_Encoder_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001d96:	f000 fca7 	bl	80026e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	4619      	mov	r1, r3
 8001da6:	4806      	ldr	r0, [pc, #24]	; (8001dc0 <MX_TIM2_Init+0xa4>)
 8001da8:	f004 fb6e 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001db2:	f000 fc99 	bl	80026e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001db6:	bf00      	nop
 8001db8:	3730      	adds	r7, #48	; 0x30
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	2000048c 	.word	0x2000048c

08001dc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dca:	f107 0320 	add.w	r3, r7, #32
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	611a      	str	r2, [r3, #16]
 8001de2:	615a      	str	r2, [r3, #20]
 8001de4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001de6:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <MX_TIM3_Init+0xc0>)
 8001de8:	4a27      	ldr	r2, [pc, #156]	; (8001e88 <MX_TIM3_Init+0xc4>)
 8001dea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dec:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <MX_TIM3_Init+0xc0>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <MX_TIM3_Init+0xc0>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <MX_TIM3_Init+0xc0>)
 8001dfa:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001dfe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e00:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <MX_TIM3_Init+0xc0>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e06:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <MX_TIM3_Init+0xc0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e0c:	481d      	ldr	r0, [pc, #116]	; (8001e84 <MX_TIM3_Init+0xc0>)
 8001e0e:	f003 fcd1 	bl	80057b4 <HAL_TIM_PWM_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001e18:	f000 fc66 	bl	80026e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e24:	f107 0320 	add.w	r3, r7, #32
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4816      	ldr	r0, [pc, #88]	; (8001e84 <MX_TIM3_Init+0xc0>)
 8001e2c:	f004 fb2c 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001e36:	f000 fc57 	bl	80026e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e3a:	2360      	movs	r3, #96	; 0x60
 8001e3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480c      	ldr	r0, [pc, #48]	; (8001e84 <MX_TIM3_Init+0xc0>)
 8001e52:	f003 fea7 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001e5c:	f000 fc44 	bl	80026e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	220c      	movs	r2, #12
 8001e64:	4619      	mov	r1, r3
 8001e66:	4807      	ldr	r0, [pc, #28]	; (8001e84 <MX_TIM3_Init+0xc0>)
 8001e68:	f003 fe9c 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001e72:	f000 fc39 	bl	80026e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e76:	4803      	ldr	r0, [pc, #12]	; (8001e84 <MX_TIM3_Init+0xc0>)
 8001e78:	f000 fe2e 	bl	8002ad8 <HAL_TIM_MspPostInit>

}
 8001e7c:	bf00      	nop
 8001e7e:	3728      	adds	r7, #40	; 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000364 	.word	0x20000364
 8001e88:	40000400 	.word	0x40000400

08001e8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08c      	sub	sp, #48	; 0x30
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e92:	f107 030c 	add.w	r3, r7, #12
 8001e96:	2224      	movs	r2, #36	; 0x24
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f004 ff6a 	bl	8006d74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <MX_TIM4_Init+0xa0>)
 8001eaa:	4a21      	ldr	r2, [pc, #132]	; (8001f30 <MX_TIM4_Init+0xa4>)
 8001eac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001eae:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <MX_TIM4_Init+0xa0>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <MX_TIM4_Init+0xa0>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <MX_TIM4_Init+0xa0>)
 8001ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <MX_TIM4_Init+0xa0>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec8:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <MX_TIM4_Init+0xa0>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480c      	ldr	r0, [pc, #48]	; (8001f2c <MX_TIM4_Init+0xa0>)
 8001efa:	f003 fcb9 	bl	8005870 <HAL_TIM_Encoder_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001f04:	f000 fbf0 	bl	80026e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	4619      	mov	r1, r3
 8001f14:	4805      	ldr	r0, [pc, #20]	; (8001f2c <MX_TIM4_Init+0xa0>)
 8001f16:	f004 fab7 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001f20:	f000 fbe2 	bl	80026e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	3730      	adds	r7, #48	; 0x30
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200002d8 	.word	0x200002d8
 8001f30:	40000800 	.word	0x40000800

08001f34 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f48:	463b      	mov	r3, r7
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f50:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <MX_TIM5_Init+0x94>)
 8001f52:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <MX_TIM5_Init+0x98>)
 8001f54:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 60;
 8001f56:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <MX_TIM5_Init+0x94>)
 8001f58:	223c      	movs	r2, #60	; 0x3c
 8001f5a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5c:	4b1a      	ldr	r3, [pc, #104]	; (8001fc8 <MX_TIM5_Init+0x94>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 59999;
 8001f62:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <MX_TIM5_Init+0x94>)
 8001f64:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001f68:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6a:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <MX_TIM5_Init+0x94>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f70:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <MX_TIM5_Init+0x94>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001f76:	4814      	ldr	r0, [pc, #80]	; (8001fc8 <MX_TIM5_Init+0x94>)
 8001f78:	f003 fba2 	bl	80056c0 <HAL_TIM_Base_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001f82:	f000 fbb1 	bl	80026e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f8c:	f107 0308 	add.w	r3, r7, #8
 8001f90:	4619      	mov	r1, r3
 8001f92:	480d      	ldr	r0, [pc, #52]	; (8001fc8 <MX_TIM5_Init+0x94>)
 8001f94:	f003 fecc 	bl	8005d30 <HAL_TIM_ConfigClockSource>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001f9e:	f000 fba3 	bl	80026e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001faa:	463b      	mov	r3, r7
 8001fac:	4619      	mov	r1, r3
 8001fae:	4806      	ldr	r0, [pc, #24]	; (8001fc8 <MX_TIM5_Init+0x94>)
 8001fb0:	f004 fa6a 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001fba:	f000 fb95 	bl	80026e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000324 	.word	0x20000324
 8001fcc:	40000c00 	.word	0x40000c00

08001fd0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <MX_USART6_UART_Init+0x50>)
 8001fd8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fe0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001fe4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fe8:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001ff8:	220c      	movs	r2, #12
 8001ffa:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8002004:	2200      	movs	r2, #0
 8002006:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002008:	4804      	ldr	r0, [pc, #16]	; (800201c <MX_USART6_UART_Init+0x4c>)
 800200a:	f004 fabf 	bl	800658c <HAL_UART_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 8002014:	f000 fb68 	bl	80026e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	2000044c 	.word	0x2000044c
 8002020:	40011400 	.word	0x40011400

08002024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <MX_DMA_Init+0x3c>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <MX_DMA_Init+0x3c>)
 8002034:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_DMA_Init+0x3c>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	2038      	movs	r0, #56	; 0x38
 800204c:	f001 fd25 	bl	8003a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002050:	2038      	movs	r0, #56	; 0x38
 8002052:	f001 fd3e 	bl	8003ad2 <HAL_NVIC_EnableIRQ>

}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	4b43      	ldr	r3, [pc, #268]	; (800218c <MX_GPIO_Init+0x128>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a42      	ldr	r2, [pc, #264]	; (800218c <MX_GPIO_Init+0x128>)
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b40      	ldr	r3, [pc, #256]	; (800218c <MX_GPIO_Init+0x128>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b3c      	ldr	r3, [pc, #240]	; (800218c <MX_GPIO_Init+0x128>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a3b      	ldr	r2, [pc, #236]	; (800218c <MX_GPIO_Init+0x128>)
 80020a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b39      	ldr	r3, [pc, #228]	; (800218c <MX_GPIO_Init+0x128>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	4b35      	ldr	r3, [pc, #212]	; (800218c <MX_GPIO_Init+0x128>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a34      	ldr	r2, [pc, #208]	; (800218c <MX_GPIO_Init+0x128>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b32      	ldr	r3, [pc, #200]	; (800218c <MX_GPIO_Init+0x128>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	4b2e      	ldr	r3, [pc, #184]	; (800218c <MX_GPIO_Init+0x128>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a2d      	ldr	r2, [pc, #180]	; (800218c <MX_GPIO_Init+0x128>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b2b      	ldr	r3, [pc, #172]	; (800218c <MX_GPIO_Init+0x128>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 80020ea:	2200      	movs	r2, #0
 80020ec:	f24f 7124 	movw	r1, #63268	; 0xf724
 80020f0:	4827      	ldr	r0, [pc, #156]	; (8002190 <MX_GPIO_Init+0x12c>)
 80020f2:	f002 fa11 	bl	8004518 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020f6:	2200      	movs	r2, #0
 80020f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020fc:	4825      	ldr	r0, [pc, #148]	; (8002194 <MX_GPIO_Init+0x130>)
 80020fe:	f002 fa0b 	bl	8004518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ButtonC_Pin */
  GPIO_InitStruct.Pin = ButtonC_Pin;
 8002102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002108:	4b23      	ldr	r3, [pc, #140]	; (8002198 <MX_GPIO_Init+0x134>)
 800210a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ButtonC_GPIO_Port, &GPIO_InitStruct);
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4619      	mov	r1, r3
 8002116:	4821      	ldr	r0, [pc, #132]	; (800219c <MX_GPIO_Init+0x138>)
 8002118:	f002 f864 	bl	80041e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ButtonB_Pin ButtonA_Pin */
  GPIO_InitStruct.Pin = ButtonB_Pin|ButtonA_Pin;
 800211c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800212a:	f107 0314 	add.w	r3, r7, #20
 800212e:	4619      	mov	r1, r3
 8002130:	481a      	ldr	r0, [pc, #104]	; (800219c <MX_GPIO_Init+0x138>)
 8002132:	f002 f857 	bl	80041e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB13
                           PB14 PB15 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 8002136:	f24f 7324 	movw	r3, #63268	; 0xf724
 800213a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213c:	2301      	movs	r3, #1
 800213e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4619      	mov	r1, r3
 800214e:	4810      	ldr	r0, [pc, #64]	; (8002190 <MX_GPIO_Init+0x12c>)
 8002150:	f002 f848 	bl	80041e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215a:	2301      	movs	r3, #1
 800215c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	4619      	mov	r1, r3
 800216c:	4809      	ldr	r0, [pc, #36]	; (8002194 <MX_GPIO_Init+0x130>)
 800216e:	f002 f839 	bl	80041e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	2028      	movs	r0, #40	; 0x28
 8002178:	f001 fc8f 	bl	8003a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800217c:	2028      	movs	r0, #40	; 0x28
 800217e:	f001 fca8 	bl	8003ad2 <HAL_NVIC_EnableIRQ>

}
 8002182:	bf00      	nop
 8002184:	3728      	adds	r7, #40	; 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40020400 	.word	0x40020400
 8002194:	40020000 	.word	0x40020000
 8002198:	10210000 	.word	0x10210000
 800219c:	40020800 	.word	0x40020800

080021a0 <ScrollUp>:
	}
	printf("\n");

}
void ScrollUp(void)
{
 80021a0:	b598      	push	{r3, r4, r7, lr}
 80021a2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(ButtonA_GPIO_Port, ButtonA_Pin) == 0)
 80021a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021a8:	4867      	ldr	r0, [pc, #412]	; (8002348 <ScrollUp+0x1a8>)
 80021aa:	f002 f99d 	bl	80044e8 <HAL_GPIO_ReadPin>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f040 80c3 	bne.w	800233c <ScrollUp+0x19c>
	{
		while (HAL_GPIO_ReadPin(ButtonA_GPIO_Port, ButtonA_Pin) == 0)
 80021b6:	e002      	b.n	80021be <ScrollUp+0x1e>
		{
			HAL_Delay(50);
 80021b8:	2032      	movs	r0, #50	; 0x32
 80021ba:	f000 fe47 	bl	8002e4c <HAL_Delay>
		while (HAL_GPIO_ReadPin(ButtonA_GPIO_Port, ButtonA_Pin) == 0)
 80021be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c2:	4861      	ldr	r0, [pc, #388]	; (8002348 <ScrollUp+0x1a8>)
 80021c4:	f002 f990 	bl	80044e8 <HAL_GPIO_ReadPin>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f4      	beq.n	80021b8 <ScrollUp+0x18>
		}
		switch (Menu_type)
 80021ce:	4b5f      	ldr	r3, [pc, #380]	; (800234c <ScrollUp+0x1ac>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d013      	beq.n	80021fe <ScrollUp+0x5e>
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d073      	beq.n	80022c2 <ScrollUp+0x122>
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d000      	beq.n	80021e0 <ScrollUp+0x40>
				}
			}
			break;
		}
	}
}
 80021de:	e0ad      	b.n	800233c <ScrollUp+0x19c>
			line--;
 80021e0:	4b5b      	ldr	r3, [pc, #364]	; (8002350 <ScrollUp+0x1b0>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	4b59      	ldr	r3, [pc, #356]	; (8002350 <ScrollUp+0x1b0>)
 80021ea:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 80021ec:	4b58      	ldr	r3, [pc, #352]	; (8002350 <ScrollUp+0x1b0>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f040 80a0 	bne.w	8002336 <ScrollUp+0x196>
				line = Maximum_Menu_line;
 80021f6:	4b56      	ldr	r3, [pc, #344]	; (8002350 <ScrollUp+0x1b0>)
 80021f8:	2205      	movs	r2, #5
 80021fa:	701a      	strb	r2, [r3, #0]
			break;
 80021fc:	e09b      	b.n	8002336 <ScrollUp+0x196>
			line--;
 80021fe:	4b54      	ldr	r3, [pc, #336]	; (8002350 <ScrollUp+0x1b0>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	3b01      	subs	r3, #1
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4b52      	ldr	r3, [pc, #328]	; (8002350 <ScrollUp+0x1b0>)
 8002208:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 800220a:	4b51      	ldr	r3, [pc, #324]	; (8002350 <ScrollUp+0x1b0>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <ScrollUp+0x78>
				line = Maximum_Menu_line - 1;
 8002212:	4b4f      	ldr	r3, [pc, #316]	; (8002350 <ScrollUp+0x1b0>)
 8002214:	2204      	movs	r2, #4
 8002216:	701a      	strb	r2, [r3, #0]
			if (Kp_modify_flag == 1)
 8002218:	4b4e      	ldr	r3, [pc, #312]	; (8002354 <ScrollUp+0x1b4>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d115      	bne.n	800224c <ScrollUp+0xac>
				Kp += 0.2;
 8002220:	4b4d      	ldr	r3, [pc, #308]	; (8002358 <ScrollUp+0x1b8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe f997 	bl	8000558 <__aeabi_f2d>
 800222a:	a345      	add	r3, pc, #276	; (adr r3, 8002340 <ScrollUp+0x1a0>)
 800222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002230:	f7fe f834 	bl	800029c <__adddf3>
 8002234:	4603      	mov	r3, r0
 8002236:	460c      	mov	r4, r1
 8002238:	4618      	mov	r0, r3
 800223a:	4621      	mov	r1, r4
 800223c:	f7fe fcbc 	bl	8000bb8 <__aeabi_d2f>
 8002240:	4602      	mov	r2, r0
 8002242:	4b45      	ldr	r3, [pc, #276]	; (8002358 <ScrollUp+0x1b8>)
 8002244:	601a      	str	r2, [r3, #0]
				line = 1;
 8002246:	4b42      	ldr	r3, [pc, #264]	; (8002350 <ScrollUp+0x1b0>)
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
			if (Ki_modify_flag == 1)
 800224c:	4b43      	ldr	r3, [pc, #268]	; (800235c <ScrollUp+0x1bc>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d115      	bne.n	8002280 <ScrollUp+0xe0>
				Ki += 0.2;
 8002254:	4b42      	ldr	r3, [pc, #264]	; (8002360 <ScrollUp+0x1c0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f97d 	bl	8000558 <__aeabi_f2d>
 800225e:	a338      	add	r3, pc, #224	; (adr r3, 8002340 <ScrollUp+0x1a0>)
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	f7fe f81a 	bl	800029c <__adddf3>
 8002268:	4603      	mov	r3, r0
 800226a:	460c      	mov	r4, r1
 800226c:	4618      	mov	r0, r3
 800226e:	4621      	mov	r1, r4
 8002270:	f7fe fca2 	bl	8000bb8 <__aeabi_d2f>
 8002274:	4602      	mov	r2, r0
 8002276:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <ScrollUp+0x1c0>)
 8002278:	601a      	str	r2, [r3, #0]
				line = 2;
 800227a:	4b35      	ldr	r3, [pc, #212]	; (8002350 <ScrollUp+0x1b0>)
 800227c:	2202      	movs	r2, #2
 800227e:	701a      	strb	r2, [r3, #0]
			if (Kd_modify_flag == 1)
 8002280:	4b38      	ldr	r3, [pc, #224]	; (8002364 <ScrollUp+0x1c4>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d115      	bne.n	80022b4 <ScrollUp+0x114>
				Kd += 0.2;
 8002288:	4b37      	ldr	r3, [pc, #220]	; (8002368 <ScrollUp+0x1c8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f963 	bl	8000558 <__aeabi_f2d>
 8002292:	a32b      	add	r3, pc, #172	; (adr r3, 8002340 <ScrollUp+0x1a0>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	f7fe f800 	bl	800029c <__adddf3>
 800229c:	4603      	mov	r3, r0
 800229e:	460c      	mov	r4, r1
 80022a0:	4618      	mov	r0, r3
 80022a2:	4621      	mov	r1, r4
 80022a4:	f7fe fc88 	bl	8000bb8 <__aeabi_d2f>
 80022a8:	4602      	mov	r2, r0
 80022aa:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <ScrollUp+0x1c8>)
 80022ac:	601a      	str	r2, [r3, #0]
				line = 3;
 80022ae:	4b28      	ldr	r3, [pc, #160]	; (8002350 <ScrollUp+0x1b0>)
 80022b0:	2203      	movs	r2, #3
 80022b2:	701a      	strb	r2, [r3, #0]
			Menu_system_control(PID_Menu, line);
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <ScrollUp+0x1b0>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	2003      	movs	r0, #3
 80022bc:	f7fe fe4c 	bl	8000f58 <Menu_system_control>
			break;
 80022c0:	e03c      	b.n	800233c <ScrollUp+0x19c>
			line--;
 80022c2:	4b23      	ldr	r3, [pc, #140]	; (8002350 <ScrollUp+0x1b0>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b21      	ldr	r3, [pc, #132]	; (8002350 <ScrollUp+0x1b0>)
 80022cc:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 80022ce:	4b20      	ldr	r3, [pc, #128]	; (8002350 <ScrollUp+0x1b0>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d102      	bne.n	80022dc <ScrollUp+0x13c>
				line = Maximum_Menu_line - 2;
 80022d6:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <ScrollUp+0x1b0>)
 80022d8:	2203      	movs	r2, #3
 80022da:	701a      	strb	r2, [r3, #0]
			if (Left_modify_flag == 1)
 80022dc:	4b23      	ldr	r3, [pc, #140]	; (800236c <ScrollUp+0x1cc>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d111      	bne.n	8002308 <ScrollUp+0x168>
				Left += 100;
 80022e4:	4b22      	ldr	r3, [pc, #136]	; (8002370 <ScrollUp+0x1d0>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	3364      	adds	r3, #100	; 0x64
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	4b20      	ldr	r3, [pc, #128]	; (8002370 <ScrollUp+0x1d0>)
 80022ee:	801a      	strh	r2, [r3, #0]
				line = 1;
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <ScrollUp+0x1b0>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
				if (Left >= 7200)
 80022f6:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <ScrollUp+0x1d0>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80022fe:	d303      	bcc.n	8002308 <ScrollUp+0x168>
					Left = 7200;
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <ScrollUp+0x1d0>)
 8002302:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002306:	801a      	strh	r2, [r3, #0]
			if (Right_modify_flag == 1)
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <ScrollUp+0x1d4>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d114      	bne.n	800233a <ScrollUp+0x19a>
				Right += 100;
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <ScrollUp+0x1d8>)
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	3364      	adds	r3, #100	; 0x64
 8002316:	b29a      	uxth	r2, r3
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <ScrollUp+0x1d8>)
 800231a:	801a      	strh	r2, [r3, #0]
				line = 2;
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <ScrollUp+0x1b0>)
 800231e:	2202      	movs	r2, #2
 8002320:	701a      	strb	r2, [r3, #0]
				if (Right >= 7200)
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <ScrollUp+0x1d8>)
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800232a:	d306      	bcc.n	800233a <ScrollUp+0x19a>
					Right = 7200;
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <ScrollUp+0x1d8>)
 800232e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002332:	801a      	strh	r2, [r3, #0]
			break;
 8002334:	e001      	b.n	800233a <ScrollUp+0x19a>
			break;
 8002336:	bf00      	nop
 8002338:	e000      	b.n	800233c <ScrollUp+0x19c>
			break;
 800233a:	bf00      	nop
}
 800233c:	bf00      	nop
 800233e:	bd98      	pop	{r3, r4, r7, pc}
 8002340:	9999999a 	.word	0x9999999a
 8002344:	3fc99999 	.word	0x3fc99999
 8002348:	40020800 	.word	0x40020800
 800234c:	20000001 	.word	0x20000001
 8002350:	20000002 	.word	0x20000002
 8002354:	2000020c 	.word	0x2000020c
 8002358:	20000218 	.word	0x20000218
 800235c:	2000020d 	.word	0x2000020d
 8002360:	2000021c 	.word	0x2000021c
 8002364:	2000020e 	.word	0x2000020e
 8002368:	20000220 	.word	0x20000220
 800236c:	2000020f 	.word	0x2000020f
 8002370:	20000212 	.word	0x20000212
 8002374:	20000210 	.word	0x20000210
 8002378:	20000214 	.word	0x20000214

0800237c <SelectItem>:
void SelectItem(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0) //Select button
 8002380:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002384:	4818      	ldr	r0, [pc, #96]	; (80023e8 <SelectItem+0x6c>)
 8002386:	f002 f8af 	bl	80044e8 <HAL_GPIO_ReadPin>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d129      	bne.n	80023e4 <SelectItem+0x68>
	{
		while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 8002390:	e002      	b.n	8002398 <SelectItem+0x1c>
		{
			HAL_Delay(50);
 8002392:	2032      	movs	r0, #50	; 0x32
 8002394:	f000 fd5a 	bl	8002e4c <HAL_Delay>
		while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 8002398:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800239c:	4812      	ldr	r0, [pc, #72]	; (80023e8 <SelectItem+0x6c>)
 800239e:	f002 f8a3 	bl	80044e8 <HAL_GPIO_ReadPin>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f4      	beq.n	8002392 <SelectItem+0x16>
		}
		executeAction(line);
 80023a8:	4b10      	ldr	r3, [pc, #64]	; (80023ec <SelectItem+0x70>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff f9a5 	bl	80016fc <executeAction>
		if (Kp_modify_flag == 1 || Ki_modify_flag == 1 || Kd_modify_flag == 1
 80023b2:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <SelectItem+0x74>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d00f      	beq.n	80023da <SelectItem+0x5e>
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <SelectItem+0x78>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d00b      	beq.n	80023da <SelectItem+0x5e>
 80023c2:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <SelectItem+0x7c>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d007      	beq.n	80023da <SelectItem+0x5e>
				|| Right_modify_flag == 1 || Left_modify_flag == 1)
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <SelectItem+0x80>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d003      	beq.n	80023da <SelectItem+0x5e>
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <SelectItem+0x84>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <SelectItem+0x62>
		{
			__NOP();
 80023da:	bf00      	nop
		else
		{
			line = 1;
		}
	}
}
 80023dc:	e002      	b.n	80023e4 <SelectItem+0x68>
			line = 1;
 80023de:	4b03      	ldr	r3, [pc, #12]	; (80023ec <SelectItem+0x70>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]
}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40020800 	.word	0x40020800
 80023ec:	20000002 	.word	0x20000002
 80023f0:	2000020c 	.word	0x2000020c
 80023f4:	2000020d 	.word	0x2000020d
 80023f8:	2000020e 	.word	0x2000020e
 80023fc:	20000210 	.word	0x20000210
 8002400:	2000020f 	.word	0x2000020f
 8002404:	00000000 	.word	0x00000000

08002408 <MultifunctionButton>:
void MultifunctionButton(void)
{
 8002408:	b598      	push	{r3, r4, r7, lr}
 800240a:	af00      	add	r7, sp, #0
	switch (Menu_type)
 800240c:	4b84      	ldr	r3, [pc, #528]	; (8002620 <MultifunctionButton+0x218>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b05      	cmp	r3, #5
 8002412:	f200 80ff 	bhi.w	8002614 <MultifunctionButton+0x20c>
 8002416:	a201      	add	r2, pc, #4	; (adr r2, 800241c <MultifunctionButton+0x14>)
 8002418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241c:	08002435 	.word	0x08002435
 8002420:	08002449 	.word	0x08002449
 8002424:	08002615 	.word	0x08002615
 8002428:	08002475 	.word	0x08002475
 800242c:	08002585 	.word	0x08002585
 8002430:	08002601 	.word	0x08002601
	{
	case Running_menu:
		Menu_type = Main_menu;
 8002434:	4b7a      	ldr	r3, [pc, #488]	; (8002620 <MultifunctionButton+0x218>)
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
		line = 1;
 800243a:	4b7a      	ldr	r3, [pc, #488]	; (8002624 <MultifunctionButton+0x21c>)
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
		cancer_running = 0;
 8002440:	4b79      	ldr	r3, [pc, #484]	; (8002628 <MultifunctionButton+0x220>)
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
		break;
 8002446:	e0e5      	b.n	8002614 <MultifunctionButton+0x20c>
	case Main_menu:
		line++;
 8002448:	4b76      	ldr	r3, [pc, #472]	; (8002624 <MultifunctionButton+0x21c>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b74      	ldr	r3, [pc, #464]	; (8002624 <MultifunctionButton+0x21c>)
 8002452:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_Menu_line)
 8002454:	4b73      	ldr	r3, [pc, #460]	; (8002624 <MultifunctionButton+0x21c>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b05      	cmp	r3, #5
 800245a:	d902      	bls.n	8002462 <MultifunctionButton+0x5a>
		{
			line = Number_of_Menu_firstline;
 800245c:	4b71      	ldr	r3, [pc, #452]	; (8002624 <MultifunctionButton+0x21c>)
 800245e:	2201      	movs	r2, #1
 8002460:	701a      	strb	r2, [r3, #0]
		}
		Menu_system_control(Menu_type, line);
 8002462:	4b6f      	ldr	r3, [pc, #444]	; (8002620 <MultifunctionButton+0x218>)
 8002464:	781a      	ldrb	r2, [r3, #0]
 8002466:	4b6f      	ldr	r3, [pc, #444]	; (8002624 <MultifunctionButton+0x21c>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	4619      	mov	r1, r3
 800246c:	4610      	mov	r0, r2
 800246e:	f7fe fd73 	bl	8000f58 <Menu_system_control>
		break;
 8002472:	e0cf      	b.n	8002614 <MultifunctionButton+0x20c>
	case PID_Menu:
		line++;
 8002474:	4b6b      	ldr	r3, [pc, #428]	; (8002624 <MultifunctionButton+0x21c>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	3301      	adds	r3, #1
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b69      	ldr	r3, [pc, #420]	; (8002624 <MultifunctionButton+0x21c>)
 800247e:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_Menu_line - 1)
 8002480:	4b68      	ldr	r3, [pc, #416]	; (8002624 <MultifunctionButton+0x21c>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b04      	cmp	r3, #4
 8002486:	d902      	bls.n	800248e <MultifunctionButton+0x86>
		{
			line = Number_of_Menu_firstline;
 8002488:	4b66      	ldr	r3, [pc, #408]	; (8002624 <MultifunctionButton+0x21c>)
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
		}
		if (Kp_modify_flag == 1)
 800248e:	4b67      	ldr	r3, [pc, #412]	; (800262c <MultifunctionButton+0x224>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d121      	bne.n	80024da <MultifunctionButton+0xd2>
		{
			Kp -= 0.2;
 8002496:	4b66      	ldr	r3, [pc, #408]	; (8002630 <MultifunctionButton+0x228>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe f85c 	bl	8000558 <__aeabi_f2d>
 80024a0:	a35d      	add	r3, pc, #372	; (adr r3, 8002618 <MultifunctionButton+0x210>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f7fd fef7 	bl	8000298 <__aeabi_dsub>
 80024aa:	4603      	mov	r3, r0
 80024ac:	460c      	mov	r4, r1
 80024ae:	4618      	mov	r0, r3
 80024b0:	4621      	mov	r1, r4
 80024b2:	f7fe fb81 	bl	8000bb8 <__aeabi_d2f>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4b5d      	ldr	r3, [pc, #372]	; (8002630 <MultifunctionButton+0x228>)
 80024ba:	601a      	str	r2, [r3, #0]
			line = 1;
 80024bc:	4b59      	ldr	r3, [pc, #356]	; (8002624 <MultifunctionButton+0x21c>)
 80024be:	2201      	movs	r2, #1
 80024c0:	701a      	strb	r2, [r3, #0]
			if (Kp <= 0)
 80024c2:	4b5b      	ldr	r3, [pc, #364]	; (8002630 <MultifunctionButton+0x228>)
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	d803      	bhi.n	80024da <MultifunctionButton+0xd2>
				{Kp = 0;}
 80024d2:	4b57      	ldr	r3, [pc, #348]	; (8002630 <MultifunctionButton+0x228>)
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
		}
		if (Ki_modify_flag == 1)
 80024da:	4b56      	ldr	r3, [pc, #344]	; (8002634 <MultifunctionButton+0x22c>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d121      	bne.n	8002526 <MultifunctionButton+0x11e>
		{
			Ki -= 0.2;
 80024e2:	4b55      	ldr	r3, [pc, #340]	; (8002638 <MultifunctionButton+0x230>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe f836 	bl	8000558 <__aeabi_f2d>
 80024ec:	a34a      	add	r3, pc, #296	; (adr r3, 8002618 <MultifunctionButton+0x210>)
 80024ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f2:	f7fd fed1 	bl	8000298 <__aeabi_dsub>
 80024f6:	4603      	mov	r3, r0
 80024f8:	460c      	mov	r4, r1
 80024fa:	4618      	mov	r0, r3
 80024fc:	4621      	mov	r1, r4
 80024fe:	f7fe fb5b 	bl	8000bb8 <__aeabi_d2f>
 8002502:	4602      	mov	r2, r0
 8002504:	4b4c      	ldr	r3, [pc, #304]	; (8002638 <MultifunctionButton+0x230>)
 8002506:	601a      	str	r2, [r3, #0]
			line = 2;
 8002508:	4b46      	ldr	r3, [pc, #280]	; (8002624 <MultifunctionButton+0x21c>)
 800250a:	2202      	movs	r2, #2
 800250c:	701a      	strb	r2, [r3, #0]
			if (Ki <= 0)
 800250e:	4b4a      	ldr	r3, [pc, #296]	; (8002638 <MultifunctionButton+0x230>)
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251c:	d803      	bhi.n	8002526 <MultifunctionButton+0x11e>
				{Ki = 0;}
 800251e:	4b46      	ldr	r3, [pc, #280]	; (8002638 <MultifunctionButton+0x230>)
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
		}
		if (Kd_modify_flag == 1)
 8002526:	4b45      	ldr	r3, [pc, #276]	; (800263c <MultifunctionButton+0x234>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d121      	bne.n	8002572 <MultifunctionButton+0x16a>
		{
			Kd -= 0.2;
 800252e:	4b44      	ldr	r3, [pc, #272]	; (8002640 <MultifunctionButton+0x238>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe f810 	bl	8000558 <__aeabi_f2d>
 8002538:	a337      	add	r3, pc, #220	; (adr r3, 8002618 <MultifunctionButton+0x210>)
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	f7fd feab 	bl	8000298 <__aeabi_dsub>
 8002542:	4603      	mov	r3, r0
 8002544:	460c      	mov	r4, r1
 8002546:	4618      	mov	r0, r3
 8002548:	4621      	mov	r1, r4
 800254a:	f7fe fb35 	bl	8000bb8 <__aeabi_d2f>
 800254e:	4602      	mov	r2, r0
 8002550:	4b3b      	ldr	r3, [pc, #236]	; (8002640 <MultifunctionButton+0x238>)
 8002552:	601a      	str	r2, [r3, #0]
			line = 3;
 8002554:	4b33      	ldr	r3, [pc, #204]	; (8002624 <MultifunctionButton+0x21c>)
 8002556:	2203      	movs	r2, #3
 8002558:	701a      	strb	r2, [r3, #0]
			if (Kd <= 0)
 800255a:	4b39      	ldr	r3, [pc, #228]	; (8002640 <MultifunctionButton+0x238>)
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002568:	d803      	bhi.n	8002572 <MultifunctionButton+0x16a>
				{Kd = 0;}
 800256a:	4b35      	ldr	r3, [pc, #212]	; (8002640 <MultifunctionButton+0x238>)
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
		}
		Menu_system_control(Menu_type, line);
 8002572:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <MultifunctionButton+0x218>)
 8002574:	781a      	ldrb	r2, [r3, #0]
 8002576:	4b2b      	ldr	r3, [pc, #172]	; (8002624 <MultifunctionButton+0x21c>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f7fe fceb 	bl	8000f58 <Menu_system_control>
		break;
 8002582:	e047      	b.n	8002614 <MultifunctionButton+0x20c>
	case Engine_menu:
		line++;
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <MultifunctionButton+0x21c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	b2da      	uxtb	r2, r3
 800258c:	4b25      	ldr	r3, [pc, #148]	; (8002624 <MultifunctionButton+0x21c>)
 800258e:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_Menu_line - 2)
 8002590:	4b24      	ldr	r3, [pc, #144]	; (8002624 <MultifunctionButton+0x21c>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b03      	cmp	r3, #3
 8002596:	d902      	bls.n	800259e <MultifunctionButton+0x196>
		{
			line = Number_of_Menu_firstline;
 8002598:	4b22      	ldr	r3, [pc, #136]	; (8002624 <MultifunctionButton+0x21c>)
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
		}
		if (Left_modify_flag == 1)
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <MultifunctionButton+0x23c>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d10f      	bne.n	80025c6 <MultifunctionButton+0x1be>
		{
			Left -= 100;
 80025a6:	4b28      	ldr	r3, [pc, #160]	; (8002648 <MultifunctionButton+0x240>)
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	3b64      	subs	r3, #100	; 0x64
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	4b26      	ldr	r3, [pc, #152]	; (8002648 <MultifunctionButton+0x240>)
 80025b0:	801a      	strh	r2, [r3, #0]
			line = 1;
 80025b2:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <MultifunctionButton+0x21c>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
			if (Left <= 0)
 80025b8:	4b23      	ldr	r3, [pc, #140]	; (8002648 <MultifunctionButton+0x240>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d102      	bne.n	80025c6 <MultifunctionButton+0x1be>
				{Left = 0;}
 80025c0:	4b21      	ldr	r3, [pc, #132]	; (8002648 <MultifunctionButton+0x240>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	801a      	strh	r2, [r3, #0]
		}
		if (Right_modify_flag == 1)
 80025c6:	4b21      	ldr	r3, [pc, #132]	; (800264c <MultifunctionButton+0x244>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d10f      	bne.n	80025ee <MultifunctionButton+0x1e6>
		{
			Right -= 100;
 80025ce:	4b20      	ldr	r3, [pc, #128]	; (8002650 <MultifunctionButton+0x248>)
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	3b64      	subs	r3, #100	; 0x64
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	4b1e      	ldr	r3, [pc, #120]	; (8002650 <MultifunctionButton+0x248>)
 80025d8:	801a      	strh	r2, [r3, #0]
			line = 2;
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <MultifunctionButton+0x21c>)
 80025dc:	2202      	movs	r2, #2
 80025de:	701a      	strb	r2, [r3, #0]
			if (Right <= 0)
 80025e0:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <MultifunctionButton+0x248>)
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <MultifunctionButton+0x1e6>
				{Right = 0;}
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <MultifunctionButton+0x248>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	801a      	strh	r2, [r3, #0]
		}
		Menu_system_control(Menu_type, line);
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <MultifunctionButton+0x218>)
 80025f0:	781a      	ldrb	r2, [r3, #0]
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <MultifunctionButton+0x21c>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	4619      	mov	r1, r3
 80025f8:	4610      	mov	r0, r2
 80025fa:	f7fe fcad 	bl	8000f58 <Menu_system_control>
		break;
 80025fe:	e009      	b.n	8002614 <MultifunctionButton+0x20c>
	case LineDetect_Show:
		Menu_type = Main_menu;
 8002600:	4b07      	ldr	r3, [pc, #28]	; (8002620 <MultifunctionButton+0x218>)
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
		line = 1;
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <MultifunctionButton+0x21c>)
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]
		cancer_menu = 0;
 800260c:	4b11      	ldr	r3, [pc, #68]	; (8002654 <MultifunctionButton+0x24c>)
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
		break;
 8002612:	bf00      	nop
	}
}
 8002614:	bf00      	nop
 8002616:	bd98      	pop	{r3, r4, r7, pc}
 8002618:	9999999a 	.word	0x9999999a
 800261c:	3fc99999 	.word	0x3fc99999
 8002620:	20000001 	.word	0x20000001
 8002624:	20000002 	.word	0x20000002
 8002628:	20000005 	.word	0x20000005
 800262c:	2000020c 	.word	0x2000020c
 8002630:	20000218 	.word	0x20000218
 8002634:	2000020d 	.word	0x2000020d
 8002638:	2000021c 	.word	0x2000021c
 800263c:	2000020e 	.word	0x2000020e
 8002640:	20000220 	.word	0x20000220
 8002644:	2000020f 	.word	0x2000020f
 8002648:	20000212 	.word	0x20000212
 800264c:	20000210 	.word	0x20000210
 8002650:	20000214 	.word	0x20000214
 8002654:	20000004 	.word	0x20000004

08002658 <HAL_GPIO_EXTI_Callback>:

//Deboucing button program
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ButtonC_Pin && stateBTNC == 1)
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002668:	d10a      	bne.n	8002680 <HAL_GPIO_EXTI_Callback+0x28>
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_GPIO_EXTI_Callback+0x34>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d106      	bne.n	8002680 <HAL_GPIO_EXTI_Callback+0x28>
	{
		HAL_TIM_Base_Start_IT(&htim5);
 8002672:	4807      	ldr	r0, [pc, #28]	; (8002690 <HAL_GPIO_EXTI_Callback+0x38>)
 8002674:	f003 f84f 	bl	8005716 <HAL_TIM_Base_Start_IT>
		stateBTNC = 0;
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <HAL_GPIO_EXTI_Callback+0x34>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
 800267e:	e000      	b.n	8002682 <HAL_GPIO_EXTI_Callback+0x2a>
	}

	else
	{
		__NOP();
 8002680:	bf00      	nop
	}
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000003 	.word	0x20000003
 8002690:	20000324 	.word	0x20000324

08002694 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim5.Instance)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d112      	bne.n	80026ce <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		if (HAL_GPIO_ReadPin(ButtonC_GPIO_Port, ButtonC_Pin)
 80026a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026ac:	480b      	ldr	r0, [pc, #44]	; (80026dc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026ae:	f001 ff1b 	bl	80044e8 <HAL_GPIO_ReadPin>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10a      	bne.n	80026ce <HAL_TIM_PeriodElapsedCallback+0x3a>
				== GPIO_PIN_RESET)
		{
			MultifunctionButton();
 80026b8:	f7ff fea6 	bl	8002408 <MultifunctionButton>
			menu_display = 1;
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
			stateBTNC = 1;
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim5);
 80026c8:	4803      	ldr	r0, [pc, #12]	; (80026d8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80026ca:	f003 f848 	bl	800575e <HAL_TIM_Base_Stop_IT>

		}
	}
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000324 	.word	0x20000324
 80026dc:	40020800 	.word	0x40020800
 80026e0:	20000000 	.word	0x20000000
 80026e4:	20000003 	.word	0x20000003

080026e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80026ee:	e7fe      	b.n	80026ee <Error_Handler+0x6>

080026f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_MspInit+0x4c>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	4a0f      	ldr	r2, [pc, #60]	; (800273c <HAL_MspInit+0x4c>)
 8002700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002704:	6453      	str	r3, [r2, #68]	; 0x44
 8002706:	4b0d      	ldr	r3, [pc, #52]	; (800273c <HAL_MspInit+0x4c>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_MspInit+0x4c>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	4a08      	ldr	r2, [pc, #32]	; (800273c <HAL_MspInit+0x4c>)
 800271c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002720:	6413      	str	r3, [r2, #64]	; 0x40
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_MspInit+0x4c>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800

08002740 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	; 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a33      	ldr	r2, [pc, #204]	; (800282c <HAL_ADC_MspInit+0xec>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d15f      	bne.n	8002822 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	4b32      	ldr	r3, [pc, #200]	; (8002830 <HAL_ADC_MspInit+0xf0>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	4a31      	ldr	r2, [pc, #196]	; (8002830 <HAL_ADC_MspInit+0xf0>)
 800276c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002770:	6453      	str	r3, [r2, #68]	; 0x44
 8002772:	4b2f      	ldr	r3, [pc, #188]	; (8002830 <HAL_ADC_MspInit+0xf0>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <HAL_ADC_MspInit+0xf0>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a2a      	ldr	r2, [pc, #168]	; (8002830 <HAL_ADC_MspInit+0xf0>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b28      	ldr	r3, [pc, #160]	; (8002830 <HAL_ADC_MspInit+0xf0>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800279a:	23fc      	movs	r3, #252	; 0xfc
 800279c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800279e:	2303      	movs	r3, #3
 80027a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a6:	f107 0314 	add.w	r3, r7, #20
 80027aa:	4619      	mov	r1, r3
 80027ac:	4821      	ldr	r0, [pc, #132]	; (8002834 <HAL_ADC_MspInit+0xf4>)
 80027ae:	f001 fd19 	bl	80041e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80027b2:	4b21      	ldr	r3, [pc, #132]	; (8002838 <HAL_ADC_MspInit+0xf8>)
 80027b4:	4a21      	ldr	r2, [pc, #132]	; (800283c <HAL_ADC_MspInit+0xfc>)
 80027b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80027b8:	4b1f      	ldr	r3, [pc, #124]	; (8002838 <HAL_ADC_MspInit+0xf8>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027be:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <HAL_ADC_MspInit+0xf8>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c4:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <HAL_ADC_MspInit+0xf8>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027ca:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <HAL_ADC_MspInit+0xf8>)
 80027cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_ADC_MspInit+0xf8>)
 80027d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027da:	4b17      	ldr	r3, [pc, #92]	; (8002838 <HAL_ADC_MspInit+0xf8>)
 80027dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_ADC_MspInit+0xf8>)
 80027e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027ea:	4b13      	ldr	r3, [pc, #76]	; (8002838 <HAL_ADC_MspInit+0xf8>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_ADC_MspInit+0xf8>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027f6:	4810      	ldr	r0, [pc, #64]	; (8002838 <HAL_ADC_MspInit+0xf8>)
 80027f8:	f001 f986 	bl	8003b08 <HAL_DMA_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002802:	f7ff ff71 	bl	80026e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a0b      	ldr	r2, [pc, #44]	; (8002838 <HAL_ADC_MspInit+0xf8>)
 800280a:	639a      	str	r2, [r3, #56]	; 0x38
 800280c:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <HAL_ADC_MspInit+0xf8>)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2100      	movs	r1, #0
 8002816:	2012      	movs	r0, #18
 8002818:	f001 f93f 	bl	8003a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800281c:	2012      	movs	r0, #18
 800281e:	f001 f958 	bl	8003ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002822:	bf00      	nop
 8002824:	3728      	adds	r7, #40	; 0x28
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40012000 	.word	0x40012000
 8002830:	40023800 	.word	0x40023800
 8002834:	40020000 	.word	0x40020000
 8002838:	200003ec 	.word	0x200003ec
 800283c:	40026410 	.word	0x40026410

08002840 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a28      	ldr	r2, [pc, #160]	; (8002900 <HAL_I2C_MspInit+0xc0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d14a      	bne.n	80028f8 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	4b27      	ldr	r3, [pc, #156]	; (8002904 <HAL_I2C_MspInit+0xc4>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	4a26      	ldr	r2, [pc, #152]	; (8002904 <HAL_I2C_MspInit+0xc4>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6313      	str	r3, [r2, #48]	; 0x30
 8002872:	4b24      	ldr	r3, [pc, #144]	; (8002904 <HAL_I2C_MspInit+0xc4>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <HAL_I2C_MspInit+0xc4>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a1f      	ldr	r2, [pc, #124]	; (8002904 <HAL_I2C_MspInit+0xc4>)
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_I2C_MspInit+0xc4>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800289a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800289e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a0:	2312      	movs	r3, #18
 80028a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a4:	2301      	movs	r3, #1
 80028a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a8:	2303      	movs	r3, #3
 80028aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028ac:	2304      	movs	r3, #4
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	4619      	mov	r1, r3
 80028b6:	4814      	ldr	r0, [pc, #80]	; (8002908 <HAL_I2C_MspInit+0xc8>)
 80028b8:	f001 fc94 	bl	80041e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028bc:	2310      	movs	r3, #16
 80028be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028c0:	2312      	movs	r3, #18
 80028c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028c4:	2301      	movs	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c8:	2303      	movs	r3, #3
 80028ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80028cc:	2309      	movs	r3, #9
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	4619      	mov	r1, r3
 80028d6:	480d      	ldr	r0, [pc, #52]	; (800290c <HAL_I2C_MspInit+0xcc>)
 80028d8:	f001 fc84 	bl	80041e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80028dc:	2300      	movs	r3, #0
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	4b08      	ldr	r3, [pc, #32]	; (8002904 <HAL_I2C_MspInit+0xc4>)
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	4a07      	ldr	r2, [pc, #28]	; (8002904 <HAL_I2C_MspInit+0xc4>)
 80028e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028ea:	6413      	str	r3, [r2, #64]	; 0x40
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_I2C_MspInit+0xc4>)
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80028f8:	bf00      	nop
 80028fa:	3728      	adds	r7, #40	; 0x28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40005c00 	.word	0x40005c00
 8002904:	40023800 	.word	0x40023800
 8002908:	40020000 	.word	0x40020000
 800290c:	40020400 	.word	0x40020400

08002910 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08c      	sub	sp, #48	; 0x30
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 031c 	add.w	r3, r7, #28
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002930:	d14b      	bne.n	80029ca <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	4b3f      	ldr	r3, [pc, #252]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x124>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	4a3e      	ldr	r2, [pc, #248]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x124>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6413      	str	r3, [r2, #64]	; 0x40
 8002942:	4b3c      	ldr	r3, [pc, #240]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x124>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	61bb      	str	r3, [r7, #24]
 800294c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	4b38      	ldr	r3, [pc, #224]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x124>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a37      	ldr	r2, [pc, #220]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x124>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b35      	ldr	r3, [pc, #212]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x124>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x124>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a30      	ldr	r2, [pc, #192]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x124>)
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b2e      	ldr	r3, [pc, #184]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x124>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800298a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002998:	2301      	movs	r3, #1
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	4619      	mov	r1, r3
 80029a2:	4825      	ldr	r0, [pc, #148]	; (8002a38 <HAL_TIM_Encoder_MspInit+0x128>)
 80029a4:	f001 fc1e 	bl	80041e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029a8:	2308      	movs	r3, #8
 80029aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ac:	2302      	movs	r3, #2
 80029ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	2300      	movs	r3, #0
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029b8:	2301      	movs	r3, #1
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029bc:	f107 031c 	add.w	r3, r7, #28
 80029c0:	4619      	mov	r1, r3
 80029c2:	481e      	ldr	r0, [pc, #120]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x12c>)
 80029c4:	f001 fc0e 	bl	80041e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80029c8:	e030      	b.n	8002a2c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1c      	ldr	r2, [pc, #112]	; (8002a40 <HAL_TIM_Encoder_MspInit+0x130>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d12b      	bne.n	8002a2c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x124>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	4a15      	ldr	r2, [pc, #84]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x124>)
 80029de:	f043 0304 	orr.w	r3, r3, #4
 80029e2:	6413      	str	r3, [r2, #64]	; 0x40
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x124>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f0:	2300      	movs	r3, #0
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x124>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	4a0e      	ldr	r2, [pc, #56]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x124>)
 80029fa:	f043 0302 	orr.w	r3, r3, #2
 80029fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a0c:	23c0      	movs	r3, #192	; 0xc0
 8002a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	2302      	movs	r3, #2
 8002a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a20:	f107 031c 	add.w	r3, r7, #28
 8002a24:	4619      	mov	r1, r3
 8002a26:	4805      	ldr	r0, [pc, #20]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x12c>)
 8002a28:	f001 fbdc 	bl	80041e4 <HAL_GPIO_Init>
}
 8002a2c:	bf00      	nop
 8002a2e:	3730      	adds	r7, #48	; 0x30
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40020000 	.word	0x40020000
 8002a3c:	40020400 	.word	0x40020400
 8002a40:	40000800 	.word	0x40000800

08002a44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d10d      	bne.n	8002a72 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <HAL_TIM_PWM_MspInit+0x40>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <HAL_TIM_PWM_MspInit+0x40>)
 8002a60:	f043 0302 	orr.w	r3, r3, #2
 8002a64:	6413      	str	r3, [r2, #64]	; 0x40
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <HAL_TIM_PWM_MspInit+0x40>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a72:	bf00      	nop
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40000400 	.word	0x40000400
 8002a84:	40023800 	.word	0x40023800

08002a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0e      	ldr	r2, [pc, #56]	; (8002ad0 <HAL_TIM_Base_MspInit+0x48>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d115      	bne.n	8002ac6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <HAL_TIM_Base_MspInit+0x4c>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	4a0c      	ldr	r2, [pc, #48]	; (8002ad4 <HAL_TIM_Base_MspInit+0x4c>)
 8002aa4:	f043 0308 	orr.w	r3, r3, #8
 8002aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <HAL_TIM_Base_MspInit+0x4c>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2100      	movs	r1, #0
 8002aba:	2032      	movs	r0, #50	; 0x32
 8002abc:	f000 ffed 	bl	8003a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002ac0:	2032      	movs	r0, #50	; 0x32
 8002ac2:	f001 f806 	bl	8003ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002ac6:	bf00      	nop
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40000c00 	.word	0x40000c00
 8002ad4:	40023800 	.word	0x40023800

08002ad8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 030c 	add.w	r3, r7, #12
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <HAL_TIM_MspPostInit+0x68>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d11d      	bne.n	8002b36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <HAL_TIM_MspPostInit+0x6c>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	4a10      	ldr	r2, [pc, #64]	; (8002b44 <HAL_TIM_MspPostInit+0x6c>)
 8002b04:	f043 0302 	orr.w	r3, r3, #2
 8002b08:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <HAL_TIM_MspPostInit+0x6c>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b16:	2303      	movs	r3, #3
 8002b18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b26:	2302      	movs	r3, #2
 8002b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2a:	f107 030c 	add.w	r3, r7, #12
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4805      	ldr	r0, [pc, #20]	; (8002b48 <HAL_TIM_MspPostInit+0x70>)
 8002b32:	f001 fb57 	bl	80041e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b36:	bf00      	nop
 8002b38:	3720      	adds	r7, #32
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40000400 	.word	0x40000400
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40020400 	.word	0x40020400

08002b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	; 0x28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b54:	f107 0314 	add.w	r3, r7, #20
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a19      	ldr	r2, [pc, #100]	; (8002bd0 <HAL_UART_MspInit+0x84>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d12c      	bne.n	8002bc8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <HAL_UART_MspInit+0x88>)
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	4a17      	ldr	r2, [pc, #92]	; (8002bd4 <HAL_UART_MspInit+0x88>)
 8002b78:	f043 0320 	orr.w	r3, r3, #32
 8002b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7e:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <HAL_UART_MspInit+0x88>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_UART_MspInit+0x88>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <HAL_UART_MspInit+0x88>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <HAL_UART_MspInit+0x88>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002ba6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bac:	2302      	movs	r3, #2
 8002bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002bb8:	2308      	movs	r3, #8
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4805      	ldr	r0, [pc, #20]	; (8002bd8 <HAL_UART_MspInit+0x8c>)
 8002bc4:	f001 fb0e 	bl	80041e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002bc8:	bf00      	nop
 8002bca:	3728      	adds	r7, #40	; 0x28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40011400 	.word	0x40011400
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40020000 	.word	0x40020000

08002bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002be0:	e7fe      	b.n	8002be0 <NMI_Handler+0x4>

08002be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002be6:	e7fe      	b.n	8002be6 <HardFault_Handler+0x4>

08002be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bec:	e7fe      	b.n	8002bec <MemManage_Handler+0x4>

08002bee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bf2:	e7fe      	b.n	8002bf2 <BusFault_Handler+0x4>

08002bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf8:	e7fe      	b.n	8002bf8 <UsageFault_Handler+0x4>

08002bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c28:	f000 f8f0 	bl	8002e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c2c:	bf00      	nop
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c34:	4802      	ldr	r0, [pc, #8]	; (8002c40 <ADC_IRQHandler+0x10>)
 8002c36:	f000 f96e 	bl	8002f16 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200003a4 	.word	0x200003a4

08002c44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002c48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c4c:	f001 fc7e 	bl	800454c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c50:	bf00      	nop
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002c58:	4802      	ldr	r0, [pc, #8]	; (8002c64 <TIM5_IRQHandler+0x10>)
 8002c5a:	f002 fe9b 	bl	8005994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000324 	.word	0x20000324

08002c68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <DMA2_Stream0_IRQHandler+0x10>)
 8002c6e:	f001 f851 	bl	8003d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	200003ec 	.word	0x200003ec

08002c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c84:	4a14      	ldr	r2, [pc, #80]	; (8002cd8 <_sbrk+0x5c>)
 8002c86:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <_sbrk+0x60>)
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c90:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <_sbrk+0x64>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c98:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <_sbrk+0x64>)
 8002c9a:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <_sbrk+0x68>)
 8002c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <_sbrk+0x64>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d207      	bcs.n	8002cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cac:	f004 f838 	bl	8006d20 <__errno>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	230c      	movs	r3, #12
 8002cb4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cba:	e009      	b.n	8002cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <_sbrk+0x64>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cc2:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <_sbrk+0x64>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	4a05      	ldr	r2, [pc, #20]	; (8002ce0 <_sbrk+0x64>)
 8002ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cce:	68fb      	ldr	r3, [r7, #12]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20010000 	.word	0x20010000
 8002cdc:	00000400 	.word	0x00000400
 8002ce0:	20000224 	.word	0x20000224
 8002ce4:	200004d8 	.word	0x200004d8

08002ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <SystemInit+0x28>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf2:	4a07      	ldr	r2, [pc, #28]	; (8002d10 <SystemInit+0x28>)
 8002cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <SystemInit+0x28>)
 8002cfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d02:	609a      	str	r2, [r3, #8]
#endif
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d1a:	e003      	b.n	8002d24 <LoopCopyDataInit>

08002d1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d22:	3104      	adds	r1, #4

08002d24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d24:	480b      	ldr	r0, [pc, #44]	; (8002d54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d26:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d2c:	d3f6      	bcc.n	8002d1c <CopyDataInit>
  ldr  r2, =_sbss
 8002d2e:	4a0b      	ldr	r2, [pc, #44]	; (8002d5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d30:	e002      	b.n	8002d38 <LoopFillZerobss>

08002d32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d34:	f842 3b04 	str.w	r3, [r2], #4

08002d38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d3c:	d3f9      	bcc.n	8002d32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d3e:	f7ff ffd3 	bl	8002ce8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d42:	f003 fff3 	bl	8006d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d46:	f7fe fe77 	bl	8001a38 <main>
  bx  lr    
 8002d4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d4c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8002d50:	08009380 	.word	0x08009380
  ldr  r0, =_sdata
 8002d54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d58:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8002d5c:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8002d60:	200004d4 	.word	0x200004d4

08002d64 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d64:	e7fe      	b.n	8002d64 <DMA1_Stream0_IRQHandler>
	...

08002d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d6c:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <HAL_Init+0x40>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0d      	ldr	r2, [pc, #52]	; (8002da8 <HAL_Init+0x40>)
 8002d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_Init+0x40>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <HAL_Init+0x40>)
 8002d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <HAL_Init+0x40>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a07      	ldr	r2, [pc, #28]	; (8002da8 <HAL_Init+0x40>)
 8002d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d90:	2003      	movs	r0, #3
 8002d92:	f000 fe77 	bl	8003a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f000 f808 	bl	8002dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d9c:	f7ff fca8 	bl	80026f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40023c00 	.word	0x40023c00

08002dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002db4:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_InitTick+0x54>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_InitTick+0x58>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fe8f 	bl	8003aee <HAL_SYSTICK_Config>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00e      	b.n	8002df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b0f      	cmp	r3, #15
 8002dde:	d80a      	bhi.n	8002df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de0:	2200      	movs	r2, #0
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295
 8002de8:	f000 fe57 	bl	8003a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dec:	4a06      	ldr	r2, [pc, #24]	; (8002e08 <HAL_InitTick+0x5c>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20000014 	.word	0x20000014
 8002e04:	2000001c 	.word	0x2000001c
 8002e08:	20000018 	.word	0x20000018

08002e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_IncTick+0x20>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_IncTick+0x24>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <HAL_IncTick+0x24>)
 8002e1e:	6013      	str	r3, [r2, #0]
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	2000001c 	.word	0x2000001c
 8002e30:	200004cc 	.word	0x200004cc

08002e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return uwTick;
 8002e38:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <HAL_GetTick+0x14>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	200004cc 	.word	0x200004cc

08002e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e54:	f7ff ffee 	bl	8002e34 <HAL_GetTick>
 8002e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d005      	beq.n	8002e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_Delay+0x40>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4413      	add	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e72:	bf00      	nop
 8002e74:	f7ff ffde 	bl	8002e34 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d8f7      	bhi.n	8002e74 <HAL_Delay+0x28>
  {
  }
}
 8002e84:	bf00      	nop
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	2000001c 	.word	0x2000001c

08002e90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e033      	b.n	8002f0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff fc46 	bl	8002740 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d118      	bne.n	8002f00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ed6:	f023 0302 	bic.w	r3, r3, #2
 8002eda:	f043 0202 	orr.w	r2, r3, #2
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fb76 	bl	80035d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f023 0303 	bic.w	r3, r3, #3
 8002ef6:	f043 0201 	orr.w	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
 8002efe:	e001      	b.n	8002f04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	2300      	movs	r3, #0
 8002f24:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	bf0c      	ite	eq
 8002f4a:	2301      	moveq	r3, #1
 8002f4c:	2300      	movne	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d049      	beq.n	8002fec <HAL_ADC_IRQHandler+0xd6>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d046      	beq.n	8002fec <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d105      	bne.n	8002f76 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d12b      	bne.n	8002fdc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d127      	bne.n	8002fdc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d006      	beq.n	8002fa8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d119      	bne.n	8002fdc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0220 	bic.w	r2, r2, #32
 8002fb6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d105      	bne.n	8002fdc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f043 0201 	orr.w	r2, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f9af 	bl	8003340 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f06f 0212 	mvn.w	r2, #18
 8002fea:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	bf0c      	ite	eq
 8002ffa:	2301      	moveq	r3, #1
 8002ffc:	2300      	movne	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300c:	2b80      	cmp	r3, #128	; 0x80
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d057      	beq.n	80030ce <HAL_ADC_IRQHandler+0x1b8>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d054      	beq.n	80030ce <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d139      	bne.n	80030be <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003054:	2b00      	cmp	r3, #0
 8003056:	d006      	beq.n	8003066 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003062:	2b00      	cmp	r3, #0
 8003064:	d12b      	bne.n	80030be <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003070:	2b00      	cmp	r3, #0
 8003072:	d124      	bne.n	80030be <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11d      	bne.n	80030be <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003086:	2b00      	cmp	r3, #0
 8003088:	d119      	bne.n	80030be <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003098:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f043 0201 	orr.w	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fc06 	bl	80038d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 020c 	mvn.w	r2, #12
 80030cc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b01      	cmp	r3, #1
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ee:	2b40      	cmp	r3, #64	; 0x40
 80030f0:	bf0c      	ite	eq
 80030f2:	2301      	moveq	r3, #1
 80030f4:	2300      	movne	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d017      	beq.n	8003130 <HAL_ADC_IRQHandler+0x21a>
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d014      	beq.n	8003130 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d10d      	bne.n	8003130 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f921 	bl	8003368 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f06f 0201 	mvn.w	r2, #1
 800312e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b20      	cmp	r3, #32
 800313c:	bf0c      	ite	eq
 800313e:	2301      	moveq	r3, #1
 8003140:	2300      	movne	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003154:	bf0c      	ite	eq
 8003156:	2301      	moveq	r3, #1
 8003158:	2300      	movne	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d015      	beq.n	8003190 <HAL_ADC_IRQHandler+0x27a>
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d012      	beq.n	8003190 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	f043 0202 	orr.w	r2, r3, #2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f06f 0220 	mvn.w	r2, #32
 800317e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f8fb 	bl	800337c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f06f 0220 	mvn.w	r2, #32
 800318e:	601a      	str	r2, [r3, #0]
  }
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_Start_DMA+0x1e>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e0b1      	b.n	800331a <HAL_ADC_Start_DMA+0x182>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d018      	beq.n	80031fe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031dc:	4b51      	ldr	r3, [pc, #324]	; (8003324 <HAL_ADC_Start_DMA+0x18c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a51      	ldr	r2, [pc, #324]	; (8003328 <HAL_ADC_Start_DMA+0x190>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	0c9a      	lsrs	r2, r3, #18
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031f0:	e002      	b.n	80031f8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f9      	bne.n	80031f2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b01      	cmp	r3, #1
 800320a:	f040 8085 	bne.w	8003318 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322c:	2b00      	cmp	r3, #0
 800322e:	d007      	beq.n	8003240 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003238:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324c:	d106      	bne.n	800325c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	f023 0206 	bic.w	r2, r3, #6
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	645a      	str	r2, [r3, #68]	; 0x44
 800325a:	e002      	b.n	8003262 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800326a:	4b30      	ldr	r3, [pc, #192]	; (800332c <HAL_ADC_Start_DMA+0x194>)
 800326c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	4a2f      	ldr	r2, [pc, #188]	; (8003330 <HAL_ADC_Start_DMA+0x198>)
 8003274:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	4a2e      	ldr	r2, [pc, #184]	; (8003334 <HAL_ADC_Start_DMA+0x19c>)
 800327c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003282:	4a2d      	ldr	r2, [pc, #180]	; (8003338 <HAL_ADC_Start_DMA+0x1a0>)
 8003284:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800328e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800329e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	334c      	adds	r3, #76	; 0x4c
 80032ba:	4619      	mov	r1, r3
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f000 fcd0 	bl	8003c64 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10f      	bne.n	80032f0 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d11c      	bne.n	8003318 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032ec:	609a      	str	r2, [r3, #8]
 80032ee:	e013      	b.n	8003318 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a11      	ldr	r2, [pc, #68]	; (800333c <HAL_ADC_Start_DMA+0x1a4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d10e      	bne.n	8003318 <HAL_ADC_Start_DMA+0x180>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d107      	bne.n	8003318 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003316:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000014 	.word	0x20000014
 8003328:	431bde83 	.word	0x431bde83
 800332c:	40012300 	.word	0x40012300
 8003330:	080037cd 	.word	0x080037cd
 8003334:	08003887 	.word	0x08003887
 8003338:	080038a3 	.word	0x080038a3
 800333c:	40012000 	.word	0x40012000

08003340 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x1c>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e105      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x228>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b09      	cmp	r3, #9
 80033ba:	d925      	bls.n	8003408 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68d9      	ldr	r1, [r3, #12]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	4613      	mov	r3, r2
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	4413      	add	r3, r2
 80033d0:	3b1e      	subs	r3, #30
 80033d2:	2207      	movs	r2, #7
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43da      	mvns	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	400a      	ands	r2, r1
 80033e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68d9      	ldr	r1, [r3, #12]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	4618      	mov	r0, r3
 80033f4:	4603      	mov	r3, r0
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4403      	add	r3, r0
 80033fa:	3b1e      	subs	r3, #30
 80033fc:	409a      	lsls	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	e022      	b.n	800344e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6919      	ldr	r1, [r3, #16]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	b29b      	uxth	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	4613      	mov	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	2207      	movs	r2, #7
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43da      	mvns	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	400a      	ands	r2, r1
 800342a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6919      	ldr	r1, [r3, #16]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	4618      	mov	r0, r3
 800343e:	4603      	mov	r3, r0
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4403      	add	r3, r0
 8003444:	409a      	lsls	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b06      	cmp	r3, #6
 8003454:	d824      	bhi.n	80034a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	3b05      	subs	r3, #5
 8003468:	221f      	movs	r2, #31
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43da      	mvns	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	400a      	ands	r2, r1
 8003476:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	b29b      	uxth	r3, r3
 8003484:	4618      	mov	r0, r3
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	3b05      	subs	r3, #5
 8003492:	fa00 f203 	lsl.w	r2, r0, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	635a      	str	r2, [r3, #52]	; 0x34
 800349e:	e04c      	b.n	800353a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b0c      	cmp	r3, #12
 80034a6:	d824      	bhi.n	80034f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	3b23      	subs	r3, #35	; 0x23
 80034ba:	221f      	movs	r2, #31
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43da      	mvns	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	400a      	ands	r2, r1
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	4618      	mov	r0, r3
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	3b23      	subs	r3, #35	; 0x23
 80034e4:	fa00 f203 	lsl.w	r2, r0, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
 80034f0:	e023      	b.n	800353a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	3b41      	subs	r3, #65	; 0x41
 8003504:	221f      	movs	r2, #31
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43da      	mvns	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	400a      	ands	r2, r1
 8003512:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	4618      	mov	r0, r3
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	3b41      	subs	r3, #65	; 0x41
 800352e:	fa00 f203 	lsl.w	r2, r0, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800353a:	4b22      	ldr	r3, [pc, #136]	; (80035c4 <HAL_ADC_ConfigChannel+0x234>)
 800353c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a21      	ldr	r2, [pc, #132]	; (80035c8 <HAL_ADC_ConfigChannel+0x238>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d109      	bne.n	800355c <HAL_ADC_ConfigChannel+0x1cc>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b12      	cmp	r3, #18
 800354e:	d105      	bne.n	800355c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a19      	ldr	r2, [pc, #100]	; (80035c8 <HAL_ADC_ConfigChannel+0x238>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d123      	bne.n	80035ae <HAL_ADC_ConfigChannel+0x21e>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b10      	cmp	r3, #16
 800356c:	d003      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x1e6>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b11      	cmp	r3, #17
 8003574:	d11b      	bne.n	80035ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b10      	cmp	r3, #16
 8003588:	d111      	bne.n	80035ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800358a:	4b10      	ldr	r3, [pc, #64]	; (80035cc <HAL_ADC_ConfigChannel+0x23c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a10      	ldr	r2, [pc, #64]	; (80035d0 <HAL_ADC_ConfigChannel+0x240>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	0c9a      	lsrs	r2, r3, #18
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035a0:	e002      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f9      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	40012300 	.word	0x40012300
 80035c8:	40012000 	.word	0x40012000
 80035cc:	20000014 	.word	0x20000014
 80035d0:	431bde83 	.word	0x431bde83

080035d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035dc:	4b79      	ldr	r3, [pc, #484]	; (80037c4 <ADC_Init+0x1f0>)
 80035de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003608:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6859      	ldr	r1, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	021a      	lsls	r2, r3, #8
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800362c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6859      	ldr	r1, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800364e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6899      	ldr	r1, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003666:	4a58      	ldr	r2, [pc, #352]	; (80037c8 <ADC_Init+0x1f4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d022      	beq.n	80036b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800367a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6899      	ldr	r1, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800369c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6899      	ldr	r1, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	e00f      	b.n	80036d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0202 	bic.w	r2, r2, #2
 80036e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6899      	ldr	r1, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	7e1b      	ldrb	r3, [r3, #24]
 80036ec:	005a      	lsls	r2, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01b      	beq.n	8003738 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800370e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800371e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6859      	ldr	r1, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	3b01      	subs	r3, #1
 800372c:	035a      	lsls	r2, r3, #13
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	e007      	b.n	8003748 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003746:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003756:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	3b01      	subs	r3, #1
 8003764:	051a      	lsls	r2, r3, #20
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800377c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6899      	ldr	r1, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800378a:	025a      	lsls	r2, r3, #9
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6899      	ldr	r1, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	029a      	lsls	r2, r3, #10
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	609a      	str	r2, [r3, #8]
}
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	40012300 	.word	0x40012300
 80037c8:	0f000001 	.word	0x0f000001

080037cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d13c      	bne.n	8003860 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d12b      	bne.n	8003858 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003804:	2b00      	cmp	r3, #0
 8003806:	d127      	bne.n	8003858 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003812:	2b00      	cmp	r3, #0
 8003814:	d006      	beq.n	8003824 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003820:	2b00      	cmp	r3, #0
 8003822:	d119      	bne.n	8003858 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0220 	bic.w	r2, r2, #32
 8003832:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d105      	bne.n	8003858 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	f043 0201 	orr.w	r2, r3, #1
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f7ff fd71 	bl	8003340 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800385e:	e00e      	b.n	800387e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f7ff fd85 	bl	800337c <HAL_ADC_ErrorCallback>
}
 8003872:	e004      	b.n	800387e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	4798      	blx	r3
}
 800387e:	bf00      	nop
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f7ff fd5d 	bl	8003354 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2240      	movs	r2, #64	; 0x40
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ba:	f043 0204 	orr.w	r2, r3, #4
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f7ff fd5a 	bl	800337c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038c8:	bf00      	nop
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <__NVIC_SetPriorityGrouping+0x44>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003900:	4013      	ands	r3, r2
 8003902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800390c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003916:	4a04      	ldr	r2, [pc, #16]	; (8003928 <__NVIC_SetPriorityGrouping+0x44>)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	60d3      	str	r3, [r2, #12]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <__NVIC_GetPriorityGrouping+0x18>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	0a1b      	lsrs	r3, r3, #8
 8003936:	f003 0307 	and.w	r3, r3, #7
}
 800393a:	4618      	mov	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	2b00      	cmp	r3, #0
 8003958:	db0b      	blt.n	8003972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	f003 021f 	and.w	r2, r3, #31
 8003960:	4907      	ldr	r1, [pc, #28]	; (8003980 <__NVIC_EnableIRQ+0x38>)
 8003962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	2001      	movs	r0, #1
 800396a:	fa00 f202 	lsl.w	r2, r0, r2
 800396e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	e000e100 	.word	0xe000e100

08003984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	6039      	str	r1, [r7, #0]
 800398e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003994:	2b00      	cmp	r3, #0
 8003996:	db0a      	blt.n	80039ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	b2da      	uxtb	r2, r3
 800399c:	490c      	ldr	r1, [pc, #48]	; (80039d0 <__NVIC_SetPriority+0x4c>)
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	0112      	lsls	r2, r2, #4
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	440b      	add	r3, r1
 80039a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039ac:	e00a      	b.n	80039c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	4908      	ldr	r1, [pc, #32]	; (80039d4 <__NVIC_SetPriority+0x50>)
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	3b04      	subs	r3, #4
 80039bc:	0112      	lsls	r2, r2, #4
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	440b      	add	r3, r1
 80039c2:	761a      	strb	r2, [r3, #24]
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	e000e100 	.word	0xe000e100
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d8:	b480      	push	{r7}
 80039da:	b089      	sub	sp, #36	; 0x24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f1c3 0307 	rsb	r3, r3, #7
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	bf28      	it	cs
 80039f6:	2304      	movcs	r3, #4
 80039f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	3304      	adds	r3, #4
 80039fe:	2b06      	cmp	r3, #6
 8003a00:	d902      	bls.n	8003a08 <NVIC_EncodePriority+0x30>
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3b03      	subs	r3, #3
 8003a06:	e000      	b.n	8003a0a <NVIC_EncodePriority+0x32>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43da      	mvns	r2, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a20:	f04f 31ff 	mov.w	r1, #4294967295
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2a:	43d9      	mvns	r1, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a30:	4313      	orrs	r3, r2
         );
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3724      	adds	r7, #36	; 0x24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a50:	d301      	bcc.n	8003a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a52:	2301      	movs	r3, #1
 8003a54:	e00f      	b.n	8003a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a56:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <SysTick_Config+0x40>)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a5e:	210f      	movs	r1, #15
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295
 8003a64:	f7ff ff8e 	bl	8003984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <SysTick_Config+0x40>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a6e:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <SysTick_Config+0x40>)
 8003a70:	2207      	movs	r2, #7
 8003a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	e000e010 	.word	0xe000e010

08003a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff ff29 	bl	80038e4 <__NVIC_SetPriorityGrouping>
}
 8003a92:	bf00      	nop
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b086      	sub	sp, #24
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	607a      	str	r2, [r7, #4]
 8003aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003aac:	f7ff ff3e 	bl	800392c <__NVIC_GetPriorityGrouping>
 8003ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	6978      	ldr	r0, [r7, #20]
 8003ab8:	f7ff ff8e 	bl	80039d8 <NVIC_EncodePriority>
 8003abc:	4602      	mov	r2, r0
 8003abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff ff5d 	bl	8003984 <__NVIC_SetPriority>
}
 8003aca:	bf00      	nop
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	4603      	mov	r3, r0
 8003ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff ff31 	bl	8003948 <__NVIC_EnableIRQ>
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff ffa2 	bl	8003a40 <SysTick_Config>
 8003afc:	4603      	mov	r3, r0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b14:	f7ff f98e 	bl	8002e34 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e099      	b.n	8003c58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0201 	bic.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b44:	e00f      	b.n	8003b66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b46:	f7ff f975 	bl	8002e34 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	d908      	bls.n	8003b66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e078      	b.n	8003c58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e8      	bne.n	8003b46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	4b38      	ldr	r3, [pc, #224]	; (8003c60 <HAL_DMA_Init+0x158>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003baa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d107      	bne.n	8003bd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f023 0307 	bic.w	r3, r3, #7
 8003be6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d117      	bne.n	8003c2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00e      	beq.n	8003c2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 fa6f 	bl	80040f0 <DMA_CheckFifoParam>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2240      	movs	r2, #64	; 0x40
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c26:	2301      	movs	r3, #1
 8003c28:	e016      	b.n	8003c58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fa26 	bl	8004084 <DMA_CalcBaseAndBitshift>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c40:	223f      	movs	r2, #63	; 0x3f
 8003c42:	409a      	lsls	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	f010803f 	.word	0xf010803f

08003c64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_DMA_Start_IT+0x26>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e040      	b.n	8003d0c <HAL_DMA_Start_IT+0xa8>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d12f      	bne.n	8003cfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f9b8 	bl	8004028 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbc:	223f      	movs	r2, #63	; 0x3f
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0216 	orr.w	r2, r2, #22
 8003cd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d007      	beq.n	8003cec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0208 	orr.w	r2, r2, #8
 8003cea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	e005      	b.n	8003d0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d06:	2302      	movs	r3, #2
 8003d08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d20:	4b92      	ldr	r3, [pc, #584]	; (8003f6c <HAL_DMA_IRQHandler+0x258>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a92      	ldr	r2, [pc, #584]	; (8003f70 <HAL_DMA_IRQHandler+0x25c>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	0a9b      	lsrs	r3, r3, #10
 8003d2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3e:	2208      	movs	r2, #8
 8003d40:	409a      	lsls	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d01a      	beq.n	8003d80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d013      	beq.n	8003d80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0204 	bic.w	r2, r2, #4
 8003d66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d78:	f043 0201 	orr.w	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d84:	2201      	movs	r2, #1
 8003d86:	409a      	lsls	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d012      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da2:	2201      	movs	r2, #1
 8003da4:	409a      	lsls	r2, r3
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dae:	f043 0202 	orr.w	r2, r3, #2
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dba:	2204      	movs	r2, #4
 8003dbc:	409a      	lsls	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d012      	beq.n	8003dec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00b      	beq.n	8003dec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd8:	2204      	movs	r2, #4
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de4:	f043 0204 	orr.w	r2, r3, #4
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df0:	2210      	movs	r2, #16
 8003df2:	409a      	lsls	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d043      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d03c      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0e:	2210      	movs	r2, #16
 8003e10:	409a      	lsls	r2, r3
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d018      	beq.n	8003e56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d108      	bne.n	8003e44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d024      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	4798      	blx	r3
 8003e42:	e01f      	b.n	8003e84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01b      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	4798      	blx	r3
 8003e54:	e016      	b.n	8003e84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d107      	bne.n	8003e74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0208 	bic.w	r2, r2, #8
 8003e72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e88:	2220      	movs	r2, #32
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 808e 	beq.w	8003fb2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8086 	beq.w	8003fb2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eaa:	2220      	movs	r2, #32
 8003eac:	409a      	lsls	r2, r3
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b05      	cmp	r3, #5
 8003ebc:	d136      	bne.n	8003f2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0216 	bic.w	r2, r2, #22
 8003ecc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695a      	ldr	r2, [r3, #20]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003edc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d103      	bne.n	8003eee <HAL_DMA_IRQHandler+0x1da>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0208 	bic.w	r2, r2, #8
 8003efc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f02:	223f      	movs	r2, #63	; 0x3f
 8003f04:	409a      	lsls	r2, r3
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d07d      	beq.n	800401e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	4798      	blx	r3
        }
        return;
 8003f2a:	e078      	b.n	800401e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01c      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d108      	bne.n	8003f5a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d030      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	4798      	blx	r3
 8003f58:	e02b      	b.n	8003fb2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d027      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	4798      	blx	r3
 8003f6a:	e022      	b.n	8003fb2 <HAL_DMA_IRQHandler+0x29e>
 8003f6c:	20000014 	.word	0x20000014
 8003f70:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10f      	bne.n	8003fa2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0210 	bic.w	r2, r2, #16
 8003f90:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d032      	beq.n	8004020 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d022      	beq.n	800400c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2205      	movs	r2, #5
 8003fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0201 	bic.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	60bb      	str	r3, [r7, #8]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d307      	bcc.n	8003ffa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f2      	bne.n	8003fde <HAL_DMA_IRQHandler+0x2ca>
 8003ff8:	e000      	b.n	8003ffc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003ffa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	4798      	blx	r3
 800401c:	e000      	b.n	8004020 <HAL_DMA_IRQHandler+0x30c>
        return;
 800401e:	bf00      	nop
    }
  }
}
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop

08004028 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004044:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	d108      	bne.n	8004068 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004066:	e007      	b.n	8004078 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	60da      	str	r2, [r3, #12]
}
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	3b10      	subs	r3, #16
 8004094:	4a14      	ldr	r2, [pc, #80]	; (80040e8 <DMA_CalcBaseAndBitshift+0x64>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	091b      	lsrs	r3, r3, #4
 800409c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800409e:	4a13      	ldr	r2, [pc, #76]	; (80040ec <DMA_CalcBaseAndBitshift+0x68>)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d909      	bls.n	80040c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ba:	f023 0303 	bic.w	r3, r3, #3
 80040be:	1d1a      	adds	r2, r3, #4
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	659a      	str	r2, [r3, #88]	; 0x58
 80040c4:	e007      	b.n	80040d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ce:	f023 0303 	bic.w	r3, r3, #3
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	aaaaaaab 	.word	0xaaaaaaab
 80040ec:	080090a8 	.word	0x080090a8

080040f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d11f      	bne.n	800414a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b03      	cmp	r3, #3
 800410e:	d855      	bhi.n	80041bc <DMA_CheckFifoParam+0xcc>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <DMA_CheckFifoParam+0x28>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	08004129 	.word	0x08004129
 800411c:	0800413b 	.word	0x0800413b
 8004120:	08004129 	.word	0x08004129
 8004124:	080041bd 	.word	0x080041bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d045      	beq.n	80041c0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004138:	e042      	b.n	80041c0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004142:	d13f      	bne.n	80041c4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004148:	e03c      	b.n	80041c4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004152:	d121      	bne.n	8004198 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b03      	cmp	r3, #3
 8004158:	d836      	bhi.n	80041c8 <DMA_CheckFifoParam+0xd8>
 800415a:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <DMA_CheckFifoParam+0x70>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004171 	.word	0x08004171
 8004164:	08004177 	.word	0x08004177
 8004168:	08004171 	.word	0x08004171
 800416c:	08004189 	.word	0x08004189
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
      break;
 8004174:	e02f      	b.n	80041d6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d024      	beq.n	80041cc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004186:	e021      	b.n	80041cc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004190:	d11e      	bne.n	80041d0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004196:	e01b      	b.n	80041d0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d902      	bls.n	80041a4 <DMA_CheckFifoParam+0xb4>
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d003      	beq.n	80041aa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041a2:	e018      	b.n	80041d6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
      break;
 80041a8:	e015      	b.n	80041d6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00e      	beq.n	80041d4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
      break;
 80041ba:	e00b      	b.n	80041d4 <DMA_CheckFifoParam+0xe4>
      break;
 80041bc:	bf00      	nop
 80041be:	e00a      	b.n	80041d6 <DMA_CheckFifoParam+0xe6>
      break;
 80041c0:	bf00      	nop
 80041c2:	e008      	b.n	80041d6 <DMA_CheckFifoParam+0xe6>
      break;
 80041c4:	bf00      	nop
 80041c6:	e006      	b.n	80041d6 <DMA_CheckFifoParam+0xe6>
      break;
 80041c8:	bf00      	nop
 80041ca:	e004      	b.n	80041d6 <DMA_CheckFifoParam+0xe6>
      break;
 80041cc:	bf00      	nop
 80041ce:	e002      	b.n	80041d6 <DMA_CheckFifoParam+0xe6>
      break;   
 80041d0:	bf00      	nop
 80041d2:	e000      	b.n	80041d6 <DMA_CheckFifoParam+0xe6>
      break;
 80041d4:	bf00      	nop
    }
  } 
  
  return status; 
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b089      	sub	sp, #36	; 0x24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	e159      	b.n	80044b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004200:	2201      	movs	r2, #1
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4013      	ands	r3, r2
 8004212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	429a      	cmp	r2, r3
 800421a:	f040 8148 	bne.w	80044ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d00b      	beq.n	800423e <HAL_GPIO_Init+0x5a>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d007      	beq.n	800423e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004232:	2b11      	cmp	r3, #17
 8004234:	d003      	beq.n	800423e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b12      	cmp	r3, #18
 800423c:	d130      	bne.n	80042a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	2203      	movs	r2, #3
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43db      	mvns	r3, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4013      	ands	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4313      	orrs	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004274:	2201      	movs	r2, #1
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	43db      	mvns	r3, r3
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4013      	ands	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	091b      	lsrs	r3, r3, #4
 800428a:	f003 0201 	and.w	r2, r3, #1
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4313      	orrs	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	2203      	movs	r2, #3
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d003      	beq.n	80042e0 <HAL_GPIO_Init+0xfc>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b12      	cmp	r3, #18
 80042de:	d123      	bne.n	8004328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	08da      	lsrs	r2, r3, #3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3208      	adds	r2, #8
 80042e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	220f      	movs	r2, #15
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	43db      	mvns	r3, r3
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	4013      	ands	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4313      	orrs	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	08da      	lsrs	r2, r3, #3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3208      	adds	r2, #8
 8004322:	69b9      	ldr	r1, [r7, #24]
 8004324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	2203      	movs	r2, #3
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 0203 	and.w	r2, r3, #3
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 80a2 	beq.w	80044ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	4b56      	ldr	r3, [pc, #344]	; (80044c8 <HAL_GPIO_Init+0x2e4>)
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	4a55      	ldr	r2, [pc, #340]	; (80044c8 <HAL_GPIO_Init+0x2e4>)
 8004374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004378:	6453      	str	r3, [r2, #68]	; 0x44
 800437a:	4b53      	ldr	r3, [pc, #332]	; (80044c8 <HAL_GPIO_Init+0x2e4>)
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004386:	4a51      	ldr	r2, [pc, #324]	; (80044cc <HAL_GPIO_Init+0x2e8>)
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	089b      	lsrs	r3, r3, #2
 800438c:	3302      	adds	r3, #2
 800438e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	220f      	movs	r2, #15
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43db      	mvns	r3, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4013      	ands	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a48      	ldr	r2, [pc, #288]	; (80044d0 <HAL_GPIO_Init+0x2ec>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d019      	beq.n	80043e6 <HAL_GPIO_Init+0x202>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a47      	ldr	r2, [pc, #284]	; (80044d4 <HAL_GPIO_Init+0x2f0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d013      	beq.n	80043e2 <HAL_GPIO_Init+0x1fe>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a46      	ldr	r2, [pc, #280]	; (80044d8 <HAL_GPIO_Init+0x2f4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00d      	beq.n	80043de <HAL_GPIO_Init+0x1fa>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a45      	ldr	r2, [pc, #276]	; (80044dc <HAL_GPIO_Init+0x2f8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d007      	beq.n	80043da <HAL_GPIO_Init+0x1f6>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a44      	ldr	r2, [pc, #272]	; (80044e0 <HAL_GPIO_Init+0x2fc>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d101      	bne.n	80043d6 <HAL_GPIO_Init+0x1f2>
 80043d2:	2304      	movs	r3, #4
 80043d4:	e008      	b.n	80043e8 <HAL_GPIO_Init+0x204>
 80043d6:	2307      	movs	r3, #7
 80043d8:	e006      	b.n	80043e8 <HAL_GPIO_Init+0x204>
 80043da:	2303      	movs	r3, #3
 80043dc:	e004      	b.n	80043e8 <HAL_GPIO_Init+0x204>
 80043de:	2302      	movs	r3, #2
 80043e0:	e002      	b.n	80043e8 <HAL_GPIO_Init+0x204>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <HAL_GPIO_Init+0x204>
 80043e6:	2300      	movs	r3, #0
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	f002 0203 	and.w	r2, r2, #3
 80043ee:	0092      	lsls	r2, r2, #2
 80043f0:	4093      	lsls	r3, r2
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043f8:	4934      	ldr	r1, [pc, #208]	; (80044cc <HAL_GPIO_Init+0x2e8>)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	089b      	lsrs	r3, r3, #2
 80043fe:	3302      	adds	r3, #2
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004406:	4b37      	ldr	r3, [pc, #220]	; (80044e4 <HAL_GPIO_Init+0x300>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	43db      	mvns	r3, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4013      	ands	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800442a:	4a2e      	ldr	r2, [pc, #184]	; (80044e4 <HAL_GPIO_Init+0x300>)
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004430:	4b2c      	ldr	r3, [pc, #176]	; (80044e4 <HAL_GPIO_Init+0x300>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004454:	4a23      	ldr	r2, [pc, #140]	; (80044e4 <HAL_GPIO_Init+0x300>)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800445a:	4b22      	ldr	r3, [pc, #136]	; (80044e4 <HAL_GPIO_Init+0x300>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	43db      	mvns	r3, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4013      	ands	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800447e:	4a19      	ldr	r2, [pc, #100]	; (80044e4 <HAL_GPIO_Init+0x300>)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004484:	4b17      	ldr	r3, [pc, #92]	; (80044e4 <HAL_GPIO_Init+0x300>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	43db      	mvns	r3, r3
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4013      	ands	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044a8:	4a0e      	ldr	r2, [pc, #56]	; (80044e4 <HAL_GPIO_Init+0x300>)
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	3301      	adds	r3, #1
 80044b2:	61fb      	str	r3, [r7, #28]
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	2b0f      	cmp	r3, #15
 80044b8:	f67f aea2 	bls.w	8004200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044bc:	bf00      	nop
 80044be:	3724      	adds	r7, #36	; 0x24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	40023800 	.word	0x40023800
 80044cc:	40013800 	.word	0x40013800
 80044d0:	40020000 	.word	0x40020000
 80044d4:	40020400 	.word	0x40020400
 80044d8:	40020800 	.word	0x40020800
 80044dc:	40020c00 	.word	0x40020c00
 80044e0:	40021000 	.word	0x40021000
 80044e4:	40013c00 	.word	0x40013c00

080044e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	887b      	ldrh	r3, [r7, #2]
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
 8004504:	e001      	b.n	800450a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800450a:	7bfb      	ldrb	r3, [r7, #15]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	807b      	strh	r3, [r7, #2]
 8004524:	4613      	mov	r3, r2
 8004526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004528:	787b      	ldrb	r3, [r7, #1]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800452e:	887a      	ldrh	r2, [r7, #2]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004534:	e003      	b.n	800453e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004536:	887b      	ldrh	r3, [r7, #2]
 8004538:	041a      	lsls	r2, r3, #16
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	619a      	str	r2, [r3, #24]
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
	...

0800454c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004556:	4b08      	ldr	r3, [pc, #32]	; (8004578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004558:	695a      	ldr	r2, [r3, #20]
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	4013      	ands	r3, r2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d006      	beq.n	8004570 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004562:	4a05      	ldr	r2, [pc, #20]	; (8004578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004564:	88fb      	ldrh	r3, [r7, #6]
 8004566:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004568:	88fb      	ldrh	r3, [r7, #6]
 800456a:	4618      	mov	r0, r3
 800456c:	f7fe f874 	bl	8002658 <HAL_GPIO_EXTI_Callback>
  }
}
 8004570:	bf00      	nop
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40013c00 	.word	0x40013c00

0800457c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e11f      	b.n	80047ce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fe f94c 	bl	8002840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2224      	movs	r2, #36	; 0x24
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0201 	bic.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045e0:	f001 f846 	bl	8005670 <HAL_RCC_GetPCLK1Freq>
 80045e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	4a7b      	ldr	r2, [pc, #492]	; (80047d8 <HAL_I2C_Init+0x25c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d807      	bhi.n	8004600 <HAL_I2C_Init+0x84>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4a7a      	ldr	r2, [pc, #488]	; (80047dc <HAL_I2C_Init+0x260>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	bf94      	ite	ls
 80045f8:	2301      	movls	r3, #1
 80045fa:	2300      	movhi	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	e006      	b.n	800460e <HAL_I2C_Init+0x92>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4a77      	ldr	r2, [pc, #476]	; (80047e0 <HAL_I2C_Init+0x264>)
 8004604:	4293      	cmp	r3, r2
 8004606:	bf94      	ite	ls
 8004608:	2301      	movls	r3, #1
 800460a:	2300      	movhi	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e0db      	b.n	80047ce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	4a72      	ldr	r2, [pc, #456]	; (80047e4 <HAL_I2C_Init+0x268>)
 800461a:	fba2 2303 	umull	r2, r3, r2, r3
 800461e:	0c9b      	lsrs	r3, r3, #18
 8004620:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	4a64      	ldr	r2, [pc, #400]	; (80047d8 <HAL_I2C_Init+0x25c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d802      	bhi.n	8004650 <HAL_I2C_Init+0xd4>
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	3301      	adds	r3, #1
 800464e:	e009      	b.n	8004664 <HAL_I2C_Init+0xe8>
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004656:	fb02 f303 	mul.w	r3, r2, r3
 800465a:	4a63      	ldr	r2, [pc, #396]	; (80047e8 <HAL_I2C_Init+0x26c>)
 800465c:	fba2 2303 	umull	r2, r3, r2, r3
 8004660:	099b      	lsrs	r3, r3, #6
 8004662:	3301      	adds	r3, #1
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	430b      	orrs	r3, r1
 800466a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004676:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	4956      	ldr	r1, [pc, #344]	; (80047d8 <HAL_I2C_Init+0x25c>)
 8004680:	428b      	cmp	r3, r1
 8004682:	d80d      	bhi.n	80046a0 <HAL_I2C_Init+0x124>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	1e59      	subs	r1, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004692:	3301      	adds	r3, #1
 8004694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004698:	2b04      	cmp	r3, #4
 800469a:	bf38      	it	cc
 800469c:	2304      	movcc	r3, #4
 800469e:	e04f      	b.n	8004740 <HAL_I2C_Init+0x1c4>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d111      	bne.n	80046cc <HAL_I2C_Init+0x150>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	1e58      	subs	r0, r3, #1
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6859      	ldr	r1, [r3, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	440b      	add	r3, r1
 80046b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ba:	3301      	adds	r3, #1
 80046bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	bf0c      	ite	eq
 80046c4:	2301      	moveq	r3, #1
 80046c6:	2300      	movne	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	e012      	b.n	80046f2 <HAL_I2C_Init+0x176>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	1e58      	subs	r0, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6859      	ldr	r1, [r3, #4]
 80046d4:	460b      	mov	r3, r1
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	0099      	lsls	r1, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e2:	3301      	adds	r3, #1
 80046e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	bf0c      	ite	eq
 80046ec:	2301      	moveq	r3, #1
 80046ee:	2300      	movne	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_I2C_Init+0x17e>
 80046f6:	2301      	movs	r3, #1
 80046f8:	e022      	b.n	8004740 <HAL_I2C_Init+0x1c4>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10e      	bne.n	8004720 <HAL_I2C_Init+0x1a4>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1e58      	subs	r0, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6859      	ldr	r1, [r3, #4]
 800470a:	460b      	mov	r3, r1
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	440b      	add	r3, r1
 8004710:	fbb0 f3f3 	udiv	r3, r0, r3
 8004714:	3301      	adds	r3, #1
 8004716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800471a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800471e:	e00f      	b.n	8004740 <HAL_I2C_Init+0x1c4>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	1e58      	subs	r0, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6859      	ldr	r1, [r3, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	0099      	lsls	r1, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	fbb0 f3f3 	udiv	r3, r0, r3
 8004736:	3301      	adds	r3, #1
 8004738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800473c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	6809      	ldr	r1, [r1, #0]
 8004744:	4313      	orrs	r3, r2
 8004746:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69da      	ldr	r2, [r3, #28]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800476e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6911      	ldr	r1, [r2, #16]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	68d2      	ldr	r2, [r2, #12]
 800477a:	4311      	orrs	r1, r2
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	430b      	orrs	r3, r1
 8004782:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695a      	ldr	r2, [r3, #20]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	000186a0 	.word	0x000186a0
 80047dc:	001e847f 	.word	0x001e847f
 80047e0:	003d08ff 	.word	0x003d08ff
 80047e4:	431bde83 	.word	0x431bde83
 80047e8:	10624dd3 	.word	0x10624dd3

080047ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	607a      	str	r2, [r7, #4]
 80047f6:	461a      	mov	r2, r3
 80047f8:	460b      	mov	r3, r1
 80047fa:	817b      	strh	r3, [r7, #10]
 80047fc:	4613      	mov	r3, r2
 80047fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004800:	f7fe fb18 	bl	8002e34 <HAL_GetTick>
 8004804:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b20      	cmp	r3, #32
 8004810:	f040 80e0 	bne.w	80049d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	2319      	movs	r3, #25
 800481a:	2201      	movs	r2, #1
 800481c:	4970      	ldr	r1, [pc, #448]	; (80049e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f964 	bl	8004aec <I2C_WaitOnFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800482a:	2302      	movs	r3, #2
 800482c:	e0d3      	b.n	80049d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_I2C_Master_Transmit+0x50>
 8004838:	2302      	movs	r3, #2
 800483a:	e0cc      	b.n	80049d6 <HAL_I2C_Master_Transmit+0x1ea>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b01      	cmp	r3, #1
 8004850:	d007      	beq.n	8004862 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0201 	orr.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004870:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2221      	movs	r2, #33	; 0x21
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2210      	movs	r2, #16
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	893a      	ldrh	r2, [r7, #8]
 8004892:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4a50      	ldr	r2, [pc, #320]	; (80049e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80048a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048a4:	8979      	ldrh	r1, [r7, #10]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	6a3a      	ldr	r2, [r7, #32]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f89c 	bl	80049e8 <I2C_MasterRequestWrite>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e08d      	b.n	80049d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ba:	2300      	movs	r3, #0
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	613b      	str	r3, [r7, #16]
 80048ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80048d0:	e066      	b.n	80049a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	6a39      	ldr	r1, [r7, #32]
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f9de 	bl	8004c98 <I2C_WaitOnTXEFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00d      	beq.n	80048fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d107      	bne.n	80048fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e06b      	b.n	80049d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	781a      	ldrb	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b04      	cmp	r3, #4
 800493a:	d11b      	bne.n	8004974 <HAL_I2C_Master_Transmit+0x188>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004940:	2b00      	cmp	r3, #0
 8004942:	d017      	beq.n	8004974 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	781a      	ldrb	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	6a39      	ldr	r1, [r7, #32]
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f9ce 	bl	8004d1a <I2C_WaitOnBTFFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00d      	beq.n	80049a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	2b04      	cmp	r3, #4
 800498a:	d107      	bne.n	800499c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e01a      	b.n	80049d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d194      	bne.n	80048d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	e000      	b.n	80049d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
  }
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	00100002 	.word	0x00100002
 80049e4:	ffff0000 	.word	0xffff0000

080049e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af02      	add	r7, sp, #8
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	607a      	str	r2, [r7, #4]
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	460b      	mov	r3, r1
 80049f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d006      	beq.n	8004a12 <I2C_MasterRequestWrite+0x2a>
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d003      	beq.n	8004a12 <I2C_MasterRequestWrite+0x2a>
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a10:	d108      	bne.n	8004a24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	e00b      	b.n	8004a3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	2b12      	cmp	r3, #18
 8004a2a:	d107      	bne.n	8004a3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 f84f 	bl	8004aec <I2C_WaitOnFlagUntilTimeout>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00d      	beq.n	8004a70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a62:	d103      	bne.n	8004a6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e035      	b.n	8004adc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a78:	d108      	bne.n	8004a8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a7a:	897b      	ldrh	r3, [r7, #10]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a88:	611a      	str	r2, [r3, #16]
 8004a8a:	e01b      	b.n	8004ac4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a8c:	897b      	ldrh	r3, [r7, #10]
 8004a8e:	11db      	asrs	r3, r3, #7
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	f003 0306 	and.w	r3, r3, #6
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	f063 030f 	orn	r3, r3, #15
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	490e      	ldr	r1, [pc, #56]	; (8004ae4 <I2C_MasterRequestWrite+0xfc>)
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f875 	bl	8004b9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e010      	b.n	8004adc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004aba:	897b      	ldrh	r3, [r7, #10]
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	4907      	ldr	r1, [pc, #28]	; (8004ae8 <I2C_MasterRequestWrite+0x100>)
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f865 	bl	8004b9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3718      	adds	r7, #24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	00010008 	.word	0x00010008
 8004ae8:	00010002 	.word	0x00010002

08004aec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004afc:	e025      	b.n	8004b4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b04:	d021      	beq.n	8004b4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b06:	f7fe f995 	bl	8002e34 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d302      	bcc.n	8004b1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d116      	bne.n	8004b4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f043 0220 	orr.w	r2, r3, #32
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e023      	b.n	8004b92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	0c1b      	lsrs	r3, r3, #16
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d10d      	bne.n	8004b70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	43da      	mvns	r2, r3
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bf0c      	ite	eq
 8004b66:	2301      	moveq	r3, #1
 8004b68:	2300      	movne	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	e00c      	b.n	8004b8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	43da      	mvns	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	bf0c      	ite	eq
 8004b82:	2301      	moveq	r3, #1
 8004b84:	2300      	movne	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	461a      	mov	r2, r3
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d0b6      	beq.n	8004afe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ba8:	e051      	b.n	8004c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb8:	d123      	bne.n	8004c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bd2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f043 0204 	orr.w	r2, r3, #4
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e046      	b.n	8004c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c08:	d021      	beq.n	8004c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0a:	f7fe f913 	bl	8002e34 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d302      	bcc.n	8004c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d116      	bne.n	8004c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	f043 0220 	orr.w	r2, r3, #32
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e020      	b.n	8004c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	0c1b      	lsrs	r3, r3, #16
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d10c      	bne.n	8004c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	43da      	mvns	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4013      	ands	r3, r2
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bf14      	ite	ne
 8004c6a:	2301      	movne	r3, #1
 8004c6c:	2300      	moveq	r3, #0
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	e00b      	b.n	8004c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	43da      	mvns	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bf14      	ite	ne
 8004c84:	2301      	movne	r3, #1
 8004c86:	2300      	moveq	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d18d      	bne.n	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ca4:	e02d      	b.n	8004d02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 f878 	bl	8004d9c <I2C_IsAcknowledgeFailed>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e02d      	b.n	8004d12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbc:	d021      	beq.n	8004d02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cbe:	f7fe f8b9 	bl	8002e34 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d302      	bcc.n	8004cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d116      	bne.n	8004d02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f043 0220 	orr.w	r2, r3, #32
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e007      	b.n	8004d12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0c:	2b80      	cmp	r3, #128	; 0x80
 8004d0e:	d1ca      	bne.n	8004ca6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d26:	e02d      	b.n	8004d84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 f837 	bl	8004d9c <I2C_IsAcknowledgeFailed>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e02d      	b.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3e:	d021      	beq.n	8004d84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d40:	f7fe f878 	bl	8002e34 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d302      	bcc.n	8004d56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d116      	bne.n	8004d84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d70:	f043 0220 	orr.w	r2, r3, #32
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e007      	b.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d1ca      	bne.n	8004d28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db2:	d11b      	bne.n	8004dec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	f043 0204 	orr.w	r2, r3, #4
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
	...

08004dfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e25b      	b.n	80052c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d075      	beq.n	8004f06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e1a:	4ba3      	ldr	r3, [pc, #652]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 030c 	and.w	r3, r3, #12
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d00c      	beq.n	8004e40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e26:	4ba0      	ldr	r3, [pc, #640]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d112      	bne.n	8004e58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e32:	4b9d      	ldr	r3, [pc, #628]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e3e:	d10b      	bne.n	8004e58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e40:	4b99      	ldr	r3, [pc, #612]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d05b      	beq.n	8004f04 <HAL_RCC_OscConfig+0x108>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d157      	bne.n	8004f04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e236      	b.n	80052c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e60:	d106      	bne.n	8004e70 <HAL_RCC_OscConfig+0x74>
 8004e62:	4b91      	ldr	r3, [pc, #580]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a90      	ldr	r2, [pc, #576]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	e01d      	b.n	8004eac <HAL_RCC_OscConfig+0xb0>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e78:	d10c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x98>
 8004e7a:	4b8b      	ldr	r3, [pc, #556]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a8a      	ldr	r2, [pc, #552]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	4b88      	ldr	r3, [pc, #544]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a87      	ldr	r2, [pc, #540]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	e00b      	b.n	8004eac <HAL_RCC_OscConfig+0xb0>
 8004e94:	4b84      	ldr	r3, [pc, #528]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a83      	ldr	r2, [pc, #524]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	4b81      	ldr	r3, [pc, #516]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a80      	ldr	r2, [pc, #512]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d013      	beq.n	8004edc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb4:	f7fd ffbe 	bl	8002e34 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ebc:	f7fd ffba 	bl	8002e34 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b64      	cmp	r3, #100	; 0x64
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e1fb      	b.n	80052c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ece:	4b76      	ldr	r3, [pc, #472]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCC_OscConfig+0xc0>
 8004eda:	e014      	b.n	8004f06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004edc:	f7fd ffaa 	bl	8002e34 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ee2:	e008      	b.n	8004ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ee4:	f7fd ffa6 	bl	8002e34 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b64      	cmp	r3, #100	; 0x64
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e1e7      	b.n	80052c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ef6:	4b6c      	ldr	r3, [pc, #432]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1f0      	bne.n	8004ee4 <HAL_RCC_OscConfig+0xe8>
 8004f02:	e000      	b.n	8004f06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d063      	beq.n	8004fda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f12:	4b65      	ldr	r3, [pc, #404]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 030c 	and.w	r3, r3, #12
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00b      	beq.n	8004f36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f1e:	4b62      	ldr	r3, [pc, #392]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d11c      	bne.n	8004f64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f2a:	4b5f      	ldr	r3, [pc, #380]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d116      	bne.n	8004f64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f36:	4b5c      	ldr	r3, [pc, #368]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <HAL_RCC_OscConfig+0x152>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d001      	beq.n	8004f4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e1bb      	b.n	80052c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f4e:	4b56      	ldr	r3, [pc, #344]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4952      	ldr	r1, [pc, #328]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f62:	e03a      	b.n	8004fda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d020      	beq.n	8004fae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f6c:	4b4f      	ldr	r3, [pc, #316]	; (80050ac <HAL_RCC_OscConfig+0x2b0>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f72:	f7fd ff5f 	bl	8002e34 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f7a:	f7fd ff5b 	bl	8002e34 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e19c      	b.n	80052c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8c:	4b46      	ldr	r3, [pc, #280]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f98:	4b43      	ldr	r3, [pc, #268]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	4940      	ldr	r1, [pc, #256]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	600b      	str	r3, [r1, #0]
 8004fac:	e015      	b.n	8004fda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fae:	4b3f      	ldr	r3, [pc, #252]	; (80050ac <HAL_RCC_OscConfig+0x2b0>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb4:	f7fd ff3e 	bl	8002e34 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fbc:	f7fd ff3a 	bl	8002e34 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e17b      	b.n	80052c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fce:	4b36      	ldr	r3, [pc, #216]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1f0      	bne.n	8004fbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d030      	beq.n	8005048 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d016      	beq.n	800501c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fee:	4b30      	ldr	r3, [pc, #192]	; (80050b0 <HAL_RCC_OscConfig+0x2b4>)
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff4:	f7fd ff1e 	bl	8002e34 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ffc:	f7fd ff1a 	bl	8002e34 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e15b      	b.n	80052c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800500e:	4b26      	ldr	r3, [pc, #152]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8005010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f0      	beq.n	8004ffc <HAL_RCC_OscConfig+0x200>
 800501a:	e015      	b.n	8005048 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800501c:	4b24      	ldr	r3, [pc, #144]	; (80050b0 <HAL_RCC_OscConfig+0x2b4>)
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005022:	f7fd ff07 	bl	8002e34 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800502a:	f7fd ff03 	bl	8002e34 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e144      	b.n	80052c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800503c:	4b1a      	ldr	r3, [pc, #104]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 800503e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1f0      	bne.n	800502a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80a0 	beq.w	8005196 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005056:	2300      	movs	r3, #0
 8005058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800505a:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10f      	bne.n	8005086 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	4a0e      	ldr	r2, [pc, #56]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8005070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005074:	6413      	str	r3, [r2, #64]	; 0x40
 8005076:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <HAL_RCC_OscConfig+0x2ac>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800507e:	60bb      	str	r3, [r7, #8]
 8005080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005082:	2301      	movs	r3, #1
 8005084:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005086:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <HAL_RCC_OscConfig+0x2b8>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508e:	2b00      	cmp	r3, #0
 8005090:	d121      	bne.n	80050d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005092:	4b08      	ldr	r3, [pc, #32]	; (80050b4 <HAL_RCC_OscConfig+0x2b8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a07      	ldr	r2, [pc, #28]	; (80050b4 <HAL_RCC_OscConfig+0x2b8>)
 8005098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800509e:	f7fd fec9 	bl	8002e34 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a4:	e011      	b.n	80050ca <HAL_RCC_OscConfig+0x2ce>
 80050a6:	bf00      	nop
 80050a8:	40023800 	.word	0x40023800
 80050ac:	42470000 	.word	0x42470000
 80050b0:	42470e80 	.word	0x42470e80
 80050b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b8:	f7fd febc 	bl	8002e34 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e0fd      	b.n	80052c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ca:	4b81      	ldr	r3, [pc, #516]	; (80052d0 <HAL_RCC_OscConfig+0x4d4>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f0      	beq.n	80050b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d106      	bne.n	80050ec <HAL_RCC_OscConfig+0x2f0>
 80050de:	4b7d      	ldr	r3, [pc, #500]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 80050e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e2:	4a7c      	ldr	r2, [pc, #496]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 80050e4:	f043 0301 	orr.w	r3, r3, #1
 80050e8:	6713      	str	r3, [r2, #112]	; 0x70
 80050ea:	e01c      	b.n	8005126 <HAL_RCC_OscConfig+0x32a>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	2b05      	cmp	r3, #5
 80050f2:	d10c      	bne.n	800510e <HAL_RCC_OscConfig+0x312>
 80050f4:	4b77      	ldr	r3, [pc, #476]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 80050f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f8:	4a76      	ldr	r2, [pc, #472]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 80050fa:	f043 0304 	orr.w	r3, r3, #4
 80050fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005100:	4b74      	ldr	r3, [pc, #464]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	4a73      	ldr	r2, [pc, #460]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 8005106:	f043 0301 	orr.w	r3, r3, #1
 800510a:	6713      	str	r3, [r2, #112]	; 0x70
 800510c:	e00b      	b.n	8005126 <HAL_RCC_OscConfig+0x32a>
 800510e:	4b71      	ldr	r3, [pc, #452]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 8005110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005112:	4a70      	ldr	r2, [pc, #448]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 8005114:	f023 0301 	bic.w	r3, r3, #1
 8005118:	6713      	str	r3, [r2, #112]	; 0x70
 800511a:	4b6e      	ldr	r3, [pc, #440]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 800511c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511e:	4a6d      	ldr	r2, [pc, #436]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 8005120:	f023 0304 	bic.w	r3, r3, #4
 8005124:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d015      	beq.n	800515a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512e:	f7fd fe81 	bl	8002e34 <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005134:	e00a      	b.n	800514c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005136:	f7fd fe7d 	bl	8002e34 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	f241 3288 	movw	r2, #5000	; 0x1388
 8005144:	4293      	cmp	r3, r2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e0bc      	b.n	80052c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514c:	4b61      	ldr	r3, [pc, #388]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 800514e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0ee      	beq.n	8005136 <HAL_RCC_OscConfig+0x33a>
 8005158:	e014      	b.n	8005184 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515a:	f7fd fe6b 	bl	8002e34 <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005160:	e00a      	b.n	8005178 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005162:	f7fd fe67 	bl	8002e34 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005170:	4293      	cmp	r3, r2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e0a6      	b.n	80052c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005178:	4b56      	ldr	r3, [pc, #344]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 800517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1ee      	bne.n	8005162 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005184:	7dfb      	ldrb	r3, [r7, #23]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d105      	bne.n	8005196 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800518a:	4b52      	ldr	r3, [pc, #328]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	4a51      	ldr	r2, [pc, #324]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 8005190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005194:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 8092 	beq.w	80052c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051a0:	4b4c      	ldr	r3, [pc, #304]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 030c 	and.w	r3, r3, #12
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d05c      	beq.n	8005266 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d141      	bne.n	8005238 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b4:	4b48      	ldr	r3, [pc, #288]	; (80052d8 <HAL_RCC_OscConfig+0x4dc>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ba:	f7fd fe3b 	bl	8002e34 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051c2:	f7fd fe37 	bl	8002e34 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e078      	b.n	80052c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d4:	4b3f      	ldr	r3, [pc, #252]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1f0      	bne.n	80051c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	431a      	orrs	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	019b      	lsls	r3, r3, #6
 80051f0:	431a      	orrs	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f6:	085b      	lsrs	r3, r3, #1
 80051f8:	3b01      	subs	r3, #1
 80051fa:	041b      	lsls	r3, r3, #16
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	061b      	lsls	r3, r3, #24
 8005204:	4933      	ldr	r1, [pc, #204]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 8005206:	4313      	orrs	r3, r2
 8005208:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800520a:	4b33      	ldr	r3, [pc, #204]	; (80052d8 <HAL_RCC_OscConfig+0x4dc>)
 800520c:	2201      	movs	r2, #1
 800520e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005210:	f7fd fe10 	bl	8002e34 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005218:	f7fd fe0c 	bl	8002e34 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e04d      	b.n	80052c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800522a:	4b2a      	ldr	r3, [pc, #168]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0f0      	beq.n	8005218 <HAL_RCC_OscConfig+0x41c>
 8005236:	e045      	b.n	80052c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005238:	4b27      	ldr	r3, [pc, #156]	; (80052d8 <HAL_RCC_OscConfig+0x4dc>)
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523e:	f7fd fdf9 	bl	8002e34 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005246:	f7fd fdf5 	bl	8002e34 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e036      	b.n	80052c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005258:	4b1e      	ldr	r3, [pc, #120]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1f0      	bne.n	8005246 <HAL_RCC_OscConfig+0x44a>
 8005264:	e02e      	b.n	80052c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e029      	b.n	80052c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005272:	4b18      	ldr	r3, [pc, #96]	; (80052d4 <HAL_RCC_OscConfig+0x4d8>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	429a      	cmp	r2, r3
 8005284:	d11c      	bne.n	80052c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005290:	429a      	cmp	r2, r3
 8005292:	d115      	bne.n	80052c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800529a:	4013      	ands	r3, r2
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10d      	bne.n	80052c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d106      	bne.n	80052c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e000      	b.n	80052c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40007000 	.word	0x40007000
 80052d4:	40023800 	.word	0x40023800
 80052d8:	42470060 	.word	0x42470060

080052dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e0cc      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052f0:	4b68      	ldr	r3, [pc, #416]	; (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d90c      	bls.n	8005318 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fe:	4b65      	ldr	r3, [pc, #404]	; (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005306:	4b63      	ldr	r3, [pc, #396]	; (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d001      	beq.n	8005318 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0b8      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d020      	beq.n	8005366 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005330:	4b59      	ldr	r3, [pc, #356]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	4a58      	ldr	r2, [pc, #352]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800533a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005348:	4b53      	ldr	r3, [pc, #332]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	4a52      	ldr	r2, [pc, #328]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005352:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005354:	4b50      	ldr	r3, [pc, #320]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	494d      	ldr	r1, [pc, #308]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005362:	4313      	orrs	r3, r2
 8005364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d044      	beq.n	80053fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d107      	bne.n	800538a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537a:	4b47      	ldr	r3, [pc, #284]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d119      	bne.n	80053ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e07f      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d003      	beq.n	800539a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005396:	2b03      	cmp	r3, #3
 8005398:	d107      	bne.n	80053aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800539a:	4b3f      	ldr	r3, [pc, #252]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e06f      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053aa:	4b3b      	ldr	r3, [pc, #236]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e067      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053ba:	4b37      	ldr	r3, [pc, #220]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f023 0203 	bic.w	r2, r3, #3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	4934      	ldr	r1, [pc, #208]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053cc:	f7fd fd32 	bl	8002e34 <HAL_GetTick>
 80053d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d2:	e00a      	b.n	80053ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d4:	f7fd fd2e 	bl	8002e34 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e04f      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ea:	4b2b      	ldr	r3, [pc, #172]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 020c 	and.w	r2, r3, #12
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d1eb      	bne.n	80053d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053fc:	4b25      	ldr	r3, [pc, #148]	; (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d20c      	bcs.n	8005424 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540a:	4b22      	ldr	r3, [pc, #136]	; (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005412:	4b20      	ldr	r3, [pc, #128]	; (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d001      	beq.n	8005424 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e032      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005430:	4b19      	ldr	r3, [pc, #100]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4916      	ldr	r1, [pc, #88]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800543e:	4313      	orrs	r3, r2
 8005440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d009      	beq.n	8005462 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800544e:	4b12      	ldr	r3, [pc, #72]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	490e      	ldr	r1, [pc, #56]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800545e:	4313      	orrs	r3, r2
 8005460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005462:	f000 f821 	bl	80054a8 <HAL_RCC_GetSysClockFreq>
 8005466:	4601      	mov	r1, r0
 8005468:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	091b      	lsrs	r3, r3, #4
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	4a0a      	ldr	r2, [pc, #40]	; (800549c <HAL_RCC_ClockConfig+0x1c0>)
 8005474:	5cd3      	ldrb	r3, [r2, r3]
 8005476:	fa21 f303 	lsr.w	r3, r1, r3
 800547a:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <HAL_RCC_ClockConfig+0x1c4>)
 800547c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800547e:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f7fd fc92 	bl	8002dac <HAL_InitTick>

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40023c00 	.word	0x40023c00
 8005498:	40023800 	.word	0x40023800
 800549c:	08009090 	.word	0x08009090
 80054a0:	20000014 	.word	0x20000014
 80054a4:	20000018 	.word	0x20000018

080054a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	607b      	str	r3, [r7, #4]
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	2300      	movs	r3, #0
 80054b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054be:	4b63      	ldr	r3, [pc, #396]	; (800564c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 030c 	and.w	r3, r3, #12
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d007      	beq.n	80054da <HAL_RCC_GetSysClockFreq+0x32>
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d008      	beq.n	80054e0 <HAL_RCC_GetSysClockFreq+0x38>
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f040 80b4 	bne.w	800563c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054d4:	4b5e      	ldr	r3, [pc, #376]	; (8005650 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80054d6:	60bb      	str	r3, [r7, #8]
       break;
 80054d8:	e0b3      	b.n	8005642 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054da:	4b5e      	ldr	r3, [pc, #376]	; (8005654 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80054dc:	60bb      	str	r3, [r7, #8]
      break;
 80054de:	e0b0      	b.n	8005642 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054e0:	4b5a      	ldr	r3, [pc, #360]	; (800564c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054ea:	4b58      	ldr	r3, [pc, #352]	; (800564c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d04a      	beq.n	800558c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054f6:	4b55      	ldr	r3, [pc, #340]	; (800564c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	099b      	lsrs	r3, r3, #6
 80054fc:	f04f 0400 	mov.w	r4, #0
 8005500:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	ea03 0501 	and.w	r5, r3, r1
 800550c:	ea04 0602 	and.w	r6, r4, r2
 8005510:	4629      	mov	r1, r5
 8005512:	4632      	mov	r2, r6
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	f04f 0400 	mov.w	r4, #0
 800551c:	0154      	lsls	r4, r2, #5
 800551e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005522:	014b      	lsls	r3, r1, #5
 8005524:	4619      	mov	r1, r3
 8005526:	4622      	mov	r2, r4
 8005528:	1b49      	subs	r1, r1, r5
 800552a:	eb62 0206 	sbc.w	r2, r2, r6
 800552e:	f04f 0300 	mov.w	r3, #0
 8005532:	f04f 0400 	mov.w	r4, #0
 8005536:	0194      	lsls	r4, r2, #6
 8005538:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800553c:	018b      	lsls	r3, r1, #6
 800553e:	1a5b      	subs	r3, r3, r1
 8005540:	eb64 0402 	sbc.w	r4, r4, r2
 8005544:	f04f 0100 	mov.w	r1, #0
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	00e2      	lsls	r2, r4, #3
 800554e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005552:	00d9      	lsls	r1, r3, #3
 8005554:	460b      	mov	r3, r1
 8005556:	4614      	mov	r4, r2
 8005558:	195b      	adds	r3, r3, r5
 800555a:	eb44 0406 	adc.w	r4, r4, r6
 800555e:	f04f 0100 	mov.w	r1, #0
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	0262      	lsls	r2, r4, #9
 8005568:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800556c:	0259      	lsls	r1, r3, #9
 800556e:	460b      	mov	r3, r1
 8005570:	4614      	mov	r4, r2
 8005572:	4618      	mov	r0, r3
 8005574:	4621      	mov	r1, r4
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f04f 0400 	mov.w	r4, #0
 800557c:	461a      	mov	r2, r3
 800557e:	4623      	mov	r3, r4
 8005580:	f7fb fb6a 	bl	8000c58 <__aeabi_uldivmod>
 8005584:	4603      	mov	r3, r0
 8005586:	460c      	mov	r4, r1
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	e049      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800558c:	4b2f      	ldr	r3, [pc, #188]	; (800564c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	099b      	lsrs	r3, r3, #6
 8005592:	f04f 0400 	mov.w	r4, #0
 8005596:	f240 11ff 	movw	r1, #511	; 0x1ff
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	ea03 0501 	and.w	r5, r3, r1
 80055a2:	ea04 0602 	and.w	r6, r4, r2
 80055a6:	4629      	mov	r1, r5
 80055a8:	4632      	mov	r2, r6
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	f04f 0400 	mov.w	r4, #0
 80055b2:	0154      	lsls	r4, r2, #5
 80055b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80055b8:	014b      	lsls	r3, r1, #5
 80055ba:	4619      	mov	r1, r3
 80055bc:	4622      	mov	r2, r4
 80055be:	1b49      	subs	r1, r1, r5
 80055c0:	eb62 0206 	sbc.w	r2, r2, r6
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	f04f 0400 	mov.w	r4, #0
 80055cc:	0194      	lsls	r4, r2, #6
 80055ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80055d2:	018b      	lsls	r3, r1, #6
 80055d4:	1a5b      	subs	r3, r3, r1
 80055d6:	eb64 0402 	sbc.w	r4, r4, r2
 80055da:	f04f 0100 	mov.w	r1, #0
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	00e2      	lsls	r2, r4, #3
 80055e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80055e8:	00d9      	lsls	r1, r3, #3
 80055ea:	460b      	mov	r3, r1
 80055ec:	4614      	mov	r4, r2
 80055ee:	195b      	adds	r3, r3, r5
 80055f0:	eb44 0406 	adc.w	r4, r4, r6
 80055f4:	f04f 0100 	mov.w	r1, #0
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	02a2      	lsls	r2, r4, #10
 80055fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005602:	0299      	lsls	r1, r3, #10
 8005604:	460b      	mov	r3, r1
 8005606:	4614      	mov	r4, r2
 8005608:	4618      	mov	r0, r3
 800560a:	4621      	mov	r1, r4
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f04f 0400 	mov.w	r4, #0
 8005612:	461a      	mov	r2, r3
 8005614:	4623      	mov	r3, r4
 8005616:	f7fb fb1f 	bl	8000c58 <__aeabi_uldivmod>
 800561a:	4603      	mov	r3, r0
 800561c:	460c      	mov	r4, r1
 800561e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005620:	4b0a      	ldr	r3, [pc, #40]	; (800564c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	3301      	adds	r3, #1
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	fbb2 f3f3 	udiv	r3, r2, r3
 8005638:	60bb      	str	r3, [r7, #8]
      break;
 800563a:	e002      	b.n	8005642 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800563c:	4b04      	ldr	r3, [pc, #16]	; (8005650 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800563e:	60bb      	str	r3, [r7, #8]
      break;
 8005640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005642:	68bb      	ldr	r3, [r7, #8]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800564c:	40023800 	.word	0x40023800
 8005650:	00f42400 	.word	0x00f42400
 8005654:	007a1200 	.word	0x007a1200

08005658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800565c:	4b03      	ldr	r3, [pc, #12]	; (800566c <HAL_RCC_GetHCLKFreq+0x14>)
 800565e:	681b      	ldr	r3, [r3, #0]
}
 8005660:	4618      	mov	r0, r3
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	20000014 	.word	0x20000014

08005670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005674:	f7ff fff0 	bl	8005658 <HAL_RCC_GetHCLKFreq>
 8005678:	4601      	mov	r1, r0
 800567a:	4b05      	ldr	r3, [pc, #20]	; (8005690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	0a9b      	lsrs	r3, r3, #10
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	4a03      	ldr	r2, [pc, #12]	; (8005694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005686:	5cd3      	ldrb	r3, [r2, r3]
 8005688:	fa21 f303 	lsr.w	r3, r1, r3
}
 800568c:	4618      	mov	r0, r3
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40023800 	.word	0x40023800
 8005694:	080090a0 	.word	0x080090a0

08005698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800569c:	f7ff ffdc 	bl	8005658 <HAL_RCC_GetHCLKFreq>
 80056a0:	4601      	mov	r1, r0
 80056a2:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	0b5b      	lsrs	r3, r3, #13
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	4a03      	ldr	r2, [pc, #12]	; (80056bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ae:	5cd3      	ldrb	r3, [r2, r3]
 80056b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40023800 	.word	0x40023800
 80056bc:	080090a0 	.word	0x080090a0

080056c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e01d      	b.n	800570e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fd f9ce 	bl	8002a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3304      	adds	r3, #4
 80056fc:	4619      	mov	r1, r3
 80056fe:	4610      	mov	r0, r2
 8005700:	f000 fbf6 	bl	8005ef0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0201 	orr.w	r2, r2, #1
 800572c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b06      	cmp	r3, #6
 800573e:	d007      	beq.n	8005750 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0201 	bic.w	r2, r2, #1
 8005774:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6a1a      	ldr	r2, [r3, #32]
 800577c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005780:	4013      	ands	r3, r2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10f      	bne.n	80057a6 <HAL_TIM_Base_Stop_IT+0x48>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6a1a      	ldr	r2, [r3, #32]
 800578c:	f240 4344 	movw	r3, #1092	; 0x444
 8005790:	4013      	ands	r3, r2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d107      	bne.n	80057a6 <HAL_TIM_Base_Stop_IT+0x48>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0201 	bic.w	r2, r2, #1
 80057a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e01d      	b.n	8005802 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fd f932 	bl	8002a44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4619      	mov	r1, r3
 80057f2:	4610      	mov	r0, r2
 80057f4:	f000 fb7c 	bl	8005ef0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2201      	movs	r2, #1
 800581c:	6839      	ldr	r1, [r7, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fe0c 	bl	800643c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a10      	ldr	r2, [pc, #64]	; (800586c <HAL_TIM_PWM_Start+0x60>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d107      	bne.n	800583e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800583c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b06      	cmp	r3, #6
 800584e:	d007      	beq.n	8005860 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40010000 	.word	0x40010000

08005870 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e083      	b.n	800598c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d106      	bne.n	800589e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7fd f839 	bl	8002910 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2202      	movs	r2, #2
 80058a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6812      	ldr	r2, [r2, #0]
 80058b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058b4:	f023 0307 	bic.w	r3, r3, #7
 80058b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	3304      	adds	r3, #4
 80058c2:	4619      	mov	r1, r3
 80058c4:	4610      	mov	r0, r2
 80058c6:	f000 fb13 	bl	8005ef0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f2:	f023 0303 	bic.w	r3, r3, #3
 80058f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	021b      	lsls	r3, r3, #8
 8005902:	4313      	orrs	r3, r2
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005910:	f023 030c 	bic.w	r3, r3, #12
 8005914:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800591c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005920:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	4313      	orrs	r3, r2
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	4313      	orrs	r3, r2
 8005932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	011a      	lsls	r2, r3, #4
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	031b      	lsls	r3, r3, #12
 8005940:	4313      	orrs	r3, r2
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4313      	orrs	r3, r2
 8005946:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800594e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005956:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	4313      	orrs	r3, r2
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d122      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d11b      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0202 	mvn.w	r2, #2
 80059c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fa6b 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 80059dc:	e005      	b.n	80059ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fa5d 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fa6e 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d122      	bne.n	8005a44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d11b      	bne.n	8005a44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0204 	mvn.w	r2, #4
 8005a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa41 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005a30:	e005      	b.n	8005a3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fa33 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fa44 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d122      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d11b      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0208 	mvn.w	r2, #8
 8005a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2204      	movs	r2, #4
 8005a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fa17 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005a84:	e005      	b.n	8005a92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fa09 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fa1a 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0310 	and.w	r3, r3, #16
 8005aa2:	2b10      	cmp	r3, #16
 8005aa4:	d122      	bne.n	8005aec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0310 	and.w	r3, r3, #16
 8005ab0:	2b10      	cmp	r3, #16
 8005ab2:	d11b      	bne.n	8005aec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0210 	mvn.w	r2, #16
 8005abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2208      	movs	r2, #8
 8005ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f9ed 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005ad8:	e005      	b.n	8005ae6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f9df 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f9f0 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d10e      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d107      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0201 	mvn.w	r2, #1
 8005b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fc fdbe 	bl	8002694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b22:	2b80      	cmp	r3, #128	; 0x80
 8005b24:	d10e      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b30:	2b80      	cmp	r3, #128	; 0x80
 8005b32:	d107      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fd1a 	bl	8006578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4e:	2b40      	cmp	r3, #64	; 0x40
 8005b50:	d10e      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5c:	2b40      	cmp	r3, #64	; 0x40
 8005b5e:	d107      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f9b5 	bl	8005eda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b20      	cmp	r3, #32
 8005b7c:	d10e      	bne.n	8005b9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f003 0320 	and.w	r3, r3, #32
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	d107      	bne.n	8005b9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0220 	mvn.w	r2, #32
 8005b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fce4 	bl	8006564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b9c:	bf00      	nop
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e0b4      	b.n	8005d28 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b0c      	cmp	r3, #12
 8005bd2:	f200 809f 	bhi.w	8005d14 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005bd6:	a201      	add	r2, pc, #4	; (adr r2, 8005bdc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bdc:	08005c11 	.word	0x08005c11
 8005be0:	08005d15 	.word	0x08005d15
 8005be4:	08005d15 	.word	0x08005d15
 8005be8:	08005d15 	.word	0x08005d15
 8005bec:	08005c51 	.word	0x08005c51
 8005bf0:	08005d15 	.word	0x08005d15
 8005bf4:	08005d15 	.word	0x08005d15
 8005bf8:	08005d15 	.word	0x08005d15
 8005bfc:	08005c93 	.word	0x08005c93
 8005c00:	08005d15 	.word	0x08005d15
 8005c04:	08005d15 	.word	0x08005d15
 8005c08:	08005d15 	.word	0x08005d15
 8005c0c:	08005cd3 	.word	0x08005cd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68b9      	ldr	r1, [r7, #8]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 f9ea 	bl	8005ff0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0208 	orr.w	r2, r2, #8
 8005c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699a      	ldr	r2, [r3, #24]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0204 	bic.w	r2, r2, #4
 8005c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6999      	ldr	r1, [r3, #24]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	619a      	str	r2, [r3, #24]
      break;
 8005c4e:	e062      	b.n	8005d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fa30 	bl	80060bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6999      	ldr	r1, [r3, #24]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	021a      	lsls	r2, r3, #8
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	619a      	str	r2, [r3, #24]
      break;
 8005c90:	e041      	b.n	8005d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68b9      	ldr	r1, [r7, #8]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 fa7b 	bl	8006194 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69da      	ldr	r2, [r3, #28]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 0208 	orr.w	r2, r2, #8
 8005cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69da      	ldr	r2, [r3, #28]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0204 	bic.w	r2, r2, #4
 8005cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69d9      	ldr	r1, [r3, #28]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	61da      	str	r2, [r3, #28]
      break;
 8005cd0:	e021      	b.n	8005d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fac5 	bl	8006268 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69da      	ldr	r2, [r3, #28]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69d9      	ldr	r1, [r3, #28]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	021a      	lsls	r2, r3, #8
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	61da      	str	r2, [r3, #28]
      break;
 8005d12:	e000      	b.n	8005d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005d14:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <HAL_TIM_ConfigClockSource+0x18>
 8005d44:	2302      	movs	r3, #2
 8005d46:	e0a6      	b.n	8005e96 <HAL_TIM_ConfigClockSource+0x166>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b40      	cmp	r3, #64	; 0x40
 8005d7e:	d067      	beq.n	8005e50 <HAL_TIM_ConfigClockSource+0x120>
 8005d80:	2b40      	cmp	r3, #64	; 0x40
 8005d82:	d80b      	bhi.n	8005d9c <HAL_TIM_ConfigClockSource+0x6c>
 8005d84:	2b10      	cmp	r3, #16
 8005d86:	d073      	beq.n	8005e70 <HAL_TIM_ConfigClockSource+0x140>
 8005d88:	2b10      	cmp	r3, #16
 8005d8a:	d802      	bhi.n	8005d92 <HAL_TIM_ConfigClockSource+0x62>
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d06f      	beq.n	8005e70 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005d90:	e078      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d06c      	beq.n	8005e70 <HAL_TIM_ConfigClockSource+0x140>
 8005d96:	2b30      	cmp	r3, #48	; 0x30
 8005d98:	d06a      	beq.n	8005e70 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005d9a:	e073      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005d9c:	2b70      	cmp	r3, #112	; 0x70
 8005d9e:	d00d      	beq.n	8005dbc <HAL_TIM_ConfigClockSource+0x8c>
 8005da0:	2b70      	cmp	r3, #112	; 0x70
 8005da2:	d804      	bhi.n	8005dae <HAL_TIM_ConfigClockSource+0x7e>
 8005da4:	2b50      	cmp	r3, #80	; 0x50
 8005da6:	d033      	beq.n	8005e10 <HAL_TIM_ConfigClockSource+0xe0>
 8005da8:	2b60      	cmp	r3, #96	; 0x60
 8005daa:	d041      	beq.n	8005e30 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005dac:	e06a      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db2:	d066      	beq.n	8005e82 <HAL_TIM_ConfigClockSource+0x152>
 8005db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db8:	d017      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005dba:	e063      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	6899      	ldr	r1, [r3, #8]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f000 fb16 	bl	80063fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005dde:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	609a      	str	r2, [r3, #8]
      break;
 8005de8:	e04c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	6899      	ldr	r1, [r3, #8]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f000 faff 	bl	80063fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e0c:	609a      	str	r2, [r3, #8]
      break;
 8005e0e:	e039      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	6859      	ldr	r1, [r3, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	f000 fa73 	bl	8006308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2150      	movs	r1, #80	; 0x50
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 facc 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 8005e2e:	e029      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6818      	ldr	r0, [r3, #0]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	6859      	ldr	r1, [r3, #4]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f000 fa92 	bl	8006366 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2160      	movs	r1, #96	; 0x60
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fabc 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 8005e4e:	e019      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	6859      	ldr	r1, [r3, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	f000 fa53 	bl	8006308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2140      	movs	r1, #64	; 0x40
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 faac 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 8005e6e:	e009      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	f000 faa3 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 8005e80:	e000      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
	...

08005ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a34      	ldr	r2, [pc, #208]	; (8005fd4 <TIM_Base_SetConfig+0xe4>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00f      	beq.n	8005f28 <TIM_Base_SetConfig+0x38>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0e:	d00b      	beq.n	8005f28 <TIM_Base_SetConfig+0x38>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a31      	ldr	r2, [pc, #196]	; (8005fd8 <TIM_Base_SetConfig+0xe8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d007      	beq.n	8005f28 <TIM_Base_SetConfig+0x38>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a30      	ldr	r2, [pc, #192]	; (8005fdc <TIM_Base_SetConfig+0xec>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d003      	beq.n	8005f28 <TIM_Base_SetConfig+0x38>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a2f      	ldr	r2, [pc, #188]	; (8005fe0 <TIM_Base_SetConfig+0xf0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d108      	bne.n	8005f3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a25      	ldr	r2, [pc, #148]	; (8005fd4 <TIM_Base_SetConfig+0xe4>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d01b      	beq.n	8005f7a <TIM_Base_SetConfig+0x8a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f48:	d017      	beq.n	8005f7a <TIM_Base_SetConfig+0x8a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a22      	ldr	r2, [pc, #136]	; (8005fd8 <TIM_Base_SetConfig+0xe8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d013      	beq.n	8005f7a <TIM_Base_SetConfig+0x8a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a21      	ldr	r2, [pc, #132]	; (8005fdc <TIM_Base_SetConfig+0xec>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00f      	beq.n	8005f7a <TIM_Base_SetConfig+0x8a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a20      	ldr	r2, [pc, #128]	; (8005fe0 <TIM_Base_SetConfig+0xf0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00b      	beq.n	8005f7a <TIM_Base_SetConfig+0x8a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a1f      	ldr	r2, [pc, #124]	; (8005fe4 <TIM_Base_SetConfig+0xf4>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d007      	beq.n	8005f7a <TIM_Base_SetConfig+0x8a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a1e      	ldr	r2, [pc, #120]	; (8005fe8 <TIM_Base_SetConfig+0xf8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d003      	beq.n	8005f7a <TIM_Base_SetConfig+0x8a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a1d      	ldr	r2, [pc, #116]	; (8005fec <TIM_Base_SetConfig+0xfc>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d108      	bne.n	8005f8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a08      	ldr	r2, [pc, #32]	; (8005fd4 <TIM_Base_SetConfig+0xe4>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d103      	bne.n	8005fc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	691a      	ldr	r2, [r3, #16]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	615a      	str	r2, [r3, #20]
}
 8005fc6:	bf00      	nop
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	40010000 	.word	0x40010000
 8005fd8:	40000400 	.word	0x40000400
 8005fdc:	40000800 	.word	0x40000800
 8005fe0:	40000c00 	.word	0x40000c00
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40014400 	.word	0x40014400
 8005fec:	40014800 	.word	0x40014800

08005ff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	f023 0201 	bic.w	r2, r3, #1
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 0303 	bic.w	r3, r3, #3
 8006026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f023 0302 	bic.w	r3, r3, #2
 8006038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a1c      	ldr	r2, [pc, #112]	; (80060b8 <TIM_OC1_SetConfig+0xc8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d10c      	bne.n	8006066 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f023 0308 	bic.w	r3, r3, #8
 8006052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f023 0304 	bic.w	r3, r3, #4
 8006064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a13      	ldr	r2, [pc, #76]	; (80060b8 <TIM_OC1_SetConfig+0xc8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d111      	bne.n	8006092 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800607c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	4313      	orrs	r3, r2
 8006086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	4313      	orrs	r3, r2
 8006090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	621a      	str	r2, [r3, #32]
}
 80060ac:	bf00      	nop
 80060ae:	371c      	adds	r7, #28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	40010000 	.word	0x40010000

080060bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	f023 0210 	bic.w	r2, r3, #16
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	021b      	lsls	r3, r3, #8
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f023 0320 	bic.w	r3, r3, #32
 8006106:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4313      	orrs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a1e      	ldr	r2, [pc, #120]	; (8006190 <TIM_OC2_SetConfig+0xd4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d10d      	bne.n	8006138 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4313      	orrs	r3, r2
 800612e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006136:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a15      	ldr	r2, [pc, #84]	; (8006190 <TIM_OC2_SetConfig+0xd4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d113      	bne.n	8006168 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800614e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40010000 	.word	0x40010000

08006194 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 0303 	bic.w	r3, r3, #3
 80061ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	021b      	lsls	r3, r3, #8
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a1d      	ldr	r2, [pc, #116]	; (8006264 <TIM_OC3_SetConfig+0xd0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d10d      	bne.n	800620e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800620c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a14      	ldr	r2, [pc, #80]	; (8006264 <TIM_OC3_SetConfig+0xd0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d113      	bne.n	800623e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800621c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	011b      	lsls	r3, r3, #4
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	621a      	str	r2, [r3, #32]
}
 8006258:	bf00      	nop
 800625a:	371c      	adds	r7, #28
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	40010000 	.word	0x40010000

08006268 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800629e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	021b      	lsls	r3, r3, #8
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	031b      	lsls	r3, r3, #12
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	4313      	orrs	r3, r2
 80062be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a10      	ldr	r2, [pc, #64]	; (8006304 <TIM_OC4_SetConfig+0x9c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d109      	bne.n	80062dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	019b      	lsls	r3, r3, #6
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	621a      	str	r2, [r3, #32]
}
 80062f6:	bf00      	nop
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	40010000 	.word	0x40010000

08006308 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	f023 0201 	bic.w	r2, r3, #1
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f023 030a 	bic.w	r3, r3, #10
 8006344:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	621a      	str	r2, [r3, #32]
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006366:	b480      	push	{r7}
 8006368:	b087      	sub	sp, #28
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	f023 0210 	bic.w	r2, r3, #16
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006390:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	031b      	lsls	r3, r3, #12
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	4313      	orrs	r3, r2
 800639a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	621a      	str	r2, [r3, #32]
}
 80063ba:	bf00      	nop
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b085      	sub	sp, #20
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f043 0307 	orr.w	r3, r3, #7
 80063e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	609a      	str	r2, [r3, #8]
}
 80063f0:	bf00      	nop
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006416:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	021a      	lsls	r2, r3, #8
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	431a      	orrs	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4313      	orrs	r3, r2
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	609a      	str	r2, [r3, #8]
}
 8006430:	bf00      	nop
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f003 031f 	and.w	r3, r3, #31
 800644e:	2201      	movs	r2, #1
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a1a      	ldr	r2, [r3, #32]
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	43db      	mvns	r3, r3
 800645e:	401a      	ands	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f003 031f 	and.w	r3, r3, #31
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	fa01 f303 	lsl.w	r3, r1, r3
 8006474:	431a      	orrs	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	621a      	str	r2, [r3, #32]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
	...

08006488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800649c:	2302      	movs	r3, #2
 800649e:	e050      	b.n	8006542 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a1c      	ldr	r2, [pc, #112]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d018      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ec:	d013      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a18      	ldr	r2, [pc, #96]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00e      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a16      	ldr	r2, [pc, #88]	; (8006558 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d009      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a15      	ldr	r2, [pc, #84]	; (800655c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d004      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a13      	ldr	r2, [pc, #76]	; (8006560 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d10c      	bne.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800651c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	4313      	orrs	r3, r2
 8006526:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	40010000 	.word	0x40010000
 8006554:	40000400 	.word	0x40000400
 8006558:	40000800 	.word	0x40000800
 800655c:	40000c00 	.word	0x40000c00
 8006560:	40014000 	.word	0x40014000

08006564 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e03f      	b.n	800661e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d106      	bne.n	80065b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7fc faca 	bl	8002b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2224      	movs	r2, #36	; 0x24
 80065bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f829 	bl	8006628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	691a      	ldr	r2, [r3, #16]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	695a      	ldr	r2, [r3, #20]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006604:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2220      	movs	r2, #32
 8006610:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2220      	movs	r2, #32
 8006618:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68da      	ldr	r2, [r3, #12]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	431a      	orrs	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	4313      	orrs	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800666a:	f023 030c 	bic.w	r3, r3, #12
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6812      	ldr	r2, [r2, #0]
 8006672:	68f9      	ldr	r1, [r7, #12]
 8006674:	430b      	orrs	r3, r1
 8006676:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699a      	ldr	r2, [r3, #24]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006696:	f040 818b 	bne.w	80069b0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4ac1      	ldr	r2, [pc, #772]	; (80069a4 <UART_SetConfig+0x37c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d005      	beq.n	80066b0 <UART_SetConfig+0x88>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4abf      	ldr	r2, [pc, #764]	; (80069a8 <UART_SetConfig+0x380>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	f040 80bd 	bne.w	800682a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066b0:	f7fe fff2 	bl	8005698 <HAL_RCC_GetPCLK2Freq>
 80066b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	461d      	mov	r5, r3
 80066ba:	f04f 0600 	mov.w	r6, #0
 80066be:	46a8      	mov	r8, r5
 80066c0:	46b1      	mov	r9, r6
 80066c2:	eb18 0308 	adds.w	r3, r8, r8
 80066c6:	eb49 0409 	adc.w	r4, r9, r9
 80066ca:	4698      	mov	r8, r3
 80066cc:	46a1      	mov	r9, r4
 80066ce:	eb18 0805 	adds.w	r8, r8, r5
 80066d2:	eb49 0906 	adc.w	r9, r9, r6
 80066d6:	f04f 0100 	mov.w	r1, #0
 80066da:	f04f 0200 	mov.w	r2, #0
 80066de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80066e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066ea:	4688      	mov	r8, r1
 80066ec:	4691      	mov	r9, r2
 80066ee:	eb18 0005 	adds.w	r0, r8, r5
 80066f2:	eb49 0106 	adc.w	r1, r9, r6
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	461d      	mov	r5, r3
 80066fc:	f04f 0600 	mov.w	r6, #0
 8006700:	196b      	adds	r3, r5, r5
 8006702:	eb46 0406 	adc.w	r4, r6, r6
 8006706:	461a      	mov	r2, r3
 8006708:	4623      	mov	r3, r4
 800670a:	f7fa faa5 	bl	8000c58 <__aeabi_uldivmod>
 800670e:	4603      	mov	r3, r0
 8006710:	460c      	mov	r4, r1
 8006712:	461a      	mov	r2, r3
 8006714:	4ba5      	ldr	r3, [pc, #660]	; (80069ac <UART_SetConfig+0x384>)
 8006716:	fba3 2302 	umull	r2, r3, r3, r2
 800671a:	095b      	lsrs	r3, r3, #5
 800671c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	461d      	mov	r5, r3
 8006724:	f04f 0600 	mov.w	r6, #0
 8006728:	46a9      	mov	r9, r5
 800672a:	46b2      	mov	sl, r6
 800672c:	eb19 0309 	adds.w	r3, r9, r9
 8006730:	eb4a 040a 	adc.w	r4, sl, sl
 8006734:	4699      	mov	r9, r3
 8006736:	46a2      	mov	sl, r4
 8006738:	eb19 0905 	adds.w	r9, r9, r5
 800673c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006740:	f04f 0100 	mov.w	r1, #0
 8006744:	f04f 0200 	mov.w	r2, #0
 8006748:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800674c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006750:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006754:	4689      	mov	r9, r1
 8006756:	4692      	mov	sl, r2
 8006758:	eb19 0005 	adds.w	r0, r9, r5
 800675c:	eb4a 0106 	adc.w	r1, sl, r6
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	461d      	mov	r5, r3
 8006766:	f04f 0600 	mov.w	r6, #0
 800676a:	196b      	adds	r3, r5, r5
 800676c:	eb46 0406 	adc.w	r4, r6, r6
 8006770:	461a      	mov	r2, r3
 8006772:	4623      	mov	r3, r4
 8006774:	f7fa fa70 	bl	8000c58 <__aeabi_uldivmod>
 8006778:	4603      	mov	r3, r0
 800677a:	460c      	mov	r4, r1
 800677c:	461a      	mov	r2, r3
 800677e:	4b8b      	ldr	r3, [pc, #556]	; (80069ac <UART_SetConfig+0x384>)
 8006780:	fba3 1302 	umull	r1, r3, r3, r2
 8006784:	095b      	lsrs	r3, r3, #5
 8006786:	2164      	movs	r1, #100	; 0x64
 8006788:	fb01 f303 	mul.w	r3, r1, r3
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	3332      	adds	r3, #50	; 0x32
 8006792:	4a86      	ldr	r2, [pc, #536]	; (80069ac <UART_SetConfig+0x384>)
 8006794:	fba2 2303 	umull	r2, r3, r2, r3
 8006798:	095b      	lsrs	r3, r3, #5
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067a0:	4498      	add	r8, r3
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	461d      	mov	r5, r3
 80067a6:	f04f 0600 	mov.w	r6, #0
 80067aa:	46a9      	mov	r9, r5
 80067ac:	46b2      	mov	sl, r6
 80067ae:	eb19 0309 	adds.w	r3, r9, r9
 80067b2:	eb4a 040a 	adc.w	r4, sl, sl
 80067b6:	4699      	mov	r9, r3
 80067b8:	46a2      	mov	sl, r4
 80067ba:	eb19 0905 	adds.w	r9, r9, r5
 80067be:	eb4a 0a06 	adc.w	sl, sl, r6
 80067c2:	f04f 0100 	mov.w	r1, #0
 80067c6:	f04f 0200 	mov.w	r2, #0
 80067ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067d6:	4689      	mov	r9, r1
 80067d8:	4692      	mov	sl, r2
 80067da:	eb19 0005 	adds.w	r0, r9, r5
 80067de:	eb4a 0106 	adc.w	r1, sl, r6
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	461d      	mov	r5, r3
 80067e8:	f04f 0600 	mov.w	r6, #0
 80067ec:	196b      	adds	r3, r5, r5
 80067ee:	eb46 0406 	adc.w	r4, r6, r6
 80067f2:	461a      	mov	r2, r3
 80067f4:	4623      	mov	r3, r4
 80067f6:	f7fa fa2f 	bl	8000c58 <__aeabi_uldivmod>
 80067fa:	4603      	mov	r3, r0
 80067fc:	460c      	mov	r4, r1
 80067fe:	461a      	mov	r2, r3
 8006800:	4b6a      	ldr	r3, [pc, #424]	; (80069ac <UART_SetConfig+0x384>)
 8006802:	fba3 1302 	umull	r1, r3, r3, r2
 8006806:	095b      	lsrs	r3, r3, #5
 8006808:	2164      	movs	r1, #100	; 0x64
 800680a:	fb01 f303 	mul.w	r3, r1, r3
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	3332      	adds	r3, #50	; 0x32
 8006814:	4a65      	ldr	r2, [pc, #404]	; (80069ac <UART_SetConfig+0x384>)
 8006816:	fba2 2303 	umull	r2, r3, r2, r3
 800681a:	095b      	lsrs	r3, r3, #5
 800681c:	f003 0207 	and.w	r2, r3, #7
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4442      	add	r2, r8
 8006826:	609a      	str	r2, [r3, #8]
 8006828:	e26f      	b.n	8006d0a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800682a:	f7fe ff21 	bl	8005670 <HAL_RCC_GetPCLK1Freq>
 800682e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	461d      	mov	r5, r3
 8006834:	f04f 0600 	mov.w	r6, #0
 8006838:	46a8      	mov	r8, r5
 800683a:	46b1      	mov	r9, r6
 800683c:	eb18 0308 	adds.w	r3, r8, r8
 8006840:	eb49 0409 	adc.w	r4, r9, r9
 8006844:	4698      	mov	r8, r3
 8006846:	46a1      	mov	r9, r4
 8006848:	eb18 0805 	adds.w	r8, r8, r5
 800684c:	eb49 0906 	adc.w	r9, r9, r6
 8006850:	f04f 0100 	mov.w	r1, #0
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800685c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006860:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006864:	4688      	mov	r8, r1
 8006866:	4691      	mov	r9, r2
 8006868:	eb18 0005 	adds.w	r0, r8, r5
 800686c:	eb49 0106 	adc.w	r1, r9, r6
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	461d      	mov	r5, r3
 8006876:	f04f 0600 	mov.w	r6, #0
 800687a:	196b      	adds	r3, r5, r5
 800687c:	eb46 0406 	adc.w	r4, r6, r6
 8006880:	461a      	mov	r2, r3
 8006882:	4623      	mov	r3, r4
 8006884:	f7fa f9e8 	bl	8000c58 <__aeabi_uldivmod>
 8006888:	4603      	mov	r3, r0
 800688a:	460c      	mov	r4, r1
 800688c:	461a      	mov	r2, r3
 800688e:	4b47      	ldr	r3, [pc, #284]	; (80069ac <UART_SetConfig+0x384>)
 8006890:	fba3 2302 	umull	r2, r3, r3, r2
 8006894:	095b      	lsrs	r3, r3, #5
 8006896:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	461d      	mov	r5, r3
 800689e:	f04f 0600 	mov.w	r6, #0
 80068a2:	46a9      	mov	r9, r5
 80068a4:	46b2      	mov	sl, r6
 80068a6:	eb19 0309 	adds.w	r3, r9, r9
 80068aa:	eb4a 040a 	adc.w	r4, sl, sl
 80068ae:	4699      	mov	r9, r3
 80068b0:	46a2      	mov	sl, r4
 80068b2:	eb19 0905 	adds.w	r9, r9, r5
 80068b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80068ba:	f04f 0100 	mov.w	r1, #0
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068ce:	4689      	mov	r9, r1
 80068d0:	4692      	mov	sl, r2
 80068d2:	eb19 0005 	adds.w	r0, r9, r5
 80068d6:	eb4a 0106 	adc.w	r1, sl, r6
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	461d      	mov	r5, r3
 80068e0:	f04f 0600 	mov.w	r6, #0
 80068e4:	196b      	adds	r3, r5, r5
 80068e6:	eb46 0406 	adc.w	r4, r6, r6
 80068ea:	461a      	mov	r2, r3
 80068ec:	4623      	mov	r3, r4
 80068ee:	f7fa f9b3 	bl	8000c58 <__aeabi_uldivmod>
 80068f2:	4603      	mov	r3, r0
 80068f4:	460c      	mov	r4, r1
 80068f6:	461a      	mov	r2, r3
 80068f8:	4b2c      	ldr	r3, [pc, #176]	; (80069ac <UART_SetConfig+0x384>)
 80068fa:	fba3 1302 	umull	r1, r3, r3, r2
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	2164      	movs	r1, #100	; 0x64
 8006902:	fb01 f303 	mul.w	r3, r1, r3
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	00db      	lsls	r3, r3, #3
 800690a:	3332      	adds	r3, #50	; 0x32
 800690c:	4a27      	ldr	r2, [pc, #156]	; (80069ac <UART_SetConfig+0x384>)
 800690e:	fba2 2303 	umull	r2, r3, r2, r3
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800691a:	4498      	add	r8, r3
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	461d      	mov	r5, r3
 8006920:	f04f 0600 	mov.w	r6, #0
 8006924:	46a9      	mov	r9, r5
 8006926:	46b2      	mov	sl, r6
 8006928:	eb19 0309 	adds.w	r3, r9, r9
 800692c:	eb4a 040a 	adc.w	r4, sl, sl
 8006930:	4699      	mov	r9, r3
 8006932:	46a2      	mov	sl, r4
 8006934:	eb19 0905 	adds.w	r9, r9, r5
 8006938:	eb4a 0a06 	adc.w	sl, sl, r6
 800693c:	f04f 0100 	mov.w	r1, #0
 8006940:	f04f 0200 	mov.w	r2, #0
 8006944:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006948:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800694c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006950:	4689      	mov	r9, r1
 8006952:	4692      	mov	sl, r2
 8006954:	eb19 0005 	adds.w	r0, r9, r5
 8006958:	eb4a 0106 	adc.w	r1, sl, r6
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	461d      	mov	r5, r3
 8006962:	f04f 0600 	mov.w	r6, #0
 8006966:	196b      	adds	r3, r5, r5
 8006968:	eb46 0406 	adc.w	r4, r6, r6
 800696c:	461a      	mov	r2, r3
 800696e:	4623      	mov	r3, r4
 8006970:	f7fa f972 	bl	8000c58 <__aeabi_uldivmod>
 8006974:	4603      	mov	r3, r0
 8006976:	460c      	mov	r4, r1
 8006978:	461a      	mov	r2, r3
 800697a:	4b0c      	ldr	r3, [pc, #48]	; (80069ac <UART_SetConfig+0x384>)
 800697c:	fba3 1302 	umull	r1, r3, r3, r2
 8006980:	095b      	lsrs	r3, r3, #5
 8006982:	2164      	movs	r1, #100	; 0x64
 8006984:	fb01 f303 	mul.w	r3, r1, r3
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	00db      	lsls	r3, r3, #3
 800698c:	3332      	adds	r3, #50	; 0x32
 800698e:	4a07      	ldr	r2, [pc, #28]	; (80069ac <UART_SetConfig+0x384>)
 8006990:	fba2 2303 	umull	r2, r3, r2, r3
 8006994:	095b      	lsrs	r3, r3, #5
 8006996:	f003 0207 	and.w	r2, r3, #7
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4442      	add	r2, r8
 80069a0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80069a2:	e1b2      	b.n	8006d0a <UART_SetConfig+0x6e2>
 80069a4:	40011000 	.word	0x40011000
 80069a8:	40011400 	.word	0x40011400
 80069ac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4ad7      	ldr	r2, [pc, #860]	; (8006d14 <UART_SetConfig+0x6ec>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d005      	beq.n	80069c6 <UART_SetConfig+0x39e>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4ad6      	ldr	r2, [pc, #856]	; (8006d18 <UART_SetConfig+0x6f0>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	f040 80d1 	bne.w	8006b68 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80069c6:	f7fe fe67 	bl	8005698 <HAL_RCC_GetPCLK2Freq>
 80069ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	469a      	mov	sl, r3
 80069d0:	f04f 0b00 	mov.w	fp, #0
 80069d4:	46d0      	mov	r8, sl
 80069d6:	46d9      	mov	r9, fp
 80069d8:	eb18 0308 	adds.w	r3, r8, r8
 80069dc:	eb49 0409 	adc.w	r4, r9, r9
 80069e0:	4698      	mov	r8, r3
 80069e2:	46a1      	mov	r9, r4
 80069e4:	eb18 080a 	adds.w	r8, r8, sl
 80069e8:	eb49 090b 	adc.w	r9, r9, fp
 80069ec:	f04f 0100 	mov.w	r1, #0
 80069f0:	f04f 0200 	mov.w	r2, #0
 80069f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a00:	4688      	mov	r8, r1
 8006a02:	4691      	mov	r9, r2
 8006a04:	eb1a 0508 	adds.w	r5, sl, r8
 8006a08:	eb4b 0609 	adc.w	r6, fp, r9
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	4619      	mov	r1, r3
 8006a12:	f04f 0200 	mov.w	r2, #0
 8006a16:	f04f 0300 	mov.w	r3, #0
 8006a1a:	f04f 0400 	mov.w	r4, #0
 8006a1e:	0094      	lsls	r4, r2, #2
 8006a20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a24:	008b      	lsls	r3, r1, #2
 8006a26:	461a      	mov	r2, r3
 8006a28:	4623      	mov	r3, r4
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	f7fa f913 	bl	8000c58 <__aeabi_uldivmod>
 8006a32:	4603      	mov	r3, r0
 8006a34:	460c      	mov	r4, r1
 8006a36:	461a      	mov	r2, r3
 8006a38:	4bb8      	ldr	r3, [pc, #736]	; (8006d1c <UART_SetConfig+0x6f4>)
 8006a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	469b      	mov	fp, r3
 8006a48:	f04f 0c00 	mov.w	ip, #0
 8006a4c:	46d9      	mov	r9, fp
 8006a4e:	46e2      	mov	sl, ip
 8006a50:	eb19 0309 	adds.w	r3, r9, r9
 8006a54:	eb4a 040a 	adc.w	r4, sl, sl
 8006a58:	4699      	mov	r9, r3
 8006a5a:	46a2      	mov	sl, r4
 8006a5c:	eb19 090b 	adds.w	r9, r9, fp
 8006a60:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a64:	f04f 0100 	mov.w	r1, #0
 8006a68:	f04f 0200 	mov.w	r2, #0
 8006a6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a78:	4689      	mov	r9, r1
 8006a7a:	4692      	mov	sl, r2
 8006a7c:	eb1b 0509 	adds.w	r5, fp, r9
 8006a80:	eb4c 060a 	adc.w	r6, ip, sl
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	f04f 0200 	mov.w	r2, #0
 8006a8e:	f04f 0300 	mov.w	r3, #0
 8006a92:	f04f 0400 	mov.w	r4, #0
 8006a96:	0094      	lsls	r4, r2, #2
 8006a98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a9c:	008b      	lsls	r3, r1, #2
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	4623      	mov	r3, r4
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	4631      	mov	r1, r6
 8006aa6:	f7fa f8d7 	bl	8000c58 <__aeabi_uldivmod>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	460c      	mov	r4, r1
 8006aae:	461a      	mov	r2, r3
 8006ab0:	4b9a      	ldr	r3, [pc, #616]	; (8006d1c <UART_SetConfig+0x6f4>)
 8006ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ab6:	095b      	lsrs	r3, r3, #5
 8006ab8:	2164      	movs	r1, #100	; 0x64
 8006aba:	fb01 f303 	mul.w	r3, r1, r3
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	3332      	adds	r3, #50	; 0x32
 8006ac4:	4a95      	ldr	r2, [pc, #596]	; (8006d1c <UART_SetConfig+0x6f4>)
 8006ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aca:	095b      	lsrs	r3, r3, #5
 8006acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ad0:	4498      	add	r8, r3
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	469b      	mov	fp, r3
 8006ad6:	f04f 0c00 	mov.w	ip, #0
 8006ada:	46d9      	mov	r9, fp
 8006adc:	46e2      	mov	sl, ip
 8006ade:	eb19 0309 	adds.w	r3, r9, r9
 8006ae2:	eb4a 040a 	adc.w	r4, sl, sl
 8006ae6:	4699      	mov	r9, r3
 8006ae8:	46a2      	mov	sl, r4
 8006aea:	eb19 090b 	adds.w	r9, r9, fp
 8006aee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006af2:	f04f 0100 	mov.w	r1, #0
 8006af6:	f04f 0200 	mov.w	r2, #0
 8006afa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006afe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b06:	4689      	mov	r9, r1
 8006b08:	4692      	mov	sl, r2
 8006b0a:	eb1b 0509 	adds.w	r5, fp, r9
 8006b0e:	eb4c 060a 	adc.w	r6, ip, sl
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	4619      	mov	r1, r3
 8006b18:	f04f 0200 	mov.w	r2, #0
 8006b1c:	f04f 0300 	mov.w	r3, #0
 8006b20:	f04f 0400 	mov.w	r4, #0
 8006b24:	0094      	lsls	r4, r2, #2
 8006b26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b2a:	008b      	lsls	r3, r1, #2
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	4623      	mov	r3, r4
 8006b30:	4628      	mov	r0, r5
 8006b32:	4631      	mov	r1, r6
 8006b34:	f7fa f890 	bl	8000c58 <__aeabi_uldivmod>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	4b77      	ldr	r3, [pc, #476]	; (8006d1c <UART_SetConfig+0x6f4>)
 8006b40:	fba3 1302 	umull	r1, r3, r3, r2
 8006b44:	095b      	lsrs	r3, r3, #5
 8006b46:	2164      	movs	r1, #100	; 0x64
 8006b48:	fb01 f303 	mul.w	r3, r1, r3
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	3332      	adds	r3, #50	; 0x32
 8006b52:	4a72      	ldr	r2, [pc, #456]	; (8006d1c <UART_SetConfig+0x6f4>)
 8006b54:	fba2 2303 	umull	r2, r3, r2, r3
 8006b58:	095b      	lsrs	r3, r3, #5
 8006b5a:	f003 020f 	and.w	r2, r3, #15
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4442      	add	r2, r8
 8006b64:	609a      	str	r2, [r3, #8]
 8006b66:	e0d0      	b.n	8006d0a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b68:	f7fe fd82 	bl	8005670 <HAL_RCC_GetPCLK1Freq>
 8006b6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	469a      	mov	sl, r3
 8006b72:	f04f 0b00 	mov.w	fp, #0
 8006b76:	46d0      	mov	r8, sl
 8006b78:	46d9      	mov	r9, fp
 8006b7a:	eb18 0308 	adds.w	r3, r8, r8
 8006b7e:	eb49 0409 	adc.w	r4, r9, r9
 8006b82:	4698      	mov	r8, r3
 8006b84:	46a1      	mov	r9, r4
 8006b86:	eb18 080a 	adds.w	r8, r8, sl
 8006b8a:	eb49 090b 	adc.w	r9, r9, fp
 8006b8e:	f04f 0100 	mov.w	r1, #0
 8006b92:	f04f 0200 	mov.w	r2, #0
 8006b96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ba2:	4688      	mov	r8, r1
 8006ba4:	4691      	mov	r9, r2
 8006ba6:	eb1a 0508 	adds.w	r5, sl, r8
 8006baa:	eb4b 0609 	adc.w	r6, fp, r9
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	f04f 0200 	mov.w	r2, #0
 8006bb8:	f04f 0300 	mov.w	r3, #0
 8006bbc:	f04f 0400 	mov.w	r4, #0
 8006bc0:	0094      	lsls	r4, r2, #2
 8006bc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bc6:	008b      	lsls	r3, r1, #2
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4623      	mov	r3, r4
 8006bcc:	4628      	mov	r0, r5
 8006bce:	4631      	mov	r1, r6
 8006bd0:	f7fa f842 	bl	8000c58 <__aeabi_uldivmod>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4b50      	ldr	r3, [pc, #320]	; (8006d1c <UART_SetConfig+0x6f4>)
 8006bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8006be0:	095b      	lsrs	r3, r3, #5
 8006be2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	469b      	mov	fp, r3
 8006bea:	f04f 0c00 	mov.w	ip, #0
 8006bee:	46d9      	mov	r9, fp
 8006bf0:	46e2      	mov	sl, ip
 8006bf2:	eb19 0309 	adds.w	r3, r9, r9
 8006bf6:	eb4a 040a 	adc.w	r4, sl, sl
 8006bfa:	4699      	mov	r9, r3
 8006bfc:	46a2      	mov	sl, r4
 8006bfe:	eb19 090b 	adds.w	r9, r9, fp
 8006c02:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c06:	f04f 0100 	mov.w	r1, #0
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c1a:	4689      	mov	r9, r1
 8006c1c:	4692      	mov	sl, r2
 8006c1e:	eb1b 0509 	adds.w	r5, fp, r9
 8006c22:	eb4c 060a 	adc.w	r6, ip, sl
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	f04f 0200 	mov.w	r2, #0
 8006c30:	f04f 0300 	mov.w	r3, #0
 8006c34:	f04f 0400 	mov.w	r4, #0
 8006c38:	0094      	lsls	r4, r2, #2
 8006c3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c3e:	008b      	lsls	r3, r1, #2
 8006c40:	461a      	mov	r2, r3
 8006c42:	4623      	mov	r3, r4
 8006c44:	4628      	mov	r0, r5
 8006c46:	4631      	mov	r1, r6
 8006c48:	f7fa f806 	bl	8000c58 <__aeabi_uldivmod>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	461a      	mov	r2, r3
 8006c52:	4b32      	ldr	r3, [pc, #200]	; (8006d1c <UART_SetConfig+0x6f4>)
 8006c54:	fba3 1302 	umull	r1, r3, r3, r2
 8006c58:	095b      	lsrs	r3, r3, #5
 8006c5a:	2164      	movs	r1, #100	; 0x64
 8006c5c:	fb01 f303 	mul.w	r3, r1, r3
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	3332      	adds	r3, #50	; 0x32
 8006c66:	4a2d      	ldr	r2, [pc, #180]	; (8006d1c <UART_SetConfig+0x6f4>)
 8006c68:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6c:	095b      	lsrs	r3, r3, #5
 8006c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c72:	4498      	add	r8, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	469b      	mov	fp, r3
 8006c78:	f04f 0c00 	mov.w	ip, #0
 8006c7c:	46d9      	mov	r9, fp
 8006c7e:	46e2      	mov	sl, ip
 8006c80:	eb19 0309 	adds.w	r3, r9, r9
 8006c84:	eb4a 040a 	adc.w	r4, sl, sl
 8006c88:	4699      	mov	r9, r3
 8006c8a:	46a2      	mov	sl, r4
 8006c8c:	eb19 090b 	adds.w	r9, r9, fp
 8006c90:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c94:	f04f 0100 	mov.w	r1, #0
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ca0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ca4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ca8:	4689      	mov	r9, r1
 8006caa:	4692      	mov	sl, r2
 8006cac:	eb1b 0509 	adds.w	r5, fp, r9
 8006cb0:	eb4c 060a 	adc.w	r6, ip, sl
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	f04f 0200 	mov.w	r2, #0
 8006cbe:	f04f 0300 	mov.w	r3, #0
 8006cc2:	f04f 0400 	mov.w	r4, #0
 8006cc6:	0094      	lsls	r4, r2, #2
 8006cc8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ccc:	008b      	lsls	r3, r1, #2
 8006cce:	461a      	mov	r2, r3
 8006cd0:	4623      	mov	r3, r4
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	f7f9 ffbf 	bl	8000c58 <__aeabi_uldivmod>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	460c      	mov	r4, r1
 8006cde:	461a      	mov	r2, r3
 8006ce0:	4b0e      	ldr	r3, [pc, #56]	; (8006d1c <UART_SetConfig+0x6f4>)
 8006ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ce6:	095b      	lsrs	r3, r3, #5
 8006ce8:	2164      	movs	r1, #100	; 0x64
 8006cea:	fb01 f303 	mul.w	r3, r1, r3
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	011b      	lsls	r3, r3, #4
 8006cf2:	3332      	adds	r3, #50	; 0x32
 8006cf4:	4a09      	ldr	r2, [pc, #36]	; (8006d1c <UART_SetConfig+0x6f4>)
 8006cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	f003 020f 	and.w	r2, r3, #15
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4442      	add	r2, r8
 8006d06:	609a      	str	r2, [r3, #8]
}
 8006d08:	e7ff      	b.n	8006d0a <UART_SetConfig+0x6e2>
 8006d0a:	bf00      	nop
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d14:	40011000 	.word	0x40011000
 8006d18:	40011400 	.word	0x40011400
 8006d1c:	51eb851f 	.word	0x51eb851f

08006d20 <__errno>:
 8006d20:	4b01      	ldr	r3, [pc, #4]	; (8006d28 <__errno+0x8>)
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	20000020 	.word	0x20000020

08006d2c <__libc_init_array>:
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	4e0d      	ldr	r6, [pc, #52]	; (8006d64 <__libc_init_array+0x38>)
 8006d30:	4c0d      	ldr	r4, [pc, #52]	; (8006d68 <__libc_init_array+0x3c>)
 8006d32:	1ba4      	subs	r4, r4, r6
 8006d34:	10a4      	asrs	r4, r4, #2
 8006d36:	2500      	movs	r5, #0
 8006d38:	42a5      	cmp	r5, r4
 8006d3a:	d109      	bne.n	8006d50 <__libc_init_array+0x24>
 8006d3c:	4e0b      	ldr	r6, [pc, #44]	; (8006d6c <__libc_init_array+0x40>)
 8006d3e:	4c0c      	ldr	r4, [pc, #48]	; (8006d70 <__libc_init_array+0x44>)
 8006d40:	f002 f85e 	bl	8008e00 <_init>
 8006d44:	1ba4      	subs	r4, r4, r6
 8006d46:	10a4      	asrs	r4, r4, #2
 8006d48:	2500      	movs	r5, #0
 8006d4a:	42a5      	cmp	r5, r4
 8006d4c:	d105      	bne.n	8006d5a <__libc_init_array+0x2e>
 8006d4e:	bd70      	pop	{r4, r5, r6, pc}
 8006d50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d54:	4798      	blx	r3
 8006d56:	3501      	adds	r5, #1
 8006d58:	e7ee      	b.n	8006d38 <__libc_init_array+0xc>
 8006d5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d5e:	4798      	blx	r3
 8006d60:	3501      	adds	r5, #1
 8006d62:	e7f2      	b.n	8006d4a <__libc_init_array+0x1e>
 8006d64:	08009378 	.word	0x08009378
 8006d68:	08009378 	.word	0x08009378
 8006d6c:	08009378 	.word	0x08009378
 8006d70:	0800937c 	.word	0x0800937c

08006d74 <memset>:
 8006d74:	4402      	add	r2, r0
 8006d76:	4603      	mov	r3, r0
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d100      	bne.n	8006d7e <memset+0xa>
 8006d7c:	4770      	bx	lr
 8006d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d82:	e7f9      	b.n	8006d78 <memset+0x4>

08006d84 <__cvt>:
 8006d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d88:	ec55 4b10 	vmov	r4, r5, d0
 8006d8c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006d8e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d92:	2d00      	cmp	r5, #0
 8006d94:	460e      	mov	r6, r1
 8006d96:	4691      	mov	r9, r2
 8006d98:	4619      	mov	r1, r3
 8006d9a:	bfb8      	it	lt
 8006d9c:	4622      	movlt	r2, r4
 8006d9e:	462b      	mov	r3, r5
 8006da0:	f027 0720 	bic.w	r7, r7, #32
 8006da4:	bfbb      	ittet	lt
 8006da6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006daa:	461d      	movlt	r5, r3
 8006dac:	2300      	movge	r3, #0
 8006dae:	232d      	movlt	r3, #45	; 0x2d
 8006db0:	bfb8      	it	lt
 8006db2:	4614      	movlt	r4, r2
 8006db4:	2f46      	cmp	r7, #70	; 0x46
 8006db6:	700b      	strb	r3, [r1, #0]
 8006db8:	d004      	beq.n	8006dc4 <__cvt+0x40>
 8006dba:	2f45      	cmp	r7, #69	; 0x45
 8006dbc:	d100      	bne.n	8006dc0 <__cvt+0x3c>
 8006dbe:	3601      	adds	r6, #1
 8006dc0:	2102      	movs	r1, #2
 8006dc2:	e000      	b.n	8006dc6 <__cvt+0x42>
 8006dc4:	2103      	movs	r1, #3
 8006dc6:	ab03      	add	r3, sp, #12
 8006dc8:	9301      	str	r3, [sp, #4]
 8006dca:	ab02      	add	r3, sp, #8
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	4632      	mov	r2, r6
 8006dd0:	4653      	mov	r3, sl
 8006dd2:	ec45 4b10 	vmov	d0, r4, r5
 8006dd6:	f000 fcdf 	bl	8007798 <_dtoa_r>
 8006dda:	2f47      	cmp	r7, #71	; 0x47
 8006ddc:	4680      	mov	r8, r0
 8006dde:	d102      	bne.n	8006de6 <__cvt+0x62>
 8006de0:	f019 0f01 	tst.w	r9, #1
 8006de4:	d026      	beq.n	8006e34 <__cvt+0xb0>
 8006de6:	2f46      	cmp	r7, #70	; 0x46
 8006de8:	eb08 0906 	add.w	r9, r8, r6
 8006dec:	d111      	bne.n	8006e12 <__cvt+0x8e>
 8006dee:	f898 3000 	ldrb.w	r3, [r8]
 8006df2:	2b30      	cmp	r3, #48	; 0x30
 8006df4:	d10a      	bne.n	8006e0c <__cvt+0x88>
 8006df6:	2200      	movs	r2, #0
 8006df8:	2300      	movs	r3, #0
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	f7f9 fe6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e02:	b918      	cbnz	r0, 8006e0c <__cvt+0x88>
 8006e04:	f1c6 0601 	rsb	r6, r6, #1
 8006e08:	f8ca 6000 	str.w	r6, [sl]
 8006e0c:	f8da 3000 	ldr.w	r3, [sl]
 8006e10:	4499      	add	r9, r3
 8006e12:	2200      	movs	r2, #0
 8006e14:	2300      	movs	r3, #0
 8006e16:	4620      	mov	r0, r4
 8006e18:	4629      	mov	r1, r5
 8006e1a:	f7f9 fe5d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e1e:	b938      	cbnz	r0, 8006e30 <__cvt+0xac>
 8006e20:	2230      	movs	r2, #48	; 0x30
 8006e22:	9b03      	ldr	r3, [sp, #12]
 8006e24:	454b      	cmp	r3, r9
 8006e26:	d205      	bcs.n	8006e34 <__cvt+0xb0>
 8006e28:	1c59      	adds	r1, r3, #1
 8006e2a:	9103      	str	r1, [sp, #12]
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	e7f8      	b.n	8006e22 <__cvt+0x9e>
 8006e30:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e38:	eba3 0308 	sub.w	r3, r3, r8
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	b004      	add	sp, #16
 8006e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006e46 <__exponent>:
 8006e46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e48:	2900      	cmp	r1, #0
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	bfba      	itte	lt
 8006e4e:	4249      	neglt	r1, r1
 8006e50:	232d      	movlt	r3, #45	; 0x2d
 8006e52:	232b      	movge	r3, #43	; 0x2b
 8006e54:	2909      	cmp	r1, #9
 8006e56:	f804 2b02 	strb.w	r2, [r4], #2
 8006e5a:	7043      	strb	r3, [r0, #1]
 8006e5c:	dd20      	ble.n	8006ea0 <__exponent+0x5a>
 8006e5e:	f10d 0307 	add.w	r3, sp, #7
 8006e62:	461f      	mov	r7, r3
 8006e64:	260a      	movs	r6, #10
 8006e66:	fb91 f5f6 	sdiv	r5, r1, r6
 8006e6a:	fb06 1115 	mls	r1, r6, r5, r1
 8006e6e:	3130      	adds	r1, #48	; 0x30
 8006e70:	2d09      	cmp	r5, #9
 8006e72:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e76:	f103 32ff 	add.w	r2, r3, #4294967295
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	dc09      	bgt.n	8006e92 <__exponent+0x4c>
 8006e7e:	3130      	adds	r1, #48	; 0x30
 8006e80:	3b02      	subs	r3, #2
 8006e82:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e86:	42bb      	cmp	r3, r7
 8006e88:	4622      	mov	r2, r4
 8006e8a:	d304      	bcc.n	8006e96 <__exponent+0x50>
 8006e8c:	1a10      	subs	r0, r2, r0
 8006e8e:	b003      	add	sp, #12
 8006e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e92:	4613      	mov	r3, r2
 8006e94:	e7e7      	b.n	8006e66 <__exponent+0x20>
 8006e96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e9a:	f804 2b01 	strb.w	r2, [r4], #1
 8006e9e:	e7f2      	b.n	8006e86 <__exponent+0x40>
 8006ea0:	2330      	movs	r3, #48	; 0x30
 8006ea2:	4419      	add	r1, r3
 8006ea4:	7083      	strb	r3, [r0, #2]
 8006ea6:	1d02      	adds	r2, r0, #4
 8006ea8:	70c1      	strb	r1, [r0, #3]
 8006eaa:	e7ef      	b.n	8006e8c <__exponent+0x46>

08006eac <_printf_float>:
 8006eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb0:	b08d      	sub	sp, #52	; 0x34
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006eb8:	4616      	mov	r6, r2
 8006eba:	461f      	mov	r7, r3
 8006ebc:	4605      	mov	r5, r0
 8006ebe:	f001 fa23 	bl	8008308 <_localeconv_r>
 8006ec2:	6803      	ldr	r3, [r0, #0]
 8006ec4:	9304      	str	r3, [sp, #16]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7f9 f98a 	bl	80001e0 <strlen>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	930a      	str	r3, [sp, #40]	; 0x28
 8006ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ed4:	9005      	str	r0, [sp, #20]
 8006ed6:	3307      	adds	r3, #7
 8006ed8:	f023 0307 	bic.w	r3, r3, #7
 8006edc:	f103 0208 	add.w	r2, r3, #8
 8006ee0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ee4:	f8d4 b000 	ldr.w	fp, [r4]
 8006ee8:	f8c8 2000 	str.w	r2, [r8]
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ef4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006ef8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006efc:	9307      	str	r3, [sp, #28]
 8006efe:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f02:	f04f 32ff 	mov.w	r2, #4294967295
 8006f06:	4ba7      	ldr	r3, [pc, #668]	; (80071a4 <_printf_float+0x2f8>)
 8006f08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f0c:	f7f9 fe16 	bl	8000b3c <__aeabi_dcmpun>
 8006f10:	bb70      	cbnz	r0, 8006f70 <_printf_float+0xc4>
 8006f12:	f04f 32ff 	mov.w	r2, #4294967295
 8006f16:	4ba3      	ldr	r3, [pc, #652]	; (80071a4 <_printf_float+0x2f8>)
 8006f18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f1c:	f7f9 fdf0 	bl	8000b00 <__aeabi_dcmple>
 8006f20:	bb30      	cbnz	r0, 8006f70 <_printf_float+0xc4>
 8006f22:	2200      	movs	r2, #0
 8006f24:	2300      	movs	r3, #0
 8006f26:	4640      	mov	r0, r8
 8006f28:	4649      	mov	r1, r9
 8006f2a:	f7f9 fddf 	bl	8000aec <__aeabi_dcmplt>
 8006f2e:	b110      	cbz	r0, 8006f36 <_printf_float+0x8a>
 8006f30:	232d      	movs	r3, #45	; 0x2d
 8006f32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f36:	4a9c      	ldr	r2, [pc, #624]	; (80071a8 <_printf_float+0x2fc>)
 8006f38:	4b9c      	ldr	r3, [pc, #624]	; (80071ac <_printf_float+0x300>)
 8006f3a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006f3e:	bf8c      	ite	hi
 8006f40:	4690      	movhi	r8, r2
 8006f42:	4698      	movls	r8, r3
 8006f44:	2303      	movs	r3, #3
 8006f46:	f02b 0204 	bic.w	r2, fp, #4
 8006f4a:	6123      	str	r3, [r4, #16]
 8006f4c:	6022      	str	r2, [r4, #0]
 8006f4e:	f04f 0900 	mov.w	r9, #0
 8006f52:	9700      	str	r7, [sp, #0]
 8006f54:	4633      	mov	r3, r6
 8006f56:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f58:	4621      	mov	r1, r4
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f000 f9e6 	bl	800732c <_printf_common>
 8006f60:	3001      	adds	r0, #1
 8006f62:	f040 808d 	bne.w	8007080 <_printf_float+0x1d4>
 8006f66:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6a:	b00d      	add	sp, #52	; 0x34
 8006f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f70:	4642      	mov	r2, r8
 8006f72:	464b      	mov	r3, r9
 8006f74:	4640      	mov	r0, r8
 8006f76:	4649      	mov	r1, r9
 8006f78:	f7f9 fde0 	bl	8000b3c <__aeabi_dcmpun>
 8006f7c:	b110      	cbz	r0, 8006f84 <_printf_float+0xd8>
 8006f7e:	4a8c      	ldr	r2, [pc, #560]	; (80071b0 <_printf_float+0x304>)
 8006f80:	4b8c      	ldr	r3, [pc, #560]	; (80071b4 <_printf_float+0x308>)
 8006f82:	e7da      	b.n	8006f3a <_printf_float+0x8e>
 8006f84:	6861      	ldr	r1, [r4, #4]
 8006f86:	1c4b      	adds	r3, r1, #1
 8006f88:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006f8c:	a80a      	add	r0, sp, #40	; 0x28
 8006f8e:	d13e      	bne.n	800700e <_printf_float+0x162>
 8006f90:	2306      	movs	r3, #6
 8006f92:	6063      	str	r3, [r4, #4]
 8006f94:	2300      	movs	r3, #0
 8006f96:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006f9a:	ab09      	add	r3, sp, #36	; 0x24
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	ec49 8b10 	vmov	d0, r8, r9
 8006fa2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006fa6:	6022      	str	r2, [r4, #0]
 8006fa8:	f8cd a004 	str.w	sl, [sp, #4]
 8006fac:	6861      	ldr	r1, [r4, #4]
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f7ff fee8 	bl	8006d84 <__cvt>
 8006fb4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006fb8:	2b47      	cmp	r3, #71	; 0x47
 8006fba:	4680      	mov	r8, r0
 8006fbc:	d109      	bne.n	8006fd2 <_printf_float+0x126>
 8006fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc0:	1cd8      	adds	r0, r3, #3
 8006fc2:	db02      	blt.n	8006fca <_printf_float+0x11e>
 8006fc4:	6862      	ldr	r2, [r4, #4]
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	dd47      	ble.n	800705a <_printf_float+0x1ae>
 8006fca:	f1aa 0a02 	sub.w	sl, sl, #2
 8006fce:	fa5f fa8a 	uxtb.w	sl, sl
 8006fd2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006fd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fd8:	d824      	bhi.n	8007024 <_printf_float+0x178>
 8006fda:	3901      	subs	r1, #1
 8006fdc:	4652      	mov	r2, sl
 8006fde:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fe2:	9109      	str	r1, [sp, #36]	; 0x24
 8006fe4:	f7ff ff2f 	bl	8006e46 <__exponent>
 8006fe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fea:	1813      	adds	r3, r2, r0
 8006fec:	2a01      	cmp	r2, #1
 8006fee:	4681      	mov	r9, r0
 8006ff0:	6123      	str	r3, [r4, #16]
 8006ff2:	dc02      	bgt.n	8006ffa <_printf_float+0x14e>
 8006ff4:	6822      	ldr	r2, [r4, #0]
 8006ff6:	07d1      	lsls	r1, r2, #31
 8006ff8:	d501      	bpl.n	8006ffe <_printf_float+0x152>
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	6123      	str	r3, [r4, #16]
 8006ffe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007002:	2b00      	cmp	r3, #0
 8007004:	d0a5      	beq.n	8006f52 <_printf_float+0xa6>
 8007006:	232d      	movs	r3, #45	; 0x2d
 8007008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800700c:	e7a1      	b.n	8006f52 <_printf_float+0xa6>
 800700e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007012:	f000 8177 	beq.w	8007304 <_printf_float+0x458>
 8007016:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800701a:	d1bb      	bne.n	8006f94 <_printf_float+0xe8>
 800701c:	2900      	cmp	r1, #0
 800701e:	d1b9      	bne.n	8006f94 <_printf_float+0xe8>
 8007020:	2301      	movs	r3, #1
 8007022:	e7b6      	b.n	8006f92 <_printf_float+0xe6>
 8007024:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007028:	d119      	bne.n	800705e <_printf_float+0x1b2>
 800702a:	2900      	cmp	r1, #0
 800702c:	6863      	ldr	r3, [r4, #4]
 800702e:	dd0c      	ble.n	800704a <_printf_float+0x19e>
 8007030:	6121      	str	r1, [r4, #16]
 8007032:	b913      	cbnz	r3, 800703a <_printf_float+0x18e>
 8007034:	6822      	ldr	r2, [r4, #0]
 8007036:	07d2      	lsls	r2, r2, #31
 8007038:	d502      	bpl.n	8007040 <_printf_float+0x194>
 800703a:	3301      	adds	r3, #1
 800703c:	440b      	add	r3, r1
 800703e:	6123      	str	r3, [r4, #16]
 8007040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007042:	65a3      	str	r3, [r4, #88]	; 0x58
 8007044:	f04f 0900 	mov.w	r9, #0
 8007048:	e7d9      	b.n	8006ffe <_printf_float+0x152>
 800704a:	b913      	cbnz	r3, 8007052 <_printf_float+0x1a6>
 800704c:	6822      	ldr	r2, [r4, #0]
 800704e:	07d0      	lsls	r0, r2, #31
 8007050:	d501      	bpl.n	8007056 <_printf_float+0x1aa>
 8007052:	3302      	adds	r3, #2
 8007054:	e7f3      	b.n	800703e <_printf_float+0x192>
 8007056:	2301      	movs	r3, #1
 8007058:	e7f1      	b.n	800703e <_printf_float+0x192>
 800705a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800705e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007062:	4293      	cmp	r3, r2
 8007064:	db05      	blt.n	8007072 <_printf_float+0x1c6>
 8007066:	6822      	ldr	r2, [r4, #0]
 8007068:	6123      	str	r3, [r4, #16]
 800706a:	07d1      	lsls	r1, r2, #31
 800706c:	d5e8      	bpl.n	8007040 <_printf_float+0x194>
 800706e:	3301      	adds	r3, #1
 8007070:	e7e5      	b.n	800703e <_printf_float+0x192>
 8007072:	2b00      	cmp	r3, #0
 8007074:	bfd4      	ite	le
 8007076:	f1c3 0302 	rsble	r3, r3, #2
 800707a:	2301      	movgt	r3, #1
 800707c:	4413      	add	r3, r2
 800707e:	e7de      	b.n	800703e <_printf_float+0x192>
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	055a      	lsls	r2, r3, #21
 8007084:	d407      	bmi.n	8007096 <_printf_float+0x1ea>
 8007086:	6923      	ldr	r3, [r4, #16]
 8007088:	4642      	mov	r2, r8
 800708a:	4631      	mov	r1, r6
 800708c:	4628      	mov	r0, r5
 800708e:	47b8      	blx	r7
 8007090:	3001      	adds	r0, #1
 8007092:	d12b      	bne.n	80070ec <_printf_float+0x240>
 8007094:	e767      	b.n	8006f66 <_printf_float+0xba>
 8007096:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800709a:	f240 80dc 	bls.w	8007256 <_printf_float+0x3aa>
 800709e:	2200      	movs	r2, #0
 80070a0:	2300      	movs	r3, #0
 80070a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070a6:	f7f9 fd17 	bl	8000ad8 <__aeabi_dcmpeq>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	d033      	beq.n	8007116 <_printf_float+0x26a>
 80070ae:	2301      	movs	r3, #1
 80070b0:	4a41      	ldr	r2, [pc, #260]	; (80071b8 <_printf_float+0x30c>)
 80070b2:	4631      	mov	r1, r6
 80070b4:	4628      	mov	r0, r5
 80070b6:	47b8      	blx	r7
 80070b8:	3001      	adds	r0, #1
 80070ba:	f43f af54 	beq.w	8006f66 <_printf_float+0xba>
 80070be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070c2:	429a      	cmp	r2, r3
 80070c4:	db02      	blt.n	80070cc <_printf_float+0x220>
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	07d8      	lsls	r0, r3, #31
 80070ca:	d50f      	bpl.n	80070ec <_printf_float+0x240>
 80070cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070d0:	4631      	mov	r1, r6
 80070d2:	4628      	mov	r0, r5
 80070d4:	47b8      	blx	r7
 80070d6:	3001      	adds	r0, #1
 80070d8:	f43f af45 	beq.w	8006f66 <_printf_float+0xba>
 80070dc:	f04f 0800 	mov.w	r8, #0
 80070e0:	f104 091a 	add.w	r9, r4, #26
 80070e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070e6:	3b01      	subs	r3, #1
 80070e8:	4543      	cmp	r3, r8
 80070ea:	dc09      	bgt.n	8007100 <_printf_float+0x254>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	079b      	lsls	r3, r3, #30
 80070f0:	f100 8103 	bmi.w	80072fa <_printf_float+0x44e>
 80070f4:	68e0      	ldr	r0, [r4, #12]
 80070f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070f8:	4298      	cmp	r0, r3
 80070fa:	bfb8      	it	lt
 80070fc:	4618      	movlt	r0, r3
 80070fe:	e734      	b.n	8006f6a <_printf_float+0xbe>
 8007100:	2301      	movs	r3, #1
 8007102:	464a      	mov	r2, r9
 8007104:	4631      	mov	r1, r6
 8007106:	4628      	mov	r0, r5
 8007108:	47b8      	blx	r7
 800710a:	3001      	adds	r0, #1
 800710c:	f43f af2b 	beq.w	8006f66 <_printf_float+0xba>
 8007110:	f108 0801 	add.w	r8, r8, #1
 8007114:	e7e6      	b.n	80070e4 <_printf_float+0x238>
 8007116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007118:	2b00      	cmp	r3, #0
 800711a:	dc2b      	bgt.n	8007174 <_printf_float+0x2c8>
 800711c:	2301      	movs	r3, #1
 800711e:	4a26      	ldr	r2, [pc, #152]	; (80071b8 <_printf_float+0x30c>)
 8007120:	4631      	mov	r1, r6
 8007122:	4628      	mov	r0, r5
 8007124:	47b8      	blx	r7
 8007126:	3001      	adds	r0, #1
 8007128:	f43f af1d 	beq.w	8006f66 <_printf_float+0xba>
 800712c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800712e:	b923      	cbnz	r3, 800713a <_printf_float+0x28e>
 8007130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007132:	b913      	cbnz	r3, 800713a <_printf_float+0x28e>
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	07d9      	lsls	r1, r3, #31
 8007138:	d5d8      	bpl.n	80070ec <_printf_float+0x240>
 800713a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800713e:	4631      	mov	r1, r6
 8007140:	4628      	mov	r0, r5
 8007142:	47b8      	blx	r7
 8007144:	3001      	adds	r0, #1
 8007146:	f43f af0e 	beq.w	8006f66 <_printf_float+0xba>
 800714a:	f04f 0900 	mov.w	r9, #0
 800714e:	f104 0a1a 	add.w	sl, r4, #26
 8007152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007154:	425b      	negs	r3, r3
 8007156:	454b      	cmp	r3, r9
 8007158:	dc01      	bgt.n	800715e <_printf_float+0x2b2>
 800715a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800715c:	e794      	b.n	8007088 <_printf_float+0x1dc>
 800715e:	2301      	movs	r3, #1
 8007160:	4652      	mov	r2, sl
 8007162:	4631      	mov	r1, r6
 8007164:	4628      	mov	r0, r5
 8007166:	47b8      	blx	r7
 8007168:	3001      	adds	r0, #1
 800716a:	f43f aefc 	beq.w	8006f66 <_printf_float+0xba>
 800716e:	f109 0901 	add.w	r9, r9, #1
 8007172:	e7ee      	b.n	8007152 <_printf_float+0x2a6>
 8007174:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007176:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007178:	429a      	cmp	r2, r3
 800717a:	bfa8      	it	ge
 800717c:	461a      	movge	r2, r3
 800717e:	2a00      	cmp	r2, #0
 8007180:	4691      	mov	r9, r2
 8007182:	dd07      	ble.n	8007194 <_printf_float+0x2e8>
 8007184:	4613      	mov	r3, r2
 8007186:	4631      	mov	r1, r6
 8007188:	4642      	mov	r2, r8
 800718a:	4628      	mov	r0, r5
 800718c:	47b8      	blx	r7
 800718e:	3001      	adds	r0, #1
 8007190:	f43f aee9 	beq.w	8006f66 <_printf_float+0xba>
 8007194:	f104 031a 	add.w	r3, r4, #26
 8007198:	f04f 0b00 	mov.w	fp, #0
 800719c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071a0:	9306      	str	r3, [sp, #24]
 80071a2:	e015      	b.n	80071d0 <_printf_float+0x324>
 80071a4:	7fefffff 	.word	0x7fefffff
 80071a8:	080090b4 	.word	0x080090b4
 80071ac:	080090b0 	.word	0x080090b0
 80071b0:	080090bc 	.word	0x080090bc
 80071b4:	080090b8 	.word	0x080090b8
 80071b8:	080090c0 	.word	0x080090c0
 80071bc:	2301      	movs	r3, #1
 80071be:	9a06      	ldr	r2, [sp, #24]
 80071c0:	4631      	mov	r1, r6
 80071c2:	4628      	mov	r0, r5
 80071c4:	47b8      	blx	r7
 80071c6:	3001      	adds	r0, #1
 80071c8:	f43f aecd 	beq.w	8006f66 <_printf_float+0xba>
 80071cc:	f10b 0b01 	add.w	fp, fp, #1
 80071d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80071d4:	ebaa 0309 	sub.w	r3, sl, r9
 80071d8:	455b      	cmp	r3, fp
 80071da:	dcef      	bgt.n	80071bc <_printf_float+0x310>
 80071dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071e0:	429a      	cmp	r2, r3
 80071e2:	44d0      	add	r8, sl
 80071e4:	db15      	blt.n	8007212 <_printf_float+0x366>
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	07da      	lsls	r2, r3, #31
 80071ea:	d412      	bmi.n	8007212 <_printf_float+0x366>
 80071ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071f0:	eba3 020a 	sub.w	r2, r3, sl
 80071f4:	eba3 0a01 	sub.w	sl, r3, r1
 80071f8:	4592      	cmp	sl, r2
 80071fa:	bfa8      	it	ge
 80071fc:	4692      	movge	sl, r2
 80071fe:	f1ba 0f00 	cmp.w	sl, #0
 8007202:	dc0e      	bgt.n	8007222 <_printf_float+0x376>
 8007204:	f04f 0800 	mov.w	r8, #0
 8007208:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800720c:	f104 091a 	add.w	r9, r4, #26
 8007210:	e019      	b.n	8007246 <_printf_float+0x39a>
 8007212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007216:	4631      	mov	r1, r6
 8007218:	4628      	mov	r0, r5
 800721a:	47b8      	blx	r7
 800721c:	3001      	adds	r0, #1
 800721e:	d1e5      	bne.n	80071ec <_printf_float+0x340>
 8007220:	e6a1      	b.n	8006f66 <_printf_float+0xba>
 8007222:	4653      	mov	r3, sl
 8007224:	4642      	mov	r2, r8
 8007226:	4631      	mov	r1, r6
 8007228:	4628      	mov	r0, r5
 800722a:	47b8      	blx	r7
 800722c:	3001      	adds	r0, #1
 800722e:	d1e9      	bne.n	8007204 <_printf_float+0x358>
 8007230:	e699      	b.n	8006f66 <_printf_float+0xba>
 8007232:	2301      	movs	r3, #1
 8007234:	464a      	mov	r2, r9
 8007236:	4631      	mov	r1, r6
 8007238:	4628      	mov	r0, r5
 800723a:	47b8      	blx	r7
 800723c:	3001      	adds	r0, #1
 800723e:	f43f ae92 	beq.w	8006f66 <_printf_float+0xba>
 8007242:	f108 0801 	add.w	r8, r8, #1
 8007246:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800724a:	1a9b      	subs	r3, r3, r2
 800724c:	eba3 030a 	sub.w	r3, r3, sl
 8007250:	4543      	cmp	r3, r8
 8007252:	dcee      	bgt.n	8007232 <_printf_float+0x386>
 8007254:	e74a      	b.n	80070ec <_printf_float+0x240>
 8007256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007258:	2a01      	cmp	r2, #1
 800725a:	dc01      	bgt.n	8007260 <_printf_float+0x3b4>
 800725c:	07db      	lsls	r3, r3, #31
 800725e:	d53a      	bpl.n	80072d6 <_printf_float+0x42a>
 8007260:	2301      	movs	r3, #1
 8007262:	4642      	mov	r2, r8
 8007264:	4631      	mov	r1, r6
 8007266:	4628      	mov	r0, r5
 8007268:	47b8      	blx	r7
 800726a:	3001      	adds	r0, #1
 800726c:	f43f ae7b 	beq.w	8006f66 <_printf_float+0xba>
 8007270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007274:	4631      	mov	r1, r6
 8007276:	4628      	mov	r0, r5
 8007278:	47b8      	blx	r7
 800727a:	3001      	adds	r0, #1
 800727c:	f108 0801 	add.w	r8, r8, #1
 8007280:	f43f ae71 	beq.w	8006f66 <_printf_float+0xba>
 8007284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007286:	2200      	movs	r2, #0
 8007288:	f103 3aff 	add.w	sl, r3, #4294967295
 800728c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007290:	2300      	movs	r3, #0
 8007292:	f7f9 fc21 	bl	8000ad8 <__aeabi_dcmpeq>
 8007296:	b9c8      	cbnz	r0, 80072cc <_printf_float+0x420>
 8007298:	4653      	mov	r3, sl
 800729a:	4642      	mov	r2, r8
 800729c:	4631      	mov	r1, r6
 800729e:	4628      	mov	r0, r5
 80072a0:	47b8      	blx	r7
 80072a2:	3001      	adds	r0, #1
 80072a4:	d10e      	bne.n	80072c4 <_printf_float+0x418>
 80072a6:	e65e      	b.n	8006f66 <_printf_float+0xba>
 80072a8:	2301      	movs	r3, #1
 80072aa:	4652      	mov	r2, sl
 80072ac:	4631      	mov	r1, r6
 80072ae:	4628      	mov	r0, r5
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	f43f ae57 	beq.w	8006f66 <_printf_float+0xba>
 80072b8:	f108 0801 	add.w	r8, r8, #1
 80072bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072be:	3b01      	subs	r3, #1
 80072c0:	4543      	cmp	r3, r8
 80072c2:	dcf1      	bgt.n	80072a8 <_printf_float+0x3fc>
 80072c4:	464b      	mov	r3, r9
 80072c6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072ca:	e6de      	b.n	800708a <_printf_float+0x1de>
 80072cc:	f04f 0800 	mov.w	r8, #0
 80072d0:	f104 0a1a 	add.w	sl, r4, #26
 80072d4:	e7f2      	b.n	80072bc <_printf_float+0x410>
 80072d6:	2301      	movs	r3, #1
 80072d8:	e7df      	b.n	800729a <_printf_float+0x3ee>
 80072da:	2301      	movs	r3, #1
 80072dc:	464a      	mov	r2, r9
 80072de:	4631      	mov	r1, r6
 80072e0:	4628      	mov	r0, r5
 80072e2:	47b8      	blx	r7
 80072e4:	3001      	adds	r0, #1
 80072e6:	f43f ae3e 	beq.w	8006f66 <_printf_float+0xba>
 80072ea:	f108 0801 	add.w	r8, r8, #1
 80072ee:	68e3      	ldr	r3, [r4, #12]
 80072f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072f2:	1a9b      	subs	r3, r3, r2
 80072f4:	4543      	cmp	r3, r8
 80072f6:	dcf0      	bgt.n	80072da <_printf_float+0x42e>
 80072f8:	e6fc      	b.n	80070f4 <_printf_float+0x248>
 80072fa:	f04f 0800 	mov.w	r8, #0
 80072fe:	f104 0919 	add.w	r9, r4, #25
 8007302:	e7f4      	b.n	80072ee <_printf_float+0x442>
 8007304:	2900      	cmp	r1, #0
 8007306:	f43f ae8b 	beq.w	8007020 <_printf_float+0x174>
 800730a:	2300      	movs	r3, #0
 800730c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007310:	ab09      	add	r3, sp, #36	; 0x24
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	ec49 8b10 	vmov	d0, r8, r9
 8007318:	6022      	str	r2, [r4, #0]
 800731a:	f8cd a004 	str.w	sl, [sp, #4]
 800731e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007322:	4628      	mov	r0, r5
 8007324:	f7ff fd2e 	bl	8006d84 <__cvt>
 8007328:	4680      	mov	r8, r0
 800732a:	e648      	b.n	8006fbe <_printf_float+0x112>

0800732c <_printf_common>:
 800732c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007330:	4691      	mov	r9, r2
 8007332:	461f      	mov	r7, r3
 8007334:	688a      	ldr	r2, [r1, #8]
 8007336:	690b      	ldr	r3, [r1, #16]
 8007338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800733c:	4293      	cmp	r3, r2
 800733e:	bfb8      	it	lt
 8007340:	4613      	movlt	r3, r2
 8007342:	f8c9 3000 	str.w	r3, [r9]
 8007346:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800734a:	4606      	mov	r6, r0
 800734c:	460c      	mov	r4, r1
 800734e:	b112      	cbz	r2, 8007356 <_printf_common+0x2a>
 8007350:	3301      	adds	r3, #1
 8007352:	f8c9 3000 	str.w	r3, [r9]
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	0699      	lsls	r1, r3, #26
 800735a:	bf42      	ittt	mi
 800735c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007360:	3302      	addmi	r3, #2
 8007362:	f8c9 3000 	strmi.w	r3, [r9]
 8007366:	6825      	ldr	r5, [r4, #0]
 8007368:	f015 0506 	ands.w	r5, r5, #6
 800736c:	d107      	bne.n	800737e <_printf_common+0x52>
 800736e:	f104 0a19 	add.w	sl, r4, #25
 8007372:	68e3      	ldr	r3, [r4, #12]
 8007374:	f8d9 2000 	ldr.w	r2, [r9]
 8007378:	1a9b      	subs	r3, r3, r2
 800737a:	42ab      	cmp	r3, r5
 800737c:	dc28      	bgt.n	80073d0 <_printf_common+0xa4>
 800737e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007382:	6822      	ldr	r2, [r4, #0]
 8007384:	3300      	adds	r3, #0
 8007386:	bf18      	it	ne
 8007388:	2301      	movne	r3, #1
 800738a:	0692      	lsls	r2, r2, #26
 800738c:	d42d      	bmi.n	80073ea <_printf_common+0xbe>
 800738e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007392:	4639      	mov	r1, r7
 8007394:	4630      	mov	r0, r6
 8007396:	47c0      	blx	r8
 8007398:	3001      	adds	r0, #1
 800739a:	d020      	beq.n	80073de <_printf_common+0xb2>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	68e5      	ldr	r5, [r4, #12]
 80073a0:	f8d9 2000 	ldr.w	r2, [r9]
 80073a4:	f003 0306 	and.w	r3, r3, #6
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	bf08      	it	eq
 80073ac:	1aad      	subeq	r5, r5, r2
 80073ae:	68a3      	ldr	r3, [r4, #8]
 80073b0:	6922      	ldr	r2, [r4, #16]
 80073b2:	bf0c      	ite	eq
 80073b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073b8:	2500      	movne	r5, #0
 80073ba:	4293      	cmp	r3, r2
 80073bc:	bfc4      	itt	gt
 80073be:	1a9b      	subgt	r3, r3, r2
 80073c0:	18ed      	addgt	r5, r5, r3
 80073c2:	f04f 0900 	mov.w	r9, #0
 80073c6:	341a      	adds	r4, #26
 80073c8:	454d      	cmp	r5, r9
 80073ca:	d11a      	bne.n	8007402 <_printf_common+0xd6>
 80073cc:	2000      	movs	r0, #0
 80073ce:	e008      	b.n	80073e2 <_printf_common+0xb6>
 80073d0:	2301      	movs	r3, #1
 80073d2:	4652      	mov	r2, sl
 80073d4:	4639      	mov	r1, r7
 80073d6:	4630      	mov	r0, r6
 80073d8:	47c0      	blx	r8
 80073da:	3001      	adds	r0, #1
 80073dc:	d103      	bne.n	80073e6 <_printf_common+0xba>
 80073de:	f04f 30ff 	mov.w	r0, #4294967295
 80073e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e6:	3501      	adds	r5, #1
 80073e8:	e7c3      	b.n	8007372 <_printf_common+0x46>
 80073ea:	18e1      	adds	r1, r4, r3
 80073ec:	1c5a      	adds	r2, r3, #1
 80073ee:	2030      	movs	r0, #48	; 0x30
 80073f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073f4:	4422      	add	r2, r4
 80073f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073fe:	3302      	adds	r3, #2
 8007400:	e7c5      	b.n	800738e <_printf_common+0x62>
 8007402:	2301      	movs	r3, #1
 8007404:	4622      	mov	r2, r4
 8007406:	4639      	mov	r1, r7
 8007408:	4630      	mov	r0, r6
 800740a:	47c0      	blx	r8
 800740c:	3001      	adds	r0, #1
 800740e:	d0e6      	beq.n	80073de <_printf_common+0xb2>
 8007410:	f109 0901 	add.w	r9, r9, #1
 8007414:	e7d8      	b.n	80073c8 <_printf_common+0x9c>
	...

08007418 <_printf_i>:
 8007418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800741c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007420:	460c      	mov	r4, r1
 8007422:	7e09      	ldrb	r1, [r1, #24]
 8007424:	b085      	sub	sp, #20
 8007426:	296e      	cmp	r1, #110	; 0x6e
 8007428:	4617      	mov	r7, r2
 800742a:	4606      	mov	r6, r0
 800742c:	4698      	mov	r8, r3
 800742e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007430:	f000 80b3 	beq.w	800759a <_printf_i+0x182>
 8007434:	d822      	bhi.n	800747c <_printf_i+0x64>
 8007436:	2963      	cmp	r1, #99	; 0x63
 8007438:	d036      	beq.n	80074a8 <_printf_i+0x90>
 800743a:	d80a      	bhi.n	8007452 <_printf_i+0x3a>
 800743c:	2900      	cmp	r1, #0
 800743e:	f000 80b9 	beq.w	80075b4 <_printf_i+0x19c>
 8007442:	2958      	cmp	r1, #88	; 0x58
 8007444:	f000 8083 	beq.w	800754e <_printf_i+0x136>
 8007448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800744c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007450:	e032      	b.n	80074b8 <_printf_i+0xa0>
 8007452:	2964      	cmp	r1, #100	; 0x64
 8007454:	d001      	beq.n	800745a <_printf_i+0x42>
 8007456:	2969      	cmp	r1, #105	; 0x69
 8007458:	d1f6      	bne.n	8007448 <_printf_i+0x30>
 800745a:	6820      	ldr	r0, [r4, #0]
 800745c:	6813      	ldr	r3, [r2, #0]
 800745e:	0605      	lsls	r5, r0, #24
 8007460:	f103 0104 	add.w	r1, r3, #4
 8007464:	d52a      	bpl.n	80074bc <_printf_i+0xa4>
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6011      	str	r1, [r2, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	da03      	bge.n	8007476 <_printf_i+0x5e>
 800746e:	222d      	movs	r2, #45	; 0x2d
 8007470:	425b      	negs	r3, r3
 8007472:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007476:	486f      	ldr	r0, [pc, #444]	; (8007634 <_printf_i+0x21c>)
 8007478:	220a      	movs	r2, #10
 800747a:	e039      	b.n	80074f0 <_printf_i+0xd8>
 800747c:	2973      	cmp	r1, #115	; 0x73
 800747e:	f000 809d 	beq.w	80075bc <_printf_i+0x1a4>
 8007482:	d808      	bhi.n	8007496 <_printf_i+0x7e>
 8007484:	296f      	cmp	r1, #111	; 0x6f
 8007486:	d020      	beq.n	80074ca <_printf_i+0xb2>
 8007488:	2970      	cmp	r1, #112	; 0x70
 800748a:	d1dd      	bne.n	8007448 <_printf_i+0x30>
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	f043 0320 	orr.w	r3, r3, #32
 8007492:	6023      	str	r3, [r4, #0]
 8007494:	e003      	b.n	800749e <_printf_i+0x86>
 8007496:	2975      	cmp	r1, #117	; 0x75
 8007498:	d017      	beq.n	80074ca <_printf_i+0xb2>
 800749a:	2978      	cmp	r1, #120	; 0x78
 800749c:	d1d4      	bne.n	8007448 <_printf_i+0x30>
 800749e:	2378      	movs	r3, #120	; 0x78
 80074a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074a4:	4864      	ldr	r0, [pc, #400]	; (8007638 <_printf_i+0x220>)
 80074a6:	e055      	b.n	8007554 <_printf_i+0x13c>
 80074a8:	6813      	ldr	r3, [r2, #0]
 80074aa:	1d19      	adds	r1, r3, #4
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6011      	str	r1, [r2, #0]
 80074b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074b8:	2301      	movs	r3, #1
 80074ba:	e08c      	b.n	80075d6 <_printf_i+0x1be>
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6011      	str	r1, [r2, #0]
 80074c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074c4:	bf18      	it	ne
 80074c6:	b21b      	sxthne	r3, r3
 80074c8:	e7cf      	b.n	800746a <_printf_i+0x52>
 80074ca:	6813      	ldr	r3, [r2, #0]
 80074cc:	6825      	ldr	r5, [r4, #0]
 80074ce:	1d18      	adds	r0, r3, #4
 80074d0:	6010      	str	r0, [r2, #0]
 80074d2:	0628      	lsls	r0, r5, #24
 80074d4:	d501      	bpl.n	80074da <_printf_i+0xc2>
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	e002      	b.n	80074e0 <_printf_i+0xc8>
 80074da:	0668      	lsls	r0, r5, #25
 80074dc:	d5fb      	bpl.n	80074d6 <_printf_i+0xbe>
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	4854      	ldr	r0, [pc, #336]	; (8007634 <_printf_i+0x21c>)
 80074e2:	296f      	cmp	r1, #111	; 0x6f
 80074e4:	bf14      	ite	ne
 80074e6:	220a      	movne	r2, #10
 80074e8:	2208      	moveq	r2, #8
 80074ea:	2100      	movs	r1, #0
 80074ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074f0:	6865      	ldr	r5, [r4, #4]
 80074f2:	60a5      	str	r5, [r4, #8]
 80074f4:	2d00      	cmp	r5, #0
 80074f6:	f2c0 8095 	blt.w	8007624 <_printf_i+0x20c>
 80074fa:	6821      	ldr	r1, [r4, #0]
 80074fc:	f021 0104 	bic.w	r1, r1, #4
 8007500:	6021      	str	r1, [r4, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d13d      	bne.n	8007582 <_printf_i+0x16a>
 8007506:	2d00      	cmp	r5, #0
 8007508:	f040 808e 	bne.w	8007628 <_printf_i+0x210>
 800750c:	4665      	mov	r5, ip
 800750e:	2a08      	cmp	r2, #8
 8007510:	d10b      	bne.n	800752a <_printf_i+0x112>
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	07db      	lsls	r3, r3, #31
 8007516:	d508      	bpl.n	800752a <_printf_i+0x112>
 8007518:	6923      	ldr	r3, [r4, #16]
 800751a:	6862      	ldr	r2, [r4, #4]
 800751c:	429a      	cmp	r2, r3
 800751e:	bfde      	ittt	le
 8007520:	2330      	movle	r3, #48	; 0x30
 8007522:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007526:	f105 35ff 	addle.w	r5, r5, #4294967295
 800752a:	ebac 0305 	sub.w	r3, ip, r5
 800752e:	6123      	str	r3, [r4, #16]
 8007530:	f8cd 8000 	str.w	r8, [sp]
 8007534:	463b      	mov	r3, r7
 8007536:	aa03      	add	r2, sp, #12
 8007538:	4621      	mov	r1, r4
 800753a:	4630      	mov	r0, r6
 800753c:	f7ff fef6 	bl	800732c <_printf_common>
 8007540:	3001      	adds	r0, #1
 8007542:	d14d      	bne.n	80075e0 <_printf_i+0x1c8>
 8007544:	f04f 30ff 	mov.w	r0, #4294967295
 8007548:	b005      	add	sp, #20
 800754a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800754e:	4839      	ldr	r0, [pc, #228]	; (8007634 <_printf_i+0x21c>)
 8007550:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007554:	6813      	ldr	r3, [r2, #0]
 8007556:	6821      	ldr	r1, [r4, #0]
 8007558:	1d1d      	adds	r5, r3, #4
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6015      	str	r5, [r2, #0]
 800755e:	060a      	lsls	r2, r1, #24
 8007560:	d50b      	bpl.n	800757a <_printf_i+0x162>
 8007562:	07ca      	lsls	r2, r1, #31
 8007564:	bf44      	itt	mi
 8007566:	f041 0120 	orrmi.w	r1, r1, #32
 800756a:	6021      	strmi	r1, [r4, #0]
 800756c:	b91b      	cbnz	r3, 8007576 <_printf_i+0x15e>
 800756e:	6822      	ldr	r2, [r4, #0]
 8007570:	f022 0220 	bic.w	r2, r2, #32
 8007574:	6022      	str	r2, [r4, #0]
 8007576:	2210      	movs	r2, #16
 8007578:	e7b7      	b.n	80074ea <_printf_i+0xd2>
 800757a:	064d      	lsls	r5, r1, #25
 800757c:	bf48      	it	mi
 800757e:	b29b      	uxthmi	r3, r3
 8007580:	e7ef      	b.n	8007562 <_printf_i+0x14a>
 8007582:	4665      	mov	r5, ip
 8007584:	fbb3 f1f2 	udiv	r1, r3, r2
 8007588:	fb02 3311 	mls	r3, r2, r1, r3
 800758c:	5cc3      	ldrb	r3, [r0, r3]
 800758e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007592:	460b      	mov	r3, r1
 8007594:	2900      	cmp	r1, #0
 8007596:	d1f5      	bne.n	8007584 <_printf_i+0x16c>
 8007598:	e7b9      	b.n	800750e <_printf_i+0xf6>
 800759a:	6813      	ldr	r3, [r2, #0]
 800759c:	6825      	ldr	r5, [r4, #0]
 800759e:	6961      	ldr	r1, [r4, #20]
 80075a0:	1d18      	adds	r0, r3, #4
 80075a2:	6010      	str	r0, [r2, #0]
 80075a4:	0628      	lsls	r0, r5, #24
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	d501      	bpl.n	80075ae <_printf_i+0x196>
 80075aa:	6019      	str	r1, [r3, #0]
 80075ac:	e002      	b.n	80075b4 <_printf_i+0x19c>
 80075ae:	066a      	lsls	r2, r5, #25
 80075b0:	d5fb      	bpl.n	80075aa <_printf_i+0x192>
 80075b2:	8019      	strh	r1, [r3, #0]
 80075b4:	2300      	movs	r3, #0
 80075b6:	6123      	str	r3, [r4, #16]
 80075b8:	4665      	mov	r5, ip
 80075ba:	e7b9      	b.n	8007530 <_printf_i+0x118>
 80075bc:	6813      	ldr	r3, [r2, #0]
 80075be:	1d19      	adds	r1, r3, #4
 80075c0:	6011      	str	r1, [r2, #0]
 80075c2:	681d      	ldr	r5, [r3, #0]
 80075c4:	6862      	ldr	r2, [r4, #4]
 80075c6:	2100      	movs	r1, #0
 80075c8:	4628      	mov	r0, r5
 80075ca:	f7f8 fe11 	bl	80001f0 <memchr>
 80075ce:	b108      	cbz	r0, 80075d4 <_printf_i+0x1bc>
 80075d0:	1b40      	subs	r0, r0, r5
 80075d2:	6060      	str	r0, [r4, #4]
 80075d4:	6863      	ldr	r3, [r4, #4]
 80075d6:	6123      	str	r3, [r4, #16]
 80075d8:	2300      	movs	r3, #0
 80075da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075de:	e7a7      	b.n	8007530 <_printf_i+0x118>
 80075e0:	6923      	ldr	r3, [r4, #16]
 80075e2:	462a      	mov	r2, r5
 80075e4:	4639      	mov	r1, r7
 80075e6:	4630      	mov	r0, r6
 80075e8:	47c0      	blx	r8
 80075ea:	3001      	adds	r0, #1
 80075ec:	d0aa      	beq.n	8007544 <_printf_i+0x12c>
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	079b      	lsls	r3, r3, #30
 80075f2:	d413      	bmi.n	800761c <_printf_i+0x204>
 80075f4:	68e0      	ldr	r0, [r4, #12]
 80075f6:	9b03      	ldr	r3, [sp, #12]
 80075f8:	4298      	cmp	r0, r3
 80075fa:	bfb8      	it	lt
 80075fc:	4618      	movlt	r0, r3
 80075fe:	e7a3      	b.n	8007548 <_printf_i+0x130>
 8007600:	2301      	movs	r3, #1
 8007602:	464a      	mov	r2, r9
 8007604:	4639      	mov	r1, r7
 8007606:	4630      	mov	r0, r6
 8007608:	47c0      	blx	r8
 800760a:	3001      	adds	r0, #1
 800760c:	d09a      	beq.n	8007544 <_printf_i+0x12c>
 800760e:	3501      	adds	r5, #1
 8007610:	68e3      	ldr	r3, [r4, #12]
 8007612:	9a03      	ldr	r2, [sp, #12]
 8007614:	1a9b      	subs	r3, r3, r2
 8007616:	42ab      	cmp	r3, r5
 8007618:	dcf2      	bgt.n	8007600 <_printf_i+0x1e8>
 800761a:	e7eb      	b.n	80075f4 <_printf_i+0x1dc>
 800761c:	2500      	movs	r5, #0
 800761e:	f104 0919 	add.w	r9, r4, #25
 8007622:	e7f5      	b.n	8007610 <_printf_i+0x1f8>
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1ac      	bne.n	8007582 <_printf_i+0x16a>
 8007628:	7803      	ldrb	r3, [r0, #0]
 800762a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800762e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007632:	e76c      	b.n	800750e <_printf_i+0xf6>
 8007634:	080090c2 	.word	0x080090c2
 8007638:	080090d3 	.word	0x080090d3

0800763c <siprintf>:
 800763c:	b40e      	push	{r1, r2, r3}
 800763e:	b500      	push	{lr}
 8007640:	b09c      	sub	sp, #112	; 0x70
 8007642:	ab1d      	add	r3, sp, #116	; 0x74
 8007644:	9002      	str	r0, [sp, #8]
 8007646:	9006      	str	r0, [sp, #24]
 8007648:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800764c:	4809      	ldr	r0, [pc, #36]	; (8007674 <siprintf+0x38>)
 800764e:	9107      	str	r1, [sp, #28]
 8007650:	9104      	str	r1, [sp, #16]
 8007652:	4909      	ldr	r1, [pc, #36]	; (8007678 <siprintf+0x3c>)
 8007654:	f853 2b04 	ldr.w	r2, [r3], #4
 8007658:	9105      	str	r1, [sp, #20]
 800765a:	6800      	ldr	r0, [r0, #0]
 800765c:	9301      	str	r3, [sp, #4]
 800765e:	a902      	add	r1, sp, #8
 8007660:	f001 fa5e 	bl	8008b20 <_svfiprintf_r>
 8007664:	9b02      	ldr	r3, [sp, #8]
 8007666:	2200      	movs	r2, #0
 8007668:	701a      	strb	r2, [r3, #0]
 800766a:	b01c      	add	sp, #112	; 0x70
 800766c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007670:	b003      	add	sp, #12
 8007672:	4770      	bx	lr
 8007674:	20000020 	.word	0x20000020
 8007678:	ffff0208 	.word	0xffff0208

0800767c <quorem>:
 800767c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007680:	6903      	ldr	r3, [r0, #16]
 8007682:	690c      	ldr	r4, [r1, #16]
 8007684:	42a3      	cmp	r3, r4
 8007686:	4680      	mov	r8, r0
 8007688:	f2c0 8082 	blt.w	8007790 <quorem+0x114>
 800768c:	3c01      	subs	r4, #1
 800768e:	f101 0714 	add.w	r7, r1, #20
 8007692:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007696:	f100 0614 	add.w	r6, r0, #20
 800769a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800769e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80076a2:	eb06 030c 	add.w	r3, r6, ip
 80076a6:	3501      	adds	r5, #1
 80076a8:	eb07 090c 	add.w	r9, r7, ip
 80076ac:	9301      	str	r3, [sp, #4]
 80076ae:	fbb0 f5f5 	udiv	r5, r0, r5
 80076b2:	b395      	cbz	r5, 800771a <quorem+0x9e>
 80076b4:	f04f 0a00 	mov.w	sl, #0
 80076b8:	4638      	mov	r0, r7
 80076ba:	46b6      	mov	lr, r6
 80076bc:	46d3      	mov	fp, sl
 80076be:	f850 2b04 	ldr.w	r2, [r0], #4
 80076c2:	b293      	uxth	r3, r2
 80076c4:	fb05 a303 	mla	r3, r5, r3, sl
 80076c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	ebab 0303 	sub.w	r3, fp, r3
 80076d2:	0c12      	lsrs	r2, r2, #16
 80076d4:	f8de b000 	ldr.w	fp, [lr]
 80076d8:	fb05 a202 	mla	r2, r5, r2, sl
 80076dc:	fa13 f38b 	uxtah	r3, r3, fp
 80076e0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80076e4:	fa1f fb82 	uxth.w	fp, r2
 80076e8:	f8de 2000 	ldr.w	r2, [lr]
 80076ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80076f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076fa:	4581      	cmp	r9, r0
 80076fc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007700:	f84e 3b04 	str.w	r3, [lr], #4
 8007704:	d2db      	bcs.n	80076be <quorem+0x42>
 8007706:	f856 300c 	ldr.w	r3, [r6, ip]
 800770a:	b933      	cbnz	r3, 800771a <quorem+0x9e>
 800770c:	9b01      	ldr	r3, [sp, #4]
 800770e:	3b04      	subs	r3, #4
 8007710:	429e      	cmp	r6, r3
 8007712:	461a      	mov	r2, r3
 8007714:	d330      	bcc.n	8007778 <quorem+0xfc>
 8007716:	f8c8 4010 	str.w	r4, [r8, #16]
 800771a:	4640      	mov	r0, r8
 800771c:	f001 f82a 	bl	8008774 <__mcmp>
 8007720:	2800      	cmp	r0, #0
 8007722:	db25      	blt.n	8007770 <quorem+0xf4>
 8007724:	3501      	adds	r5, #1
 8007726:	4630      	mov	r0, r6
 8007728:	f04f 0c00 	mov.w	ip, #0
 800772c:	f857 2b04 	ldr.w	r2, [r7], #4
 8007730:	f8d0 e000 	ldr.w	lr, [r0]
 8007734:	b293      	uxth	r3, r2
 8007736:	ebac 0303 	sub.w	r3, ip, r3
 800773a:	0c12      	lsrs	r2, r2, #16
 800773c:	fa13 f38e 	uxtah	r3, r3, lr
 8007740:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007744:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007748:	b29b      	uxth	r3, r3
 800774a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800774e:	45b9      	cmp	r9, r7
 8007750:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007754:	f840 3b04 	str.w	r3, [r0], #4
 8007758:	d2e8      	bcs.n	800772c <quorem+0xb0>
 800775a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800775e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007762:	b92a      	cbnz	r2, 8007770 <quorem+0xf4>
 8007764:	3b04      	subs	r3, #4
 8007766:	429e      	cmp	r6, r3
 8007768:	461a      	mov	r2, r3
 800776a:	d30b      	bcc.n	8007784 <quorem+0x108>
 800776c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007770:	4628      	mov	r0, r5
 8007772:	b003      	add	sp, #12
 8007774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007778:	6812      	ldr	r2, [r2, #0]
 800777a:	3b04      	subs	r3, #4
 800777c:	2a00      	cmp	r2, #0
 800777e:	d1ca      	bne.n	8007716 <quorem+0x9a>
 8007780:	3c01      	subs	r4, #1
 8007782:	e7c5      	b.n	8007710 <quorem+0x94>
 8007784:	6812      	ldr	r2, [r2, #0]
 8007786:	3b04      	subs	r3, #4
 8007788:	2a00      	cmp	r2, #0
 800778a:	d1ef      	bne.n	800776c <quorem+0xf0>
 800778c:	3c01      	subs	r4, #1
 800778e:	e7ea      	b.n	8007766 <quorem+0xea>
 8007790:	2000      	movs	r0, #0
 8007792:	e7ee      	b.n	8007772 <quorem+0xf6>
 8007794:	0000      	movs	r0, r0
	...

08007798 <_dtoa_r>:
 8007798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779c:	ec57 6b10 	vmov	r6, r7, d0
 80077a0:	b097      	sub	sp, #92	; 0x5c
 80077a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80077a4:	9106      	str	r1, [sp, #24]
 80077a6:	4604      	mov	r4, r0
 80077a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80077aa:	9312      	str	r3, [sp, #72]	; 0x48
 80077ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80077b0:	e9cd 6700 	strd	r6, r7, [sp]
 80077b4:	b93d      	cbnz	r5, 80077c6 <_dtoa_r+0x2e>
 80077b6:	2010      	movs	r0, #16
 80077b8:	f000 fdb4 	bl	8008324 <malloc>
 80077bc:	6260      	str	r0, [r4, #36]	; 0x24
 80077be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077c2:	6005      	str	r5, [r0, #0]
 80077c4:	60c5      	str	r5, [r0, #12]
 80077c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077c8:	6819      	ldr	r1, [r3, #0]
 80077ca:	b151      	cbz	r1, 80077e2 <_dtoa_r+0x4a>
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	604a      	str	r2, [r1, #4]
 80077d0:	2301      	movs	r3, #1
 80077d2:	4093      	lsls	r3, r2
 80077d4:	608b      	str	r3, [r1, #8]
 80077d6:	4620      	mov	r0, r4
 80077d8:	f000 fdeb 	bl	80083b2 <_Bfree>
 80077dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077de:	2200      	movs	r2, #0
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	1e3b      	subs	r3, r7, #0
 80077e4:	bfbb      	ittet	lt
 80077e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077ea:	9301      	strlt	r3, [sp, #4]
 80077ec:	2300      	movge	r3, #0
 80077ee:	2201      	movlt	r2, #1
 80077f0:	bfac      	ite	ge
 80077f2:	f8c8 3000 	strge.w	r3, [r8]
 80077f6:	f8c8 2000 	strlt.w	r2, [r8]
 80077fa:	4baf      	ldr	r3, [pc, #700]	; (8007ab8 <_dtoa_r+0x320>)
 80077fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007800:	ea33 0308 	bics.w	r3, r3, r8
 8007804:	d114      	bne.n	8007830 <_dtoa_r+0x98>
 8007806:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007808:	f242 730f 	movw	r3, #9999	; 0x270f
 800780c:	6013      	str	r3, [r2, #0]
 800780e:	9b00      	ldr	r3, [sp, #0]
 8007810:	b923      	cbnz	r3, 800781c <_dtoa_r+0x84>
 8007812:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007816:	2800      	cmp	r0, #0
 8007818:	f000 8542 	beq.w	80082a0 <_dtoa_r+0xb08>
 800781c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800781e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007acc <_dtoa_r+0x334>
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 8544 	beq.w	80082b0 <_dtoa_r+0xb18>
 8007828:	f10b 0303 	add.w	r3, fp, #3
 800782c:	f000 bd3e 	b.w	80082ac <_dtoa_r+0xb14>
 8007830:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007834:	2200      	movs	r2, #0
 8007836:	2300      	movs	r3, #0
 8007838:	4630      	mov	r0, r6
 800783a:	4639      	mov	r1, r7
 800783c:	f7f9 f94c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007840:	4681      	mov	r9, r0
 8007842:	b168      	cbz	r0, 8007860 <_dtoa_r+0xc8>
 8007844:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007846:	2301      	movs	r3, #1
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 8524 	beq.w	800829a <_dtoa_r+0xb02>
 8007852:	4b9a      	ldr	r3, [pc, #616]	; (8007abc <_dtoa_r+0x324>)
 8007854:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007856:	f103 3bff 	add.w	fp, r3, #4294967295
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	f000 bd28 	b.w	80082b0 <_dtoa_r+0xb18>
 8007860:	aa14      	add	r2, sp, #80	; 0x50
 8007862:	a915      	add	r1, sp, #84	; 0x54
 8007864:	ec47 6b10 	vmov	d0, r6, r7
 8007868:	4620      	mov	r0, r4
 800786a:	f000 fffa 	bl	8008862 <__d2b>
 800786e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007872:	9004      	str	r0, [sp, #16]
 8007874:	2d00      	cmp	r5, #0
 8007876:	d07c      	beq.n	8007972 <_dtoa_r+0x1da>
 8007878:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800787c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007880:	46b2      	mov	sl, r6
 8007882:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007886:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800788a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800788e:	2200      	movs	r2, #0
 8007890:	4b8b      	ldr	r3, [pc, #556]	; (8007ac0 <_dtoa_r+0x328>)
 8007892:	4650      	mov	r0, sl
 8007894:	4659      	mov	r1, fp
 8007896:	f7f8 fcff 	bl	8000298 <__aeabi_dsub>
 800789a:	a381      	add	r3, pc, #516	; (adr r3, 8007aa0 <_dtoa_r+0x308>)
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f7f8 feb2 	bl	8000608 <__aeabi_dmul>
 80078a4:	a380      	add	r3, pc, #512	; (adr r3, 8007aa8 <_dtoa_r+0x310>)
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f7f8 fcf7 	bl	800029c <__adddf3>
 80078ae:	4606      	mov	r6, r0
 80078b0:	4628      	mov	r0, r5
 80078b2:	460f      	mov	r7, r1
 80078b4:	f7f8 fe3e 	bl	8000534 <__aeabi_i2d>
 80078b8:	a37d      	add	r3, pc, #500	; (adr r3, 8007ab0 <_dtoa_r+0x318>)
 80078ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078be:	f7f8 fea3 	bl	8000608 <__aeabi_dmul>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4630      	mov	r0, r6
 80078c8:	4639      	mov	r1, r7
 80078ca:	f7f8 fce7 	bl	800029c <__adddf3>
 80078ce:	4606      	mov	r6, r0
 80078d0:	460f      	mov	r7, r1
 80078d2:	f7f9 f949 	bl	8000b68 <__aeabi_d2iz>
 80078d6:	2200      	movs	r2, #0
 80078d8:	4682      	mov	sl, r0
 80078da:	2300      	movs	r3, #0
 80078dc:	4630      	mov	r0, r6
 80078de:	4639      	mov	r1, r7
 80078e0:	f7f9 f904 	bl	8000aec <__aeabi_dcmplt>
 80078e4:	b148      	cbz	r0, 80078fa <_dtoa_r+0x162>
 80078e6:	4650      	mov	r0, sl
 80078e8:	f7f8 fe24 	bl	8000534 <__aeabi_i2d>
 80078ec:	4632      	mov	r2, r6
 80078ee:	463b      	mov	r3, r7
 80078f0:	f7f9 f8f2 	bl	8000ad8 <__aeabi_dcmpeq>
 80078f4:	b908      	cbnz	r0, 80078fa <_dtoa_r+0x162>
 80078f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078fa:	f1ba 0f16 	cmp.w	sl, #22
 80078fe:	d859      	bhi.n	80079b4 <_dtoa_r+0x21c>
 8007900:	4970      	ldr	r1, [pc, #448]	; (8007ac4 <_dtoa_r+0x32c>)
 8007902:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007906:	e9dd 2300 	ldrd	r2, r3, [sp]
 800790a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800790e:	f7f9 f90b 	bl	8000b28 <__aeabi_dcmpgt>
 8007912:	2800      	cmp	r0, #0
 8007914:	d050      	beq.n	80079b8 <_dtoa_r+0x220>
 8007916:	f10a 3aff 	add.w	sl, sl, #4294967295
 800791a:	2300      	movs	r3, #0
 800791c:	930f      	str	r3, [sp, #60]	; 0x3c
 800791e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007920:	1b5d      	subs	r5, r3, r5
 8007922:	f1b5 0801 	subs.w	r8, r5, #1
 8007926:	bf49      	itett	mi
 8007928:	f1c5 0301 	rsbmi	r3, r5, #1
 800792c:	2300      	movpl	r3, #0
 800792e:	9305      	strmi	r3, [sp, #20]
 8007930:	f04f 0800 	movmi.w	r8, #0
 8007934:	bf58      	it	pl
 8007936:	9305      	strpl	r3, [sp, #20]
 8007938:	f1ba 0f00 	cmp.w	sl, #0
 800793c:	db3e      	blt.n	80079bc <_dtoa_r+0x224>
 800793e:	2300      	movs	r3, #0
 8007940:	44d0      	add	r8, sl
 8007942:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007946:	9307      	str	r3, [sp, #28]
 8007948:	9b06      	ldr	r3, [sp, #24]
 800794a:	2b09      	cmp	r3, #9
 800794c:	f200 8090 	bhi.w	8007a70 <_dtoa_r+0x2d8>
 8007950:	2b05      	cmp	r3, #5
 8007952:	bfc4      	itt	gt
 8007954:	3b04      	subgt	r3, #4
 8007956:	9306      	strgt	r3, [sp, #24]
 8007958:	9b06      	ldr	r3, [sp, #24]
 800795a:	f1a3 0302 	sub.w	r3, r3, #2
 800795e:	bfcc      	ite	gt
 8007960:	2500      	movgt	r5, #0
 8007962:	2501      	movle	r5, #1
 8007964:	2b03      	cmp	r3, #3
 8007966:	f200 808f 	bhi.w	8007a88 <_dtoa_r+0x2f0>
 800796a:	e8df f003 	tbb	[pc, r3]
 800796e:	7f7d      	.short	0x7f7d
 8007970:	7131      	.short	0x7131
 8007972:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007976:	441d      	add	r5, r3
 8007978:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800797c:	2820      	cmp	r0, #32
 800797e:	dd13      	ble.n	80079a8 <_dtoa_r+0x210>
 8007980:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007984:	9b00      	ldr	r3, [sp, #0]
 8007986:	fa08 f800 	lsl.w	r8, r8, r0
 800798a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800798e:	fa23 f000 	lsr.w	r0, r3, r0
 8007992:	ea48 0000 	orr.w	r0, r8, r0
 8007996:	f7f8 fdbd 	bl	8000514 <__aeabi_ui2d>
 800799a:	2301      	movs	r3, #1
 800799c:	4682      	mov	sl, r0
 800799e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80079a2:	3d01      	subs	r5, #1
 80079a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80079a6:	e772      	b.n	800788e <_dtoa_r+0xf6>
 80079a8:	9b00      	ldr	r3, [sp, #0]
 80079aa:	f1c0 0020 	rsb	r0, r0, #32
 80079ae:	fa03 f000 	lsl.w	r0, r3, r0
 80079b2:	e7f0      	b.n	8007996 <_dtoa_r+0x1fe>
 80079b4:	2301      	movs	r3, #1
 80079b6:	e7b1      	b.n	800791c <_dtoa_r+0x184>
 80079b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80079ba:	e7b0      	b.n	800791e <_dtoa_r+0x186>
 80079bc:	9b05      	ldr	r3, [sp, #20]
 80079be:	eba3 030a 	sub.w	r3, r3, sl
 80079c2:	9305      	str	r3, [sp, #20]
 80079c4:	f1ca 0300 	rsb	r3, sl, #0
 80079c8:	9307      	str	r3, [sp, #28]
 80079ca:	2300      	movs	r3, #0
 80079cc:	930e      	str	r3, [sp, #56]	; 0x38
 80079ce:	e7bb      	b.n	8007948 <_dtoa_r+0x1b0>
 80079d0:	2301      	movs	r3, #1
 80079d2:	930a      	str	r3, [sp, #40]	; 0x28
 80079d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	dd59      	ble.n	8007a8e <_dtoa_r+0x2f6>
 80079da:	9302      	str	r3, [sp, #8]
 80079dc:	4699      	mov	r9, r3
 80079de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80079e0:	2200      	movs	r2, #0
 80079e2:	6072      	str	r2, [r6, #4]
 80079e4:	2204      	movs	r2, #4
 80079e6:	f102 0014 	add.w	r0, r2, #20
 80079ea:	4298      	cmp	r0, r3
 80079ec:	6871      	ldr	r1, [r6, #4]
 80079ee:	d953      	bls.n	8007a98 <_dtoa_r+0x300>
 80079f0:	4620      	mov	r0, r4
 80079f2:	f000 fcaa 	bl	800834a <_Balloc>
 80079f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079f8:	6030      	str	r0, [r6, #0]
 80079fa:	f1b9 0f0e 	cmp.w	r9, #14
 80079fe:	f8d3 b000 	ldr.w	fp, [r3]
 8007a02:	f200 80e6 	bhi.w	8007bd2 <_dtoa_r+0x43a>
 8007a06:	2d00      	cmp	r5, #0
 8007a08:	f000 80e3 	beq.w	8007bd2 <_dtoa_r+0x43a>
 8007a0c:	ed9d 7b00 	vldr	d7, [sp]
 8007a10:	f1ba 0f00 	cmp.w	sl, #0
 8007a14:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007a18:	dd74      	ble.n	8007b04 <_dtoa_r+0x36c>
 8007a1a:	4a2a      	ldr	r2, [pc, #168]	; (8007ac4 <_dtoa_r+0x32c>)
 8007a1c:	f00a 030f 	and.w	r3, sl, #15
 8007a20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a24:	ed93 7b00 	vldr	d7, [r3]
 8007a28:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007a2c:	06f0      	lsls	r0, r6, #27
 8007a2e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007a32:	d565      	bpl.n	8007b00 <_dtoa_r+0x368>
 8007a34:	4b24      	ldr	r3, [pc, #144]	; (8007ac8 <_dtoa_r+0x330>)
 8007a36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a3a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a3e:	f7f8 ff0d 	bl	800085c <__aeabi_ddiv>
 8007a42:	e9cd 0100 	strd	r0, r1, [sp]
 8007a46:	f006 060f 	and.w	r6, r6, #15
 8007a4a:	2503      	movs	r5, #3
 8007a4c:	4f1e      	ldr	r7, [pc, #120]	; (8007ac8 <_dtoa_r+0x330>)
 8007a4e:	e04c      	b.n	8007aea <_dtoa_r+0x352>
 8007a50:	2301      	movs	r3, #1
 8007a52:	930a      	str	r3, [sp, #40]	; 0x28
 8007a54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a56:	4453      	add	r3, sl
 8007a58:	f103 0901 	add.w	r9, r3, #1
 8007a5c:	9302      	str	r3, [sp, #8]
 8007a5e:	464b      	mov	r3, r9
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	bfb8      	it	lt
 8007a64:	2301      	movlt	r3, #1
 8007a66:	e7ba      	b.n	80079de <_dtoa_r+0x246>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	e7b2      	b.n	80079d2 <_dtoa_r+0x23a>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	e7f0      	b.n	8007a52 <_dtoa_r+0x2ba>
 8007a70:	2501      	movs	r5, #1
 8007a72:	2300      	movs	r3, #0
 8007a74:	9306      	str	r3, [sp, #24]
 8007a76:	950a      	str	r5, [sp, #40]	; 0x28
 8007a78:	f04f 33ff 	mov.w	r3, #4294967295
 8007a7c:	9302      	str	r3, [sp, #8]
 8007a7e:	4699      	mov	r9, r3
 8007a80:	2200      	movs	r2, #0
 8007a82:	2312      	movs	r3, #18
 8007a84:	920b      	str	r2, [sp, #44]	; 0x2c
 8007a86:	e7aa      	b.n	80079de <_dtoa_r+0x246>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a8c:	e7f4      	b.n	8007a78 <_dtoa_r+0x2e0>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	9302      	str	r3, [sp, #8]
 8007a92:	4699      	mov	r9, r3
 8007a94:	461a      	mov	r2, r3
 8007a96:	e7f5      	b.n	8007a84 <_dtoa_r+0x2ec>
 8007a98:	3101      	adds	r1, #1
 8007a9a:	6071      	str	r1, [r6, #4]
 8007a9c:	0052      	lsls	r2, r2, #1
 8007a9e:	e7a2      	b.n	80079e6 <_dtoa_r+0x24e>
 8007aa0:	636f4361 	.word	0x636f4361
 8007aa4:	3fd287a7 	.word	0x3fd287a7
 8007aa8:	8b60c8b3 	.word	0x8b60c8b3
 8007aac:	3fc68a28 	.word	0x3fc68a28
 8007ab0:	509f79fb 	.word	0x509f79fb
 8007ab4:	3fd34413 	.word	0x3fd34413
 8007ab8:	7ff00000 	.word	0x7ff00000
 8007abc:	080090c1 	.word	0x080090c1
 8007ac0:	3ff80000 	.word	0x3ff80000
 8007ac4:	08009180 	.word	0x08009180
 8007ac8:	08009158 	.word	0x08009158
 8007acc:	080090ed 	.word	0x080090ed
 8007ad0:	07f1      	lsls	r1, r6, #31
 8007ad2:	d508      	bpl.n	8007ae6 <_dtoa_r+0x34e>
 8007ad4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007adc:	f7f8 fd94 	bl	8000608 <__aeabi_dmul>
 8007ae0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ae4:	3501      	adds	r5, #1
 8007ae6:	1076      	asrs	r6, r6, #1
 8007ae8:	3708      	adds	r7, #8
 8007aea:	2e00      	cmp	r6, #0
 8007aec:	d1f0      	bne.n	8007ad0 <_dtoa_r+0x338>
 8007aee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007af2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007af6:	f7f8 feb1 	bl	800085c <__aeabi_ddiv>
 8007afa:	e9cd 0100 	strd	r0, r1, [sp]
 8007afe:	e01a      	b.n	8007b36 <_dtoa_r+0x39e>
 8007b00:	2502      	movs	r5, #2
 8007b02:	e7a3      	b.n	8007a4c <_dtoa_r+0x2b4>
 8007b04:	f000 80a0 	beq.w	8007c48 <_dtoa_r+0x4b0>
 8007b08:	f1ca 0600 	rsb	r6, sl, #0
 8007b0c:	4b9f      	ldr	r3, [pc, #636]	; (8007d8c <_dtoa_r+0x5f4>)
 8007b0e:	4fa0      	ldr	r7, [pc, #640]	; (8007d90 <_dtoa_r+0x5f8>)
 8007b10:	f006 020f 	and.w	r2, r6, #15
 8007b14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b20:	f7f8 fd72 	bl	8000608 <__aeabi_dmul>
 8007b24:	e9cd 0100 	strd	r0, r1, [sp]
 8007b28:	1136      	asrs	r6, r6, #4
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2502      	movs	r5, #2
 8007b2e:	2e00      	cmp	r6, #0
 8007b30:	d17f      	bne.n	8007c32 <_dtoa_r+0x49a>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1e1      	bne.n	8007afa <_dtoa_r+0x362>
 8007b36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 8087 	beq.w	8007c4c <_dtoa_r+0x4b4>
 8007b3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007b42:	2200      	movs	r2, #0
 8007b44:	4b93      	ldr	r3, [pc, #588]	; (8007d94 <_dtoa_r+0x5fc>)
 8007b46:	4630      	mov	r0, r6
 8007b48:	4639      	mov	r1, r7
 8007b4a:	f7f8 ffcf 	bl	8000aec <__aeabi_dcmplt>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d07c      	beq.n	8007c4c <_dtoa_r+0x4b4>
 8007b52:	f1b9 0f00 	cmp.w	r9, #0
 8007b56:	d079      	beq.n	8007c4c <_dtoa_r+0x4b4>
 8007b58:	9b02      	ldr	r3, [sp, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	dd35      	ble.n	8007bca <_dtoa_r+0x432>
 8007b5e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007b62:	9308      	str	r3, [sp, #32]
 8007b64:	4639      	mov	r1, r7
 8007b66:	2200      	movs	r2, #0
 8007b68:	4b8b      	ldr	r3, [pc, #556]	; (8007d98 <_dtoa_r+0x600>)
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f7f8 fd4c 	bl	8000608 <__aeabi_dmul>
 8007b70:	e9cd 0100 	strd	r0, r1, [sp]
 8007b74:	9f02      	ldr	r7, [sp, #8]
 8007b76:	3501      	adds	r5, #1
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f7f8 fcdb 	bl	8000534 <__aeabi_i2d>
 8007b7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b82:	f7f8 fd41 	bl	8000608 <__aeabi_dmul>
 8007b86:	2200      	movs	r2, #0
 8007b88:	4b84      	ldr	r3, [pc, #528]	; (8007d9c <_dtoa_r+0x604>)
 8007b8a:	f7f8 fb87 	bl	800029c <__adddf3>
 8007b8e:	4605      	mov	r5, r0
 8007b90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007b94:	2f00      	cmp	r7, #0
 8007b96:	d15d      	bne.n	8007c54 <_dtoa_r+0x4bc>
 8007b98:	2200      	movs	r2, #0
 8007b9a:	4b81      	ldr	r3, [pc, #516]	; (8007da0 <_dtoa_r+0x608>)
 8007b9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ba0:	f7f8 fb7a 	bl	8000298 <__aeabi_dsub>
 8007ba4:	462a      	mov	r2, r5
 8007ba6:	4633      	mov	r3, r6
 8007ba8:	e9cd 0100 	strd	r0, r1, [sp]
 8007bac:	f7f8 ffbc 	bl	8000b28 <__aeabi_dcmpgt>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	f040 8288 	bne.w	80080c6 <_dtoa_r+0x92e>
 8007bb6:	462a      	mov	r2, r5
 8007bb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007bbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bc0:	f7f8 ff94 	bl	8000aec <__aeabi_dcmplt>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	f040 827c 	bne.w	80080c2 <_dtoa_r+0x92a>
 8007bca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007bce:	e9cd 2300 	strd	r2, r3, [sp]
 8007bd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f2c0 8150 	blt.w	8007e7a <_dtoa_r+0x6e2>
 8007bda:	f1ba 0f0e 	cmp.w	sl, #14
 8007bde:	f300 814c 	bgt.w	8007e7a <_dtoa_r+0x6e2>
 8007be2:	4b6a      	ldr	r3, [pc, #424]	; (8007d8c <_dtoa_r+0x5f4>)
 8007be4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007be8:	ed93 7b00 	vldr	d7, [r3]
 8007bec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007bf4:	f280 80d8 	bge.w	8007da8 <_dtoa_r+0x610>
 8007bf8:	f1b9 0f00 	cmp.w	r9, #0
 8007bfc:	f300 80d4 	bgt.w	8007da8 <_dtoa_r+0x610>
 8007c00:	f040 825e 	bne.w	80080c0 <_dtoa_r+0x928>
 8007c04:	2200      	movs	r2, #0
 8007c06:	4b66      	ldr	r3, [pc, #408]	; (8007da0 <_dtoa_r+0x608>)
 8007c08:	ec51 0b17 	vmov	r0, r1, d7
 8007c0c:	f7f8 fcfc 	bl	8000608 <__aeabi_dmul>
 8007c10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c14:	f7f8 ff7e 	bl	8000b14 <__aeabi_dcmpge>
 8007c18:	464f      	mov	r7, r9
 8007c1a:	464e      	mov	r6, r9
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	f040 8234 	bne.w	800808a <_dtoa_r+0x8f2>
 8007c22:	2331      	movs	r3, #49	; 0x31
 8007c24:	f10b 0501 	add.w	r5, fp, #1
 8007c28:	f88b 3000 	strb.w	r3, [fp]
 8007c2c:	f10a 0a01 	add.w	sl, sl, #1
 8007c30:	e22f      	b.n	8008092 <_dtoa_r+0x8fa>
 8007c32:	07f2      	lsls	r2, r6, #31
 8007c34:	d505      	bpl.n	8007c42 <_dtoa_r+0x4aa>
 8007c36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c3a:	f7f8 fce5 	bl	8000608 <__aeabi_dmul>
 8007c3e:	3501      	adds	r5, #1
 8007c40:	2301      	movs	r3, #1
 8007c42:	1076      	asrs	r6, r6, #1
 8007c44:	3708      	adds	r7, #8
 8007c46:	e772      	b.n	8007b2e <_dtoa_r+0x396>
 8007c48:	2502      	movs	r5, #2
 8007c4a:	e774      	b.n	8007b36 <_dtoa_r+0x39e>
 8007c4c:	f8cd a020 	str.w	sl, [sp, #32]
 8007c50:	464f      	mov	r7, r9
 8007c52:	e791      	b.n	8007b78 <_dtoa_r+0x3e0>
 8007c54:	4b4d      	ldr	r3, [pc, #308]	; (8007d8c <_dtoa_r+0x5f4>)
 8007c56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c5a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d047      	beq.n	8007cf4 <_dtoa_r+0x55c>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	2000      	movs	r0, #0
 8007c6a:	494e      	ldr	r1, [pc, #312]	; (8007da4 <_dtoa_r+0x60c>)
 8007c6c:	f7f8 fdf6 	bl	800085c <__aeabi_ddiv>
 8007c70:	462a      	mov	r2, r5
 8007c72:	4633      	mov	r3, r6
 8007c74:	f7f8 fb10 	bl	8000298 <__aeabi_dsub>
 8007c78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007c7c:	465d      	mov	r5, fp
 8007c7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c82:	f7f8 ff71 	bl	8000b68 <__aeabi_d2iz>
 8007c86:	4606      	mov	r6, r0
 8007c88:	f7f8 fc54 	bl	8000534 <__aeabi_i2d>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	460b      	mov	r3, r1
 8007c90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c94:	f7f8 fb00 	bl	8000298 <__aeabi_dsub>
 8007c98:	3630      	adds	r6, #48	; 0x30
 8007c9a:	f805 6b01 	strb.w	r6, [r5], #1
 8007c9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ca2:	e9cd 0100 	strd	r0, r1, [sp]
 8007ca6:	f7f8 ff21 	bl	8000aec <__aeabi_dcmplt>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d163      	bne.n	8007d76 <_dtoa_r+0x5de>
 8007cae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	4937      	ldr	r1, [pc, #220]	; (8007d94 <_dtoa_r+0x5fc>)
 8007cb6:	f7f8 faef 	bl	8000298 <__aeabi_dsub>
 8007cba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007cbe:	f7f8 ff15 	bl	8000aec <__aeabi_dcmplt>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	f040 80b7 	bne.w	8007e36 <_dtoa_r+0x69e>
 8007cc8:	eba5 030b 	sub.w	r3, r5, fp
 8007ccc:	429f      	cmp	r7, r3
 8007cce:	f77f af7c 	ble.w	8007bca <_dtoa_r+0x432>
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	4b30      	ldr	r3, [pc, #192]	; (8007d98 <_dtoa_r+0x600>)
 8007cd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cda:	f7f8 fc95 	bl	8000608 <__aeabi_dmul>
 8007cde:	2200      	movs	r2, #0
 8007ce0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007ce4:	4b2c      	ldr	r3, [pc, #176]	; (8007d98 <_dtoa_r+0x600>)
 8007ce6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cea:	f7f8 fc8d 	bl	8000608 <__aeabi_dmul>
 8007cee:	e9cd 0100 	strd	r0, r1, [sp]
 8007cf2:	e7c4      	b.n	8007c7e <_dtoa_r+0x4e6>
 8007cf4:	462a      	mov	r2, r5
 8007cf6:	4633      	mov	r3, r6
 8007cf8:	f7f8 fc86 	bl	8000608 <__aeabi_dmul>
 8007cfc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007d00:	eb0b 0507 	add.w	r5, fp, r7
 8007d04:	465e      	mov	r6, fp
 8007d06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d0a:	f7f8 ff2d 	bl	8000b68 <__aeabi_d2iz>
 8007d0e:	4607      	mov	r7, r0
 8007d10:	f7f8 fc10 	bl	8000534 <__aeabi_i2d>
 8007d14:	3730      	adds	r7, #48	; 0x30
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d1e:	f7f8 fabb 	bl	8000298 <__aeabi_dsub>
 8007d22:	f806 7b01 	strb.w	r7, [r6], #1
 8007d26:	42ae      	cmp	r6, r5
 8007d28:	e9cd 0100 	strd	r0, r1, [sp]
 8007d2c:	f04f 0200 	mov.w	r2, #0
 8007d30:	d126      	bne.n	8007d80 <_dtoa_r+0x5e8>
 8007d32:	4b1c      	ldr	r3, [pc, #112]	; (8007da4 <_dtoa_r+0x60c>)
 8007d34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d38:	f7f8 fab0 	bl	800029c <__adddf3>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d44:	f7f8 fef0 	bl	8000b28 <__aeabi_dcmpgt>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d174      	bne.n	8007e36 <_dtoa_r+0x69e>
 8007d4c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007d50:	2000      	movs	r0, #0
 8007d52:	4914      	ldr	r1, [pc, #80]	; (8007da4 <_dtoa_r+0x60c>)
 8007d54:	f7f8 faa0 	bl	8000298 <__aeabi_dsub>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d60:	f7f8 fec4 	bl	8000aec <__aeabi_dcmplt>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	f43f af30 	beq.w	8007bca <_dtoa_r+0x432>
 8007d6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d6e:	2b30      	cmp	r3, #48	; 0x30
 8007d70:	f105 32ff 	add.w	r2, r5, #4294967295
 8007d74:	d002      	beq.n	8007d7c <_dtoa_r+0x5e4>
 8007d76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007d7a:	e04a      	b.n	8007e12 <_dtoa_r+0x67a>
 8007d7c:	4615      	mov	r5, r2
 8007d7e:	e7f4      	b.n	8007d6a <_dtoa_r+0x5d2>
 8007d80:	4b05      	ldr	r3, [pc, #20]	; (8007d98 <_dtoa_r+0x600>)
 8007d82:	f7f8 fc41 	bl	8000608 <__aeabi_dmul>
 8007d86:	e9cd 0100 	strd	r0, r1, [sp]
 8007d8a:	e7bc      	b.n	8007d06 <_dtoa_r+0x56e>
 8007d8c:	08009180 	.word	0x08009180
 8007d90:	08009158 	.word	0x08009158
 8007d94:	3ff00000 	.word	0x3ff00000
 8007d98:	40240000 	.word	0x40240000
 8007d9c:	401c0000 	.word	0x401c0000
 8007da0:	40140000 	.word	0x40140000
 8007da4:	3fe00000 	.word	0x3fe00000
 8007da8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007dac:	465d      	mov	r5, fp
 8007dae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007db2:	4630      	mov	r0, r6
 8007db4:	4639      	mov	r1, r7
 8007db6:	f7f8 fd51 	bl	800085c <__aeabi_ddiv>
 8007dba:	f7f8 fed5 	bl	8000b68 <__aeabi_d2iz>
 8007dbe:	4680      	mov	r8, r0
 8007dc0:	f7f8 fbb8 	bl	8000534 <__aeabi_i2d>
 8007dc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dc8:	f7f8 fc1e 	bl	8000608 <__aeabi_dmul>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	4639      	mov	r1, r7
 8007dd4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007dd8:	f7f8 fa5e 	bl	8000298 <__aeabi_dsub>
 8007ddc:	f805 6b01 	strb.w	r6, [r5], #1
 8007de0:	eba5 060b 	sub.w	r6, r5, fp
 8007de4:	45b1      	cmp	r9, r6
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	d139      	bne.n	8007e60 <_dtoa_r+0x6c8>
 8007dec:	f7f8 fa56 	bl	800029c <__adddf3>
 8007df0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007df4:	4606      	mov	r6, r0
 8007df6:	460f      	mov	r7, r1
 8007df8:	f7f8 fe96 	bl	8000b28 <__aeabi_dcmpgt>
 8007dfc:	b9c8      	cbnz	r0, 8007e32 <_dtoa_r+0x69a>
 8007dfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e02:	4630      	mov	r0, r6
 8007e04:	4639      	mov	r1, r7
 8007e06:	f7f8 fe67 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e0a:	b110      	cbz	r0, 8007e12 <_dtoa_r+0x67a>
 8007e0c:	f018 0f01 	tst.w	r8, #1
 8007e10:	d10f      	bne.n	8007e32 <_dtoa_r+0x69a>
 8007e12:	9904      	ldr	r1, [sp, #16]
 8007e14:	4620      	mov	r0, r4
 8007e16:	f000 facc 	bl	80083b2 <_Bfree>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e1e:	702b      	strb	r3, [r5, #0]
 8007e20:	f10a 0301 	add.w	r3, sl, #1
 8007e24:	6013      	str	r3, [r2, #0]
 8007e26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 8241 	beq.w	80082b0 <_dtoa_r+0xb18>
 8007e2e:	601d      	str	r5, [r3, #0]
 8007e30:	e23e      	b.n	80082b0 <_dtoa_r+0xb18>
 8007e32:	f8cd a020 	str.w	sl, [sp, #32]
 8007e36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e3a:	2a39      	cmp	r2, #57	; 0x39
 8007e3c:	f105 33ff 	add.w	r3, r5, #4294967295
 8007e40:	d108      	bne.n	8007e54 <_dtoa_r+0x6bc>
 8007e42:	459b      	cmp	fp, r3
 8007e44:	d10a      	bne.n	8007e5c <_dtoa_r+0x6c4>
 8007e46:	9b08      	ldr	r3, [sp, #32]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	9308      	str	r3, [sp, #32]
 8007e4c:	2330      	movs	r3, #48	; 0x30
 8007e4e:	f88b 3000 	strb.w	r3, [fp]
 8007e52:	465b      	mov	r3, fp
 8007e54:	781a      	ldrb	r2, [r3, #0]
 8007e56:	3201      	adds	r2, #1
 8007e58:	701a      	strb	r2, [r3, #0]
 8007e5a:	e78c      	b.n	8007d76 <_dtoa_r+0x5de>
 8007e5c:	461d      	mov	r5, r3
 8007e5e:	e7ea      	b.n	8007e36 <_dtoa_r+0x69e>
 8007e60:	2200      	movs	r2, #0
 8007e62:	4b9b      	ldr	r3, [pc, #620]	; (80080d0 <_dtoa_r+0x938>)
 8007e64:	f7f8 fbd0 	bl	8000608 <__aeabi_dmul>
 8007e68:	2200      	movs	r2, #0
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	4606      	mov	r6, r0
 8007e6e:	460f      	mov	r7, r1
 8007e70:	f7f8 fe32 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d09a      	beq.n	8007dae <_dtoa_r+0x616>
 8007e78:	e7cb      	b.n	8007e12 <_dtoa_r+0x67a>
 8007e7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e7c:	2a00      	cmp	r2, #0
 8007e7e:	f000 808b 	beq.w	8007f98 <_dtoa_r+0x800>
 8007e82:	9a06      	ldr	r2, [sp, #24]
 8007e84:	2a01      	cmp	r2, #1
 8007e86:	dc6e      	bgt.n	8007f66 <_dtoa_r+0x7ce>
 8007e88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e8a:	2a00      	cmp	r2, #0
 8007e8c:	d067      	beq.n	8007f5e <_dtoa_r+0x7c6>
 8007e8e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e92:	9f07      	ldr	r7, [sp, #28]
 8007e94:	9d05      	ldr	r5, [sp, #20]
 8007e96:	9a05      	ldr	r2, [sp, #20]
 8007e98:	2101      	movs	r1, #1
 8007e9a:	441a      	add	r2, r3
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	9205      	str	r2, [sp, #20]
 8007ea0:	4498      	add	r8, r3
 8007ea2:	f000 fb26 	bl	80084f2 <__i2b>
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	2d00      	cmp	r5, #0
 8007eaa:	dd0c      	ble.n	8007ec6 <_dtoa_r+0x72e>
 8007eac:	f1b8 0f00 	cmp.w	r8, #0
 8007eb0:	dd09      	ble.n	8007ec6 <_dtoa_r+0x72e>
 8007eb2:	4545      	cmp	r5, r8
 8007eb4:	9a05      	ldr	r2, [sp, #20]
 8007eb6:	462b      	mov	r3, r5
 8007eb8:	bfa8      	it	ge
 8007eba:	4643      	movge	r3, r8
 8007ebc:	1ad2      	subs	r2, r2, r3
 8007ebe:	9205      	str	r2, [sp, #20]
 8007ec0:	1aed      	subs	r5, r5, r3
 8007ec2:	eba8 0803 	sub.w	r8, r8, r3
 8007ec6:	9b07      	ldr	r3, [sp, #28]
 8007ec8:	b1eb      	cbz	r3, 8007f06 <_dtoa_r+0x76e>
 8007eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d067      	beq.n	8007fa0 <_dtoa_r+0x808>
 8007ed0:	b18f      	cbz	r7, 8007ef6 <_dtoa_r+0x75e>
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	463a      	mov	r2, r7
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f000 fbaa 	bl	8008630 <__pow5mult>
 8007edc:	9a04      	ldr	r2, [sp, #16]
 8007ede:	4601      	mov	r1, r0
 8007ee0:	4606      	mov	r6, r0
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f000 fb0e 	bl	8008504 <__multiply>
 8007ee8:	9904      	ldr	r1, [sp, #16]
 8007eea:	9008      	str	r0, [sp, #32]
 8007eec:	4620      	mov	r0, r4
 8007eee:	f000 fa60 	bl	80083b2 <_Bfree>
 8007ef2:	9b08      	ldr	r3, [sp, #32]
 8007ef4:	9304      	str	r3, [sp, #16]
 8007ef6:	9b07      	ldr	r3, [sp, #28]
 8007ef8:	1bda      	subs	r2, r3, r7
 8007efa:	d004      	beq.n	8007f06 <_dtoa_r+0x76e>
 8007efc:	9904      	ldr	r1, [sp, #16]
 8007efe:	4620      	mov	r0, r4
 8007f00:	f000 fb96 	bl	8008630 <__pow5mult>
 8007f04:	9004      	str	r0, [sp, #16]
 8007f06:	2101      	movs	r1, #1
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 faf2 	bl	80084f2 <__i2b>
 8007f0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f10:	4607      	mov	r7, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 81d0 	beq.w	80082b8 <_dtoa_r+0xb20>
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4601      	mov	r1, r0
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f000 fb87 	bl	8008630 <__pow5mult>
 8007f22:	9b06      	ldr	r3, [sp, #24]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	4607      	mov	r7, r0
 8007f28:	dc40      	bgt.n	8007fac <_dtoa_r+0x814>
 8007f2a:	9b00      	ldr	r3, [sp, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d139      	bne.n	8007fa4 <_dtoa_r+0x80c>
 8007f30:	9b01      	ldr	r3, [sp, #4]
 8007f32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d136      	bne.n	8007fa8 <_dtoa_r+0x810>
 8007f3a:	9b01      	ldr	r3, [sp, #4]
 8007f3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f40:	0d1b      	lsrs	r3, r3, #20
 8007f42:	051b      	lsls	r3, r3, #20
 8007f44:	b12b      	cbz	r3, 8007f52 <_dtoa_r+0x7ba>
 8007f46:	9b05      	ldr	r3, [sp, #20]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	9305      	str	r3, [sp, #20]
 8007f4c:	f108 0801 	add.w	r8, r8, #1
 8007f50:	2301      	movs	r3, #1
 8007f52:	9307      	str	r3, [sp, #28]
 8007f54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d12a      	bne.n	8007fb0 <_dtoa_r+0x818>
 8007f5a:	2001      	movs	r0, #1
 8007f5c:	e030      	b.n	8007fc0 <_dtoa_r+0x828>
 8007f5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f60:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f64:	e795      	b.n	8007e92 <_dtoa_r+0x6fa>
 8007f66:	9b07      	ldr	r3, [sp, #28]
 8007f68:	f109 37ff 	add.w	r7, r9, #4294967295
 8007f6c:	42bb      	cmp	r3, r7
 8007f6e:	bfbf      	itttt	lt
 8007f70:	9b07      	ldrlt	r3, [sp, #28]
 8007f72:	9707      	strlt	r7, [sp, #28]
 8007f74:	1afa      	sublt	r2, r7, r3
 8007f76:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007f78:	bfbb      	ittet	lt
 8007f7a:	189b      	addlt	r3, r3, r2
 8007f7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007f7e:	1bdf      	subge	r7, r3, r7
 8007f80:	2700      	movlt	r7, #0
 8007f82:	f1b9 0f00 	cmp.w	r9, #0
 8007f86:	bfb5      	itete	lt
 8007f88:	9b05      	ldrlt	r3, [sp, #20]
 8007f8a:	9d05      	ldrge	r5, [sp, #20]
 8007f8c:	eba3 0509 	sublt.w	r5, r3, r9
 8007f90:	464b      	movge	r3, r9
 8007f92:	bfb8      	it	lt
 8007f94:	2300      	movlt	r3, #0
 8007f96:	e77e      	b.n	8007e96 <_dtoa_r+0x6fe>
 8007f98:	9f07      	ldr	r7, [sp, #28]
 8007f9a:	9d05      	ldr	r5, [sp, #20]
 8007f9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007f9e:	e783      	b.n	8007ea8 <_dtoa_r+0x710>
 8007fa0:	9a07      	ldr	r2, [sp, #28]
 8007fa2:	e7ab      	b.n	8007efc <_dtoa_r+0x764>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	e7d4      	b.n	8007f52 <_dtoa_r+0x7ba>
 8007fa8:	9b00      	ldr	r3, [sp, #0]
 8007faa:	e7d2      	b.n	8007f52 <_dtoa_r+0x7ba>
 8007fac:	2300      	movs	r3, #0
 8007fae:	9307      	str	r3, [sp, #28]
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007fb6:	6918      	ldr	r0, [r3, #16]
 8007fb8:	f000 fa4d 	bl	8008456 <__hi0bits>
 8007fbc:	f1c0 0020 	rsb	r0, r0, #32
 8007fc0:	4440      	add	r0, r8
 8007fc2:	f010 001f 	ands.w	r0, r0, #31
 8007fc6:	d047      	beq.n	8008058 <_dtoa_r+0x8c0>
 8007fc8:	f1c0 0320 	rsb	r3, r0, #32
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	dd3b      	ble.n	8008048 <_dtoa_r+0x8b0>
 8007fd0:	9b05      	ldr	r3, [sp, #20]
 8007fd2:	f1c0 001c 	rsb	r0, r0, #28
 8007fd6:	4403      	add	r3, r0
 8007fd8:	9305      	str	r3, [sp, #20]
 8007fda:	4405      	add	r5, r0
 8007fdc:	4480      	add	r8, r0
 8007fde:	9b05      	ldr	r3, [sp, #20]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	dd05      	ble.n	8007ff0 <_dtoa_r+0x858>
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	9904      	ldr	r1, [sp, #16]
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f000 fb6f 	bl	80086cc <__lshift>
 8007fee:	9004      	str	r0, [sp, #16]
 8007ff0:	f1b8 0f00 	cmp.w	r8, #0
 8007ff4:	dd05      	ble.n	8008002 <_dtoa_r+0x86a>
 8007ff6:	4639      	mov	r1, r7
 8007ff8:	4642      	mov	r2, r8
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f000 fb66 	bl	80086cc <__lshift>
 8008000:	4607      	mov	r7, r0
 8008002:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008004:	b353      	cbz	r3, 800805c <_dtoa_r+0x8c4>
 8008006:	4639      	mov	r1, r7
 8008008:	9804      	ldr	r0, [sp, #16]
 800800a:	f000 fbb3 	bl	8008774 <__mcmp>
 800800e:	2800      	cmp	r0, #0
 8008010:	da24      	bge.n	800805c <_dtoa_r+0x8c4>
 8008012:	2300      	movs	r3, #0
 8008014:	220a      	movs	r2, #10
 8008016:	9904      	ldr	r1, [sp, #16]
 8008018:	4620      	mov	r0, r4
 800801a:	f000 f9e1 	bl	80083e0 <__multadd>
 800801e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008020:	9004      	str	r0, [sp, #16]
 8008022:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008026:	2b00      	cmp	r3, #0
 8008028:	f000 814d 	beq.w	80082c6 <_dtoa_r+0xb2e>
 800802c:	2300      	movs	r3, #0
 800802e:	4631      	mov	r1, r6
 8008030:	220a      	movs	r2, #10
 8008032:	4620      	mov	r0, r4
 8008034:	f000 f9d4 	bl	80083e0 <__multadd>
 8008038:	9b02      	ldr	r3, [sp, #8]
 800803a:	2b00      	cmp	r3, #0
 800803c:	4606      	mov	r6, r0
 800803e:	dc4f      	bgt.n	80080e0 <_dtoa_r+0x948>
 8008040:	9b06      	ldr	r3, [sp, #24]
 8008042:	2b02      	cmp	r3, #2
 8008044:	dd4c      	ble.n	80080e0 <_dtoa_r+0x948>
 8008046:	e011      	b.n	800806c <_dtoa_r+0x8d4>
 8008048:	d0c9      	beq.n	8007fde <_dtoa_r+0x846>
 800804a:	9a05      	ldr	r2, [sp, #20]
 800804c:	331c      	adds	r3, #28
 800804e:	441a      	add	r2, r3
 8008050:	9205      	str	r2, [sp, #20]
 8008052:	441d      	add	r5, r3
 8008054:	4498      	add	r8, r3
 8008056:	e7c2      	b.n	8007fde <_dtoa_r+0x846>
 8008058:	4603      	mov	r3, r0
 800805a:	e7f6      	b.n	800804a <_dtoa_r+0x8b2>
 800805c:	f1b9 0f00 	cmp.w	r9, #0
 8008060:	dc38      	bgt.n	80080d4 <_dtoa_r+0x93c>
 8008062:	9b06      	ldr	r3, [sp, #24]
 8008064:	2b02      	cmp	r3, #2
 8008066:	dd35      	ble.n	80080d4 <_dtoa_r+0x93c>
 8008068:	f8cd 9008 	str.w	r9, [sp, #8]
 800806c:	9b02      	ldr	r3, [sp, #8]
 800806e:	b963      	cbnz	r3, 800808a <_dtoa_r+0x8f2>
 8008070:	4639      	mov	r1, r7
 8008072:	2205      	movs	r2, #5
 8008074:	4620      	mov	r0, r4
 8008076:	f000 f9b3 	bl	80083e0 <__multadd>
 800807a:	4601      	mov	r1, r0
 800807c:	4607      	mov	r7, r0
 800807e:	9804      	ldr	r0, [sp, #16]
 8008080:	f000 fb78 	bl	8008774 <__mcmp>
 8008084:	2800      	cmp	r0, #0
 8008086:	f73f adcc 	bgt.w	8007c22 <_dtoa_r+0x48a>
 800808a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800808c:	465d      	mov	r5, fp
 800808e:	ea6f 0a03 	mvn.w	sl, r3
 8008092:	f04f 0900 	mov.w	r9, #0
 8008096:	4639      	mov	r1, r7
 8008098:	4620      	mov	r0, r4
 800809a:	f000 f98a 	bl	80083b2 <_Bfree>
 800809e:	2e00      	cmp	r6, #0
 80080a0:	f43f aeb7 	beq.w	8007e12 <_dtoa_r+0x67a>
 80080a4:	f1b9 0f00 	cmp.w	r9, #0
 80080a8:	d005      	beq.n	80080b6 <_dtoa_r+0x91e>
 80080aa:	45b1      	cmp	r9, r6
 80080ac:	d003      	beq.n	80080b6 <_dtoa_r+0x91e>
 80080ae:	4649      	mov	r1, r9
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 f97e 	bl	80083b2 <_Bfree>
 80080b6:	4631      	mov	r1, r6
 80080b8:	4620      	mov	r0, r4
 80080ba:	f000 f97a 	bl	80083b2 <_Bfree>
 80080be:	e6a8      	b.n	8007e12 <_dtoa_r+0x67a>
 80080c0:	2700      	movs	r7, #0
 80080c2:	463e      	mov	r6, r7
 80080c4:	e7e1      	b.n	800808a <_dtoa_r+0x8f2>
 80080c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80080ca:	463e      	mov	r6, r7
 80080cc:	e5a9      	b.n	8007c22 <_dtoa_r+0x48a>
 80080ce:	bf00      	nop
 80080d0:	40240000 	.word	0x40240000
 80080d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 80fa 	beq.w	80082d4 <_dtoa_r+0xb3c>
 80080e0:	2d00      	cmp	r5, #0
 80080e2:	dd05      	ble.n	80080f0 <_dtoa_r+0x958>
 80080e4:	4631      	mov	r1, r6
 80080e6:	462a      	mov	r2, r5
 80080e8:	4620      	mov	r0, r4
 80080ea:	f000 faef 	bl	80086cc <__lshift>
 80080ee:	4606      	mov	r6, r0
 80080f0:	9b07      	ldr	r3, [sp, #28]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d04c      	beq.n	8008190 <_dtoa_r+0x9f8>
 80080f6:	6871      	ldr	r1, [r6, #4]
 80080f8:	4620      	mov	r0, r4
 80080fa:	f000 f926 	bl	800834a <_Balloc>
 80080fe:	6932      	ldr	r2, [r6, #16]
 8008100:	3202      	adds	r2, #2
 8008102:	4605      	mov	r5, r0
 8008104:	0092      	lsls	r2, r2, #2
 8008106:	f106 010c 	add.w	r1, r6, #12
 800810a:	300c      	adds	r0, #12
 800810c:	f000 f912 	bl	8008334 <memcpy>
 8008110:	2201      	movs	r2, #1
 8008112:	4629      	mov	r1, r5
 8008114:	4620      	mov	r0, r4
 8008116:	f000 fad9 	bl	80086cc <__lshift>
 800811a:	9b00      	ldr	r3, [sp, #0]
 800811c:	f8cd b014 	str.w	fp, [sp, #20]
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	46b1      	mov	r9, r6
 8008126:	9307      	str	r3, [sp, #28]
 8008128:	4606      	mov	r6, r0
 800812a:	4639      	mov	r1, r7
 800812c:	9804      	ldr	r0, [sp, #16]
 800812e:	f7ff faa5 	bl	800767c <quorem>
 8008132:	4649      	mov	r1, r9
 8008134:	4605      	mov	r5, r0
 8008136:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800813a:	9804      	ldr	r0, [sp, #16]
 800813c:	f000 fb1a 	bl	8008774 <__mcmp>
 8008140:	4632      	mov	r2, r6
 8008142:	9000      	str	r0, [sp, #0]
 8008144:	4639      	mov	r1, r7
 8008146:	4620      	mov	r0, r4
 8008148:	f000 fb2e 	bl	80087a8 <__mdiff>
 800814c:	68c3      	ldr	r3, [r0, #12]
 800814e:	4602      	mov	r2, r0
 8008150:	bb03      	cbnz	r3, 8008194 <_dtoa_r+0x9fc>
 8008152:	4601      	mov	r1, r0
 8008154:	9008      	str	r0, [sp, #32]
 8008156:	9804      	ldr	r0, [sp, #16]
 8008158:	f000 fb0c 	bl	8008774 <__mcmp>
 800815c:	9a08      	ldr	r2, [sp, #32]
 800815e:	4603      	mov	r3, r0
 8008160:	4611      	mov	r1, r2
 8008162:	4620      	mov	r0, r4
 8008164:	9308      	str	r3, [sp, #32]
 8008166:	f000 f924 	bl	80083b2 <_Bfree>
 800816a:	9b08      	ldr	r3, [sp, #32]
 800816c:	b9a3      	cbnz	r3, 8008198 <_dtoa_r+0xa00>
 800816e:	9a06      	ldr	r2, [sp, #24]
 8008170:	b992      	cbnz	r2, 8008198 <_dtoa_r+0xa00>
 8008172:	9a07      	ldr	r2, [sp, #28]
 8008174:	b982      	cbnz	r2, 8008198 <_dtoa_r+0xa00>
 8008176:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800817a:	d029      	beq.n	80081d0 <_dtoa_r+0xa38>
 800817c:	9b00      	ldr	r3, [sp, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	dd01      	ble.n	8008186 <_dtoa_r+0x9ee>
 8008182:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008186:	9b05      	ldr	r3, [sp, #20]
 8008188:	1c5d      	adds	r5, r3, #1
 800818a:	f883 8000 	strb.w	r8, [r3]
 800818e:	e782      	b.n	8008096 <_dtoa_r+0x8fe>
 8008190:	4630      	mov	r0, r6
 8008192:	e7c2      	b.n	800811a <_dtoa_r+0x982>
 8008194:	2301      	movs	r3, #1
 8008196:	e7e3      	b.n	8008160 <_dtoa_r+0x9c8>
 8008198:	9a00      	ldr	r2, [sp, #0]
 800819a:	2a00      	cmp	r2, #0
 800819c:	db04      	blt.n	80081a8 <_dtoa_r+0xa10>
 800819e:	d125      	bne.n	80081ec <_dtoa_r+0xa54>
 80081a0:	9a06      	ldr	r2, [sp, #24]
 80081a2:	bb1a      	cbnz	r2, 80081ec <_dtoa_r+0xa54>
 80081a4:	9a07      	ldr	r2, [sp, #28]
 80081a6:	bb0a      	cbnz	r2, 80081ec <_dtoa_r+0xa54>
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	ddec      	ble.n	8008186 <_dtoa_r+0x9ee>
 80081ac:	2201      	movs	r2, #1
 80081ae:	9904      	ldr	r1, [sp, #16]
 80081b0:	4620      	mov	r0, r4
 80081b2:	f000 fa8b 	bl	80086cc <__lshift>
 80081b6:	4639      	mov	r1, r7
 80081b8:	9004      	str	r0, [sp, #16]
 80081ba:	f000 fadb 	bl	8008774 <__mcmp>
 80081be:	2800      	cmp	r0, #0
 80081c0:	dc03      	bgt.n	80081ca <_dtoa_r+0xa32>
 80081c2:	d1e0      	bne.n	8008186 <_dtoa_r+0x9ee>
 80081c4:	f018 0f01 	tst.w	r8, #1
 80081c8:	d0dd      	beq.n	8008186 <_dtoa_r+0x9ee>
 80081ca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80081ce:	d1d8      	bne.n	8008182 <_dtoa_r+0x9ea>
 80081d0:	9b05      	ldr	r3, [sp, #20]
 80081d2:	9a05      	ldr	r2, [sp, #20]
 80081d4:	1c5d      	adds	r5, r3, #1
 80081d6:	2339      	movs	r3, #57	; 0x39
 80081d8:	7013      	strb	r3, [r2, #0]
 80081da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081de:	2b39      	cmp	r3, #57	; 0x39
 80081e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80081e4:	d04f      	beq.n	8008286 <_dtoa_r+0xaee>
 80081e6:	3301      	adds	r3, #1
 80081e8:	7013      	strb	r3, [r2, #0]
 80081ea:	e754      	b.n	8008096 <_dtoa_r+0x8fe>
 80081ec:	9a05      	ldr	r2, [sp, #20]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f102 0501 	add.w	r5, r2, #1
 80081f4:	dd06      	ble.n	8008204 <_dtoa_r+0xa6c>
 80081f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80081fa:	d0e9      	beq.n	80081d0 <_dtoa_r+0xa38>
 80081fc:	f108 0801 	add.w	r8, r8, #1
 8008200:	9b05      	ldr	r3, [sp, #20]
 8008202:	e7c2      	b.n	800818a <_dtoa_r+0x9f2>
 8008204:	9a02      	ldr	r2, [sp, #8]
 8008206:	f805 8c01 	strb.w	r8, [r5, #-1]
 800820a:	eba5 030b 	sub.w	r3, r5, fp
 800820e:	4293      	cmp	r3, r2
 8008210:	d021      	beq.n	8008256 <_dtoa_r+0xabe>
 8008212:	2300      	movs	r3, #0
 8008214:	220a      	movs	r2, #10
 8008216:	9904      	ldr	r1, [sp, #16]
 8008218:	4620      	mov	r0, r4
 800821a:	f000 f8e1 	bl	80083e0 <__multadd>
 800821e:	45b1      	cmp	r9, r6
 8008220:	9004      	str	r0, [sp, #16]
 8008222:	f04f 0300 	mov.w	r3, #0
 8008226:	f04f 020a 	mov.w	r2, #10
 800822a:	4649      	mov	r1, r9
 800822c:	4620      	mov	r0, r4
 800822e:	d105      	bne.n	800823c <_dtoa_r+0xaa4>
 8008230:	f000 f8d6 	bl	80083e0 <__multadd>
 8008234:	4681      	mov	r9, r0
 8008236:	4606      	mov	r6, r0
 8008238:	9505      	str	r5, [sp, #20]
 800823a:	e776      	b.n	800812a <_dtoa_r+0x992>
 800823c:	f000 f8d0 	bl	80083e0 <__multadd>
 8008240:	4631      	mov	r1, r6
 8008242:	4681      	mov	r9, r0
 8008244:	2300      	movs	r3, #0
 8008246:	220a      	movs	r2, #10
 8008248:	4620      	mov	r0, r4
 800824a:	f000 f8c9 	bl	80083e0 <__multadd>
 800824e:	4606      	mov	r6, r0
 8008250:	e7f2      	b.n	8008238 <_dtoa_r+0xaa0>
 8008252:	f04f 0900 	mov.w	r9, #0
 8008256:	2201      	movs	r2, #1
 8008258:	9904      	ldr	r1, [sp, #16]
 800825a:	4620      	mov	r0, r4
 800825c:	f000 fa36 	bl	80086cc <__lshift>
 8008260:	4639      	mov	r1, r7
 8008262:	9004      	str	r0, [sp, #16]
 8008264:	f000 fa86 	bl	8008774 <__mcmp>
 8008268:	2800      	cmp	r0, #0
 800826a:	dcb6      	bgt.n	80081da <_dtoa_r+0xa42>
 800826c:	d102      	bne.n	8008274 <_dtoa_r+0xadc>
 800826e:	f018 0f01 	tst.w	r8, #1
 8008272:	d1b2      	bne.n	80081da <_dtoa_r+0xa42>
 8008274:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008278:	2b30      	cmp	r3, #48	; 0x30
 800827a:	f105 32ff 	add.w	r2, r5, #4294967295
 800827e:	f47f af0a 	bne.w	8008096 <_dtoa_r+0x8fe>
 8008282:	4615      	mov	r5, r2
 8008284:	e7f6      	b.n	8008274 <_dtoa_r+0xadc>
 8008286:	4593      	cmp	fp, r2
 8008288:	d105      	bne.n	8008296 <_dtoa_r+0xafe>
 800828a:	2331      	movs	r3, #49	; 0x31
 800828c:	f10a 0a01 	add.w	sl, sl, #1
 8008290:	f88b 3000 	strb.w	r3, [fp]
 8008294:	e6ff      	b.n	8008096 <_dtoa_r+0x8fe>
 8008296:	4615      	mov	r5, r2
 8008298:	e79f      	b.n	80081da <_dtoa_r+0xa42>
 800829a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008300 <_dtoa_r+0xb68>
 800829e:	e007      	b.n	80082b0 <_dtoa_r+0xb18>
 80082a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082a2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008304 <_dtoa_r+0xb6c>
 80082a6:	b11b      	cbz	r3, 80082b0 <_dtoa_r+0xb18>
 80082a8:	f10b 0308 	add.w	r3, fp, #8
 80082ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	4658      	mov	r0, fp
 80082b2:	b017      	add	sp, #92	; 0x5c
 80082b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b8:	9b06      	ldr	r3, [sp, #24]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	f77f ae35 	ble.w	8007f2a <_dtoa_r+0x792>
 80082c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082c2:	9307      	str	r3, [sp, #28]
 80082c4:	e649      	b.n	8007f5a <_dtoa_r+0x7c2>
 80082c6:	9b02      	ldr	r3, [sp, #8]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	dc03      	bgt.n	80082d4 <_dtoa_r+0xb3c>
 80082cc:	9b06      	ldr	r3, [sp, #24]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	f73f aecc 	bgt.w	800806c <_dtoa_r+0x8d4>
 80082d4:	465d      	mov	r5, fp
 80082d6:	4639      	mov	r1, r7
 80082d8:	9804      	ldr	r0, [sp, #16]
 80082da:	f7ff f9cf 	bl	800767c <quorem>
 80082de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80082e2:	f805 8b01 	strb.w	r8, [r5], #1
 80082e6:	9a02      	ldr	r2, [sp, #8]
 80082e8:	eba5 030b 	sub.w	r3, r5, fp
 80082ec:	429a      	cmp	r2, r3
 80082ee:	ddb0      	ble.n	8008252 <_dtoa_r+0xaba>
 80082f0:	2300      	movs	r3, #0
 80082f2:	220a      	movs	r2, #10
 80082f4:	9904      	ldr	r1, [sp, #16]
 80082f6:	4620      	mov	r0, r4
 80082f8:	f000 f872 	bl	80083e0 <__multadd>
 80082fc:	9004      	str	r0, [sp, #16]
 80082fe:	e7ea      	b.n	80082d6 <_dtoa_r+0xb3e>
 8008300:	080090c0 	.word	0x080090c0
 8008304:	080090e4 	.word	0x080090e4

08008308 <_localeconv_r>:
 8008308:	4b04      	ldr	r3, [pc, #16]	; (800831c <_localeconv_r+0x14>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6a18      	ldr	r0, [r3, #32]
 800830e:	4b04      	ldr	r3, [pc, #16]	; (8008320 <_localeconv_r+0x18>)
 8008310:	2800      	cmp	r0, #0
 8008312:	bf08      	it	eq
 8008314:	4618      	moveq	r0, r3
 8008316:	30f0      	adds	r0, #240	; 0xf0
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	20000020 	.word	0x20000020
 8008320:	20000084 	.word	0x20000084

08008324 <malloc>:
 8008324:	4b02      	ldr	r3, [pc, #8]	; (8008330 <malloc+0xc>)
 8008326:	4601      	mov	r1, r0
 8008328:	6818      	ldr	r0, [r3, #0]
 800832a:	f000 bb45 	b.w	80089b8 <_malloc_r>
 800832e:	bf00      	nop
 8008330:	20000020 	.word	0x20000020

08008334 <memcpy>:
 8008334:	b510      	push	{r4, lr}
 8008336:	1e43      	subs	r3, r0, #1
 8008338:	440a      	add	r2, r1
 800833a:	4291      	cmp	r1, r2
 800833c:	d100      	bne.n	8008340 <memcpy+0xc>
 800833e:	bd10      	pop	{r4, pc}
 8008340:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008344:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008348:	e7f7      	b.n	800833a <memcpy+0x6>

0800834a <_Balloc>:
 800834a:	b570      	push	{r4, r5, r6, lr}
 800834c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800834e:	4604      	mov	r4, r0
 8008350:	460e      	mov	r6, r1
 8008352:	b93d      	cbnz	r5, 8008364 <_Balloc+0x1a>
 8008354:	2010      	movs	r0, #16
 8008356:	f7ff ffe5 	bl	8008324 <malloc>
 800835a:	6260      	str	r0, [r4, #36]	; 0x24
 800835c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008360:	6005      	str	r5, [r0, #0]
 8008362:	60c5      	str	r5, [r0, #12]
 8008364:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008366:	68eb      	ldr	r3, [r5, #12]
 8008368:	b183      	cbz	r3, 800838c <_Balloc+0x42>
 800836a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008372:	b9b8      	cbnz	r0, 80083a4 <_Balloc+0x5a>
 8008374:	2101      	movs	r1, #1
 8008376:	fa01 f506 	lsl.w	r5, r1, r6
 800837a:	1d6a      	adds	r2, r5, #5
 800837c:	0092      	lsls	r2, r2, #2
 800837e:	4620      	mov	r0, r4
 8008380:	f000 fabe 	bl	8008900 <_calloc_r>
 8008384:	b160      	cbz	r0, 80083a0 <_Balloc+0x56>
 8008386:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800838a:	e00e      	b.n	80083aa <_Balloc+0x60>
 800838c:	2221      	movs	r2, #33	; 0x21
 800838e:	2104      	movs	r1, #4
 8008390:	4620      	mov	r0, r4
 8008392:	f000 fab5 	bl	8008900 <_calloc_r>
 8008396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008398:	60e8      	str	r0, [r5, #12]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1e4      	bne.n	800836a <_Balloc+0x20>
 80083a0:	2000      	movs	r0, #0
 80083a2:	bd70      	pop	{r4, r5, r6, pc}
 80083a4:	6802      	ldr	r2, [r0, #0]
 80083a6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80083aa:	2300      	movs	r3, #0
 80083ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083b0:	e7f7      	b.n	80083a2 <_Balloc+0x58>

080083b2 <_Bfree>:
 80083b2:	b570      	push	{r4, r5, r6, lr}
 80083b4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80083b6:	4606      	mov	r6, r0
 80083b8:	460d      	mov	r5, r1
 80083ba:	b93c      	cbnz	r4, 80083cc <_Bfree+0x1a>
 80083bc:	2010      	movs	r0, #16
 80083be:	f7ff ffb1 	bl	8008324 <malloc>
 80083c2:	6270      	str	r0, [r6, #36]	; 0x24
 80083c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083c8:	6004      	str	r4, [r0, #0]
 80083ca:	60c4      	str	r4, [r0, #12]
 80083cc:	b13d      	cbz	r5, 80083de <_Bfree+0x2c>
 80083ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80083d0:	686a      	ldr	r2, [r5, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083d8:	6029      	str	r1, [r5, #0]
 80083da:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80083de:	bd70      	pop	{r4, r5, r6, pc}

080083e0 <__multadd>:
 80083e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e4:	690d      	ldr	r5, [r1, #16]
 80083e6:	461f      	mov	r7, r3
 80083e8:	4606      	mov	r6, r0
 80083ea:	460c      	mov	r4, r1
 80083ec:	f101 0c14 	add.w	ip, r1, #20
 80083f0:	2300      	movs	r3, #0
 80083f2:	f8dc 0000 	ldr.w	r0, [ip]
 80083f6:	b281      	uxth	r1, r0
 80083f8:	fb02 7101 	mla	r1, r2, r1, r7
 80083fc:	0c0f      	lsrs	r7, r1, #16
 80083fe:	0c00      	lsrs	r0, r0, #16
 8008400:	fb02 7000 	mla	r0, r2, r0, r7
 8008404:	b289      	uxth	r1, r1
 8008406:	3301      	adds	r3, #1
 8008408:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800840c:	429d      	cmp	r5, r3
 800840e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008412:	f84c 1b04 	str.w	r1, [ip], #4
 8008416:	dcec      	bgt.n	80083f2 <__multadd+0x12>
 8008418:	b1d7      	cbz	r7, 8008450 <__multadd+0x70>
 800841a:	68a3      	ldr	r3, [r4, #8]
 800841c:	42ab      	cmp	r3, r5
 800841e:	dc12      	bgt.n	8008446 <__multadd+0x66>
 8008420:	6861      	ldr	r1, [r4, #4]
 8008422:	4630      	mov	r0, r6
 8008424:	3101      	adds	r1, #1
 8008426:	f7ff ff90 	bl	800834a <_Balloc>
 800842a:	6922      	ldr	r2, [r4, #16]
 800842c:	3202      	adds	r2, #2
 800842e:	f104 010c 	add.w	r1, r4, #12
 8008432:	4680      	mov	r8, r0
 8008434:	0092      	lsls	r2, r2, #2
 8008436:	300c      	adds	r0, #12
 8008438:	f7ff ff7c 	bl	8008334 <memcpy>
 800843c:	4621      	mov	r1, r4
 800843e:	4630      	mov	r0, r6
 8008440:	f7ff ffb7 	bl	80083b2 <_Bfree>
 8008444:	4644      	mov	r4, r8
 8008446:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800844a:	3501      	adds	r5, #1
 800844c:	615f      	str	r7, [r3, #20]
 800844e:	6125      	str	r5, [r4, #16]
 8008450:	4620      	mov	r0, r4
 8008452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008456 <__hi0bits>:
 8008456:	0c02      	lsrs	r2, r0, #16
 8008458:	0412      	lsls	r2, r2, #16
 800845a:	4603      	mov	r3, r0
 800845c:	b9b2      	cbnz	r2, 800848c <__hi0bits+0x36>
 800845e:	0403      	lsls	r3, r0, #16
 8008460:	2010      	movs	r0, #16
 8008462:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008466:	bf04      	itt	eq
 8008468:	021b      	lsleq	r3, r3, #8
 800846a:	3008      	addeq	r0, #8
 800846c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008470:	bf04      	itt	eq
 8008472:	011b      	lsleq	r3, r3, #4
 8008474:	3004      	addeq	r0, #4
 8008476:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800847a:	bf04      	itt	eq
 800847c:	009b      	lsleq	r3, r3, #2
 800847e:	3002      	addeq	r0, #2
 8008480:	2b00      	cmp	r3, #0
 8008482:	db06      	blt.n	8008492 <__hi0bits+0x3c>
 8008484:	005b      	lsls	r3, r3, #1
 8008486:	d503      	bpl.n	8008490 <__hi0bits+0x3a>
 8008488:	3001      	adds	r0, #1
 800848a:	4770      	bx	lr
 800848c:	2000      	movs	r0, #0
 800848e:	e7e8      	b.n	8008462 <__hi0bits+0xc>
 8008490:	2020      	movs	r0, #32
 8008492:	4770      	bx	lr

08008494 <__lo0bits>:
 8008494:	6803      	ldr	r3, [r0, #0]
 8008496:	f013 0207 	ands.w	r2, r3, #7
 800849a:	4601      	mov	r1, r0
 800849c:	d00b      	beq.n	80084b6 <__lo0bits+0x22>
 800849e:	07da      	lsls	r2, r3, #31
 80084a0:	d423      	bmi.n	80084ea <__lo0bits+0x56>
 80084a2:	0798      	lsls	r0, r3, #30
 80084a4:	bf49      	itett	mi
 80084a6:	085b      	lsrmi	r3, r3, #1
 80084a8:	089b      	lsrpl	r3, r3, #2
 80084aa:	2001      	movmi	r0, #1
 80084ac:	600b      	strmi	r3, [r1, #0]
 80084ae:	bf5c      	itt	pl
 80084b0:	600b      	strpl	r3, [r1, #0]
 80084b2:	2002      	movpl	r0, #2
 80084b4:	4770      	bx	lr
 80084b6:	b298      	uxth	r0, r3
 80084b8:	b9a8      	cbnz	r0, 80084e6 <__lo0bits+0x52>
 80084ba:	0c1b      	lsrs	r3, r3, #16
 80084bc:	2010      	movs	r0, #16
 80084be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80084c2:	bf04      	itt	eq
 80084c4:	0a1b      	lsreq	r3, r3, #8
 80084c6:	3008      	addeq	r0, #8
 80084c8:	071a      	lsls	r2, r3, #28
 80084ca:	bf04      	itt	eq
 80084cc:	091b      	lsreq	r3, r3, #4
 80084ce:	3004      	addeq	r0, #4
 80084d0:	079a      	lsls	r2, r3, #30
 80084d2:	bf04      	itt	eq
 80084d4:	089b      	lsreq	r3, r3, #2
 80084d6:	3002      	addeq	r0, #2
 80084d8:	07da      	lsls	r2, r3, #31
 80084da:	d402      	bmi.n	80084e2 <__lo0bits+0x4e>
 80084dc:	085b      	lsrs	r3, r3, #1
 80084de:	d006      	beq.n	80084ee <__lo0bits+0x5a>
 80084e0:	3001      	adds	r0, #1
 80084e2:	600b      	str	r3, [r1, #0]
 80084e4:	4770      	bx	lr
 80084e6:	4610      	mov	r0, r2
 80084e8:	e7e9      	b.n	80084be <__lo0bits+0x2a>
 80084ea:	2000      	movs	r0, #0
 80084ec:	4770      	bx	lr
 80084ee:	2020      	movs	r0, #32
 80084f0:	4770      	bx	lr

080084f2 <__i2b>:
 80084f2:	b510      	push	{r4, lr}
 80084f4:	460c      	mov	r4, r1
 80084f6:	2101      	movs	r1, #1
 80084f8:	f7ff ff27 	bl	800834a <_Balloc>
 80084fc:	2201      	movs	r2, #1
 80084fe:	6144      	str	r4, [r0, #20]
 8008500:	6102      	str	r2, [r0, #16]
 8008502:	bd10      	pop	{r4, pc}

08008504 <__multiply>:
 8008504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008508:	4614      	mov	r4, r2
 800850a:	690a      	ldr	r2, [r1, #16]
 800850c:	6923      	ldr	r3, [r4, #16]
 800850e:	429a      	cmp	r2, r3
 8008510:	bfb8      	it	lt
 8008512:	460b      	movlt	r3, r1
 8008514:	4688      	mov	r8, r1
 8008516:	bfbc      	itt	lt
 8008518:	46a0      	movlt	r8, r4
 800851a:	461c      	movlt	r4, r3
 800851c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008520:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008524:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008528:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800852c:	eb07 0609 	add.w	r6, r7, r9
 8008530:	42b3      	cmp	r3, r6
 8008532:	bfb8      	it	lt
 8008534:	3101      	addlt	r1, #1
 8008536:	f7ff ff08 	bl	800834a <_Balloc>
 800853a:	f100 0514 	add.w	r5, r0, #20
 800853e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008542:	462b      	mov	r3, r5
 8008544:	2200      	movs	r2, #0
 8008546:	4573      	cmp	r3, lr
 8008548:	d316      	bcc.n	8008578 <__multiply+0x74>
 800854a:	f104 0214 	add.w	r2, r4, #20
 800854e:	f108 0114 	add.w	r1, r8, #20
 8008552:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008556:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	9b00      	ldr	r3, [sp, #0]
 800855e:	9201      	str	r2, [sp, #4]
 8008560:	4293      	cmp	r3, r2
 8008562:	d80c      	bhi.n	800857e <__multiply+0x7a>
 8008564:	2e00      	cmp	r6, #0
 8008566:	dd03      	ble.n	8008570 <__multiply+0x6c>
 8008568:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800856c:	2b00      	cmp	r3, #0
 800856e:	d05d      	beq.n	800862c <__multiply+0x128>
 8008570:	6106      	str	r6, [r0, #16]
 8008572:	b003      	add	sp, #12
 8008574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008578:	f843 2b04 	str.w	r2, [r3], #4
 800857c:	e7e3      	b.n	8008546 <__multiply+0x42>
 800857e:	f8b2 b000 	ldrh.w	fp, [r2]
 8008582:	f1bb 0f00 	cmp.w	fp, #0
 8008586:	d023      	beq.n	80085d0 <__multiply+0xcc>
 8008588:	4689      	mov	r9, r1
 800858a:	46ac      	mov	ip, r5
 800858c:	f04f 0800 	mov.w	r8, #0
 8008590:	f859 4b04 	ldr.w	r4, [r9], #4
 8008594:	f8dc a000 	ldr.w	sl, [ip]
 8008598:	b2a3      	uxth	r3, r4
 800859a:	fa1f fa8a 	uxth.w	sl, sl
 800859e:	fb0b a303 	mla	r3, fp, r3, sl
 80085a2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80085a6:	f8dc 4000 	ldr.w	r4, [ip]
 80085aa:	4443      	add	r3, r8
 80085ac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80085b0:	fb0b 840a 	mla	r4, fp, sl, r8
 80085b4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80085b8:	46e2      	mov	sl, ip
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80085c0:	454f      	cmp	r7, r9
 80085c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80085c6:	f84a 3b04 	str.w	r3, [sl], #4
 80085ca:	d82b      	bhi.n	8008624 <__multiply+0x120>
 80085cc:	f8cc 8004 	str.w	r8, [ip, #4]
 80085d0:	9b01      	ldr	r3, [sp, #4]
 80085d2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80085d6:	3204      	adds	r2, #4
 80085d8:	f1ba 0f00 	cmp.w	sl, #0
 80085dc:	d020      	beq.n	8008620 <__multiply+0x11c>
 80085de:	682b      	ldr	r3, [r5, #0]
 80085e0:	4689      	mov	r9, r1
 80085e2:	46a8      	mov	r8, r5
 80085e4:	f04f 0b00 	mov.w	fp, #0
 80085e8:	f8b9 c000 	ldrh.w	ip, [r9]
 80085ec:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80085f0:	fb0a 440c 	mla	r4, sl, ip, r4
 80085f4:	445c      	add	r4, fp
 80085f6:	46c4      	mov	ip, r8
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80085fe:	f84c 3b04 	str.w	r3, [ip], #4
 8008602:	f859 3b04 	ldr.w	r3, [r9], #4
 8008606:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800860a:	0c1b      	lsrs	r3, r3, #16
 800860c:	fb0a b303 	mla	r3, sl, r3, fp
 8008610:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008614:	454f      	cmp	r7, r9
 8008616:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800861a:	d805      	bhi.n	8008628 <__multiply+0x124>
 800861c:	f8c8 3004 	str.w	r3, [r8, #4]
 8008620:	3504      	adds	r5, #4
 8008622:	e79b      	b.n	800855c <__multiply+0x58>
 8008624:	46d4      	mov	ip, sl
 8008626:	e7b3      	b.n	8008590 <__multiply+0x8c>
 8008628:	46e0      	mov	r8, ip
 800862a:	e7dd      	b.n	80085e8 <__multiply+0xe4>
 800862c:	3e01      	subs	r6, #1
 800862e:	e799      	b.n	8008564 <__multiply+0x60>

08008630 <__pow5mult>:
 8008630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008634:	4615      	mov	r5, r2
 8008636:	f012 0203 	ands.w	r2, r2, #3
 800863a:	4606      	mov	r6, r0
 800863c:	460f      	mov	r7, r1
 800863e:	d007      	beq.n	8008650 <__pow5mult+0x20>
 8008640:	3a01      	subs	r2, #1
 8008642:	4c21      	ldr	r4, [pc, #132]	; (80086c8 <__pow5mult+0x98>)
 8008644:	2300      	movs	r3, #0
 8008646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800864a:	f7ff fec9 	bl	80083e0 <__multadd>
 800864e:	4607      	mov	r7, r0
 8008650:	10ad      	asrs	r5, r5, #2
 8008652:	d035      	beq.n	80086c0 <__pow5mult+0x90>
 8008654:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008656:	b93c      	cbnz	r4, 8008668 <__pow5mult+0x38>
 8008658:	2010      	movs	r0, #16
 800865a:	f7ff fe63 	bl	8008324 <malloc>
 800865e:	6270      	str	r0, [r6, #36]	; 0x24
 8008660:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008664:	6004      	str	r4, [r0, #0]
 8008666:	60c4      	str	r4, [r0, #12]
 8008668:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800866c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008670:	b94c      	cbnz	r4, 8008686 <__pow5mult+0x56>
 8008672:	f240 2171 	movw	r1, #625	; 0x271
 8008676:	4630      	mov	r0, r6
 8008678:	f7ff ff3b 	bl	80084f2 <__i2b>
 800867c:	2300      	movs	r3, #0
 800867e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008682:	4604      	mov	r4, r0
 8008684:	6003      	str	r3, [r0, #0]
 8008686:	f04f 0800 	mov.w	r8, #0
 800868a:	07eb      	lsls	r3, r5, #31
 800868c:	d50a      	bpl.n	80086a4 <__pow5mult+0x74>
 800868e:	4639      	mov	r1, r7
 8008690:	4622      	mov	r2, r4
 8008692:	4630      	mov	r0, r6
 8008694:	f7ff ff36 	bl	8008504 <__multiply>
 8008698:	4639      	mov	r1, r7
 800869a:	4681      	mov	r9, r0
 800869c:	4630      	mov	r0, r6
 800869e:	f7ff fe88 	bl	80083b2 <_Bfree>
 80086a2:	464f      	mov	r7, r9
 80086a4:	106d      	asrs	r5, r5, #1
 80086a6:	d00b      	beq.n	80086c0 <__pow5mult+0x90>
 80086a8:	6820      	ldr	r0, [r4, #0]
 80086aa:	b938      	cbnz	r0, 80086bc <__pow5mult+0x8c>
 80086ac:	4622      	mov	r2, r4
 80086ae:	4621      	mov	r1, r4
 80086b0:	4630      	mov	r0, r6
 80086b2:	f7ff ff27 	bl	8008504 <__multiply>
 80086b6:	6020      	str	r0, [r4, #0]
 80086b8:	f8c0 8000 	str.w	r8, [r0]
 80086bc:	4604      	mov	r4, r0
 80086be:	e7e4      	b.n	800868a <__pow5mult+0x5a>
 80086c0:	4638      	mov	r0, r7
 80086c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086c6:	bf00      	nop
 80086c8:	08009248 	.word	0x08009248

080086cc <__lshift>:
 80086cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d0:	460c      	mov	r4, r1
 80086d2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086d6:	6923      	ldr	r3, [r4, #16]
 80086d8:	6849      	ldr	r1, [r1, #4]
 80086da:	eb0a 0903 	add.w	r9, sl, r3
 80086de:	68a3      	ldr	r3, [r4, #8]
 80086e0:	4607      	mov	r7, r0
 80086e2:	4616      	mov	r6, r2
 80086e4:	f109 0501 	add.w	r5, r9, #1
 80086e8:	42ab      	cmp	r3, r5
 80086ea:	db32      	blt.n	8008752 <__lshift+0x86>
 80086ec:	4638      	mov	r0, r7
 80086ee:	f7ff fe2c 	bl	800834a <_Balloc>
 80086f2:	2300      	movs	r3, #0
 80086f4:	4680      	mov	r8, r0
 80086f6:	f100 0114 	add.w	r1, r0, #20
 80086fa:	461a      	mov	r2, r3
 80086fc:	4553      	cmp	r3, sl
 80086fe:	db2b      	blt.n	8008758 <__lshift+0x8c>
 8008700:	6920      	ldr	r0, [r4, #16]
 8008702:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008706:	f104 0314 	add.w	r3, r4, #20
 800870a:	f016 021f 	ands.w	r2, r6, #31
 800870e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008712:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008716:	d025      	beq.n	8008764 <__lshift+0x98>
 8008718:	f1c2 0e20 	rsb	lr, r2, #32
 800871c:	2000      	movs	r0, #0
 800871e:	681e      	ldr	r6, [r3, #0]
 8008720:	468a      	mov	sl, r1
 8008722:	4096      	lsls	r6, r2
 8008724:	4330      	orrs	r0, r6
 8008726:	f84a 0b04 	str.w	r0, [sl], #4
 800872a:	f853 0b04 	ldr.w	r0, [r3], #4
 800872e:	459c      	cmp	ip, r3
 8008730:	fa20 f00e 	lsr.w	r0, r0, lr
 8008734:	d814      	bhi.n	8008760 <__lshift+0x94>
 8008736:	6048      	str	r0, [r1, #4]
 8008738:	b108      	cbz	r0, 800873e <__lshift+0x72>
 800873a:	f109 0502 	add.w	r5, r9, #2
 800873e:	3d01      	subs	r5, #1
 8008740:	4638      	mov	r0, r7
 8008742:	f8c8 5010 	str.w	r5, [r8, #16]
 8008746:	4621      	mov	r1, r4
 8008748:	f7ff fe33 	bl	80083b2 <_Bfree>
 800874c:	4640      	mov	r0, r8
 800874e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008752:	3101      	adds	r1, #1
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	e7c7      	b.n	80086e8 <__lshift+0x1c>
 8008758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800875c:	3301      	adds	r3, #1
 800875e:	e7cd      	b.n	80086fc <__lshift+0x30>
 8008760:	4651      	mov	r1, sl
 8008762:	e7dc      	b.n	800871e <__lshift+0x52>
 8008764:	3904      	subs	r1, #4
 8008766:	f853 2b04 	ldr.w	r2, [r3], #4
 800876a:	f841 2f04 	str.w	r2, [r1, #4]!
 800876e:	459c      	cmp	ip, r3
 8008770:	d8f9      	bhi.n	8008766 <__lshift+0x9a>
 8008772:	e7e4      	b.n	800873e <__lshift+0x72>

08008774 <__mcmp>:
 8008774:	6903      	ldr	r3, [r0, #16]
 8008776:	690a      	ldr	r2, [r1, #16]
 8008778:	1a9b      	subs	r3, r3, r2
 800877a:	b530      	push	{r4, r5, lr}
 800877c:	d10c      	bne.n	8008798 <__mcmp+0x24>
 800877e:	0092      	lsls	r2, r2, #2
 8008780:	3014      	adds	r0, #20
 8008782:	3114      	adds	r1, #20
 8008784:	1884      	adds	r4, r0, r2
 8008786:	4411      	add	r1, r2
 8008788:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800878c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008790:	4295      	cmp	r5, r2
 8008792:	d003      	beq.n	800879c <__mcmp+0x28>
 8008794:	d305      	bcc.n	80087a2 <__mcmp+0x2e>
 8008796:	2301      	movs	r3, #1
 8008798:	4618      	mov	r0, r3
 800879a:	bd30      	pop	{r4, r5, pc}
 800879c:	42a0      	cmp	r0, r4
 800879e:	d3f3      	bcc.n	8008788 <__mcmp+0x14>
 80087a0:	e7fa      	b.n	8008798 <__mcmp+0x24>
 80087a2:	f04f 33ff 	mov.w	r3, #4294967295
 80087a6:	e7f7      	b.n	8008798 <__mcmp+0x24>

080087a8 <__mdiff>:
 80087a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ac:	460d      	mov	r5, r1
 80087ae:	4607      	mov	r7, r0
 80087b0:	4611      	mov	r1, r2
 80087b2:	4628      	mov	r0, r5
 80087b4:	4614      	mov	r4, r2
 80087b6:	f7ff ffdd 	bl	8008774 <__mcmp>
 80087ba:	1e06      	subs	r6, r0, #0
 80087bc:	d108      	bne.n	80087d0 <__mdiff+0x28>
 80087be:	4631      	mov	r1, r6
 80087c0:	4638      	mov	r0, r7
 80087c2:	f7ff fdc2 	bl	800834a <_Balloc>
 80087c6:	2301      	movs	r3, #1
 80087c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80087cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d0:	bfa4      	itt	ge
 80087d2:	4623      	movge	r3, r4
 80087d4:	462c      	movge	r4, r5
 80087d6:	4638      	mov	r0, r7
 80087d8:	6861      	ldr	r1, [r4, #4]
 80087da:	bfa6      	itte	ge
 80087dc:	461d      	movge	r5, r3
 80087de:	2600      	movge	r6, #0
 80087e0:	2601      	movlt	r6, #1
 80087e2:	f7ff fdb2 	bl	800834a <_Balloc>
 80087e6:	692b      	ldr	r3, [r5, #16]
 80087e8:	60c6      	str	r6, [r0, #12]
 80087ea:	6926      	ldr	r6, [r4, #16]
 80087ec:	f105 0914 	add.w	r9, r5, #20
 80087f0:	f104 0214 	add.w	r2, r4, #20
 80087f4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80087f8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80087fc:	f100 0514 	add.w	r5, r0, #20
 8008800:	f04f 0e00 	mov.w	lr, #0
 8008804:	f852 ab04 	ldr.w	sl, [r2], #4
 8008808:	f859 4b04 	ldr.w	r4, [r9], #4
 800880c:	fa1e f18a 	uxtah	r1, lr, sl
 8008810:	b2a3      	uxth	r3, r4
 8008812:	1ac9      	subs	r1, r1, r3
 8008814:	0c23      	lsrs	r3, r4, #16
 8008816:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800881a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800881e:	b289      	uxth	r1, r1
 8008820:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008824:	45c8      	cmp	r8, r9
 8008826:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800882a:	4694      	mov	ip, r2
 800882c:	f845 3b04 	str.w	r3, [r5], #4
 8008830:	d8e8      	bhi.n	8008804 <__mdiff+0x5c>
 8008832:	45bc      	cmp	ip, r7
 8008834:	d304      	bcc.n	8008840 <__mdiff+0x98>
 8008836:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800883a:	b183      	cbz	r3, 800885e <__mdiff+0xb6>
 800883c:	6106      	str	r6, [r0, #16]
 800883e:	e7c5      	b.n	80087cc <__mdiff+0x24>
 8008840:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008844:	fa1e f381 	uxtah	r3, lr, r1
 8008848:	141a      	asrs	r2, r3, #16
 800884a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800884e:	b29b      	uxth	r3, r3
 8008850:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008854:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008858:	f845 3b04 	str.w	r3, [r5], #4
 800885c:	e7e9      	b.n	8008832 <__mdiff+0x8a>
 800885e:	3e01      	subs	r6, #1
 8008860:	e7e9      	b.n	8008836 <__mdiff+0x8e>

08008862 <__d2b>:
 8008862:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008866:	460e      	mov	r6, r1
 8008868:	2101      	movs	r1, #1
 800886a:	ec59 8b10 	vmov	r8, r9, d0
 800886e:	4615      	mov	r5, r2
 8008870:	f7ff fd6b 	bl	800834a <_Balloc>
 8008874:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008878:	4607      	mov	r7, r0
 800887a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800887e:	bb34      	cbnz	r4, 80088ce <__d2b+0x6c>
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	f1b8 0300 	subs.w	r3, r8, #0
 8008886:	d027      	beq.n	80088d8 <__d2b+0x76>
 8008888:	a802      	add	r0, sp, #8
 800888a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800888e:	f7ff fe01 	bl	8008494 <__lo0bits>
 8008892:	9900      	ldr	r1, [sp, #0]
 8008894:	b1f0      	cbz	r0, 80088d4 <__d2b+0x72>
 8008896:	9a01      	ldr	r2, [sp, #4]
 8008898:	f1c0 0320 	rsb	r3, r0, #32
 800889c:	fa02 f303 	lsl.w	r3, r2, r3
 80088a0:	430b      	orrs	r3, r1
 80088a2:	40c2      	lsrs	r2, r0
 80088a4:	617b      	str	r3, [r7, #20]
 80088a6:	9201      	str	r2, [sp, #4]
 80088a8:	9b01      	ldr	r3, [sp, #4]
 80088aa:	61bb      	str	r3, [r7, #24]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	bf14      	ite	ne
 80088b0:	2102      	movne	r1, #2
 80088b2:	2101      	moveq	r1, #1
 80088b4:	6139      	str	r1, [r7, #16]
 80088b6:	b1c4      	cbz	r4, 80088ea <__d2b+0x88>
 80088b8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80088bc:	4404      	add	r4, r0
 80088be:	6034      	str	r4, [r6, #0]
 80088c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088c4:	6028      	str	r0, [r5, #0]
 80088c6:	4638      	mov	r0, r7
 80088c8:	b003      	add	sp, #12
 80088ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088d2:	e7d5      	b.n	8008880 <__d2b+0x1e>
 80088d4:	6179      	str	r1, [r7, #20]
 80088d6:	e7e7      	b.n	80088a8 <__d2b+0x46>
 80088d8:	a801      	add	r0, sp, #4
 80088da:	f7ff fddb 	bl	8008494 <__lo0bits>
 80088de:	9b01      	ldr	r3, [sp, #4]
 80088e0:	617b      	str	r3, [r7, #20]
 80088e2:	2101      	movs	r1, #1
 80088e4:	6139      	str	r1, [r7, #16]
 80088e6:	3020      	adds	r0, #32
 80088e8:	e7e5      	b.n	80088b6 <__d2b+0x54>
 80088ea:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80088ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088f2:	6030      	str	r0, [r6, #0]
 80088f4:	6918      	ldr	r0, [r3, #16]
 80088f6:	f7ff fdae 	bl	8008456 <__hi0bits>
 80088fa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80088fe:	e7e1      	b.n	80088c4 <__d2b+0x62>

08008900 <_calloc_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	fb02 f401 	mul.w	r4, r2, r1
 8008906:	4621      	mov	r1, r4
 8008908:	f000 f856 	bl	80089b8 <_malloc_r>
 800890c:	4605      	mov	r5, r0
 800890e:	b118      	cbz	r0, 8008918 <_calloc_r+0x18>
 8008910:	4622      	mov	r2, r4
 8008912:	2100      	movs	r1, #0
 8008914:	f7fe fa2e 	bl	8006d74 <memset>
 8008918:	4628      	mov	r0, r5
 800891a:	bd38      	pop	{r3, r4, r5, pc}

0800891c <_free_r>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	4605      	mov	r5, r0
 8008920:	2900      	cmp	r1, #0
 8008922:	d045      	beq.n	80089b0 <_free_r+0x94>
 8008924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008928:	1f0c      	subs	r4, r1, #4
 800892a:	2b00      	cmp	r3, #0
 800892c:	bfb8      	it	lt
 800892e:	18e4      	addlt	r4, r4, r3
 8008930:	f000 fa29 	bl	8008d86 <__malloc_lock>
 8008934:	4a1f      	ldr	r2, [pc, #124]	; (80089b4 <_free_r+0x98>)
 8008936:	6813      	ldr	r3, [r2, #0]
 8008938:	4610      	mov	r0, r2
 800893a:	b933      	cbnz	r3, 800894a <_free_r+0x2e>
 800893c:	6063      	str	r3, [r4, #4]
 800893e:	6014      	str	r4, [r2, #0]
 8008940:	4628      	mov	r0, r5
 8008942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008946:	f000 ba1f 	b.w	8008d88 <__malloc_unlock>
 800894a:	42a3      	cmp	r3, r4
 800894c:	d90c      	bls.n	8008968 <_free_r+0x4c>
 800894e:	6821      	ldr	r1, [r4, #0]
 8008950:	1862      	adds	r2, r4, r1
 8008952:	4293      	cmp	r3, r2
 8008954:	bf04      	itt	eq
 8008956:	681a      	ldreq	r2, [r3, #0]
 8008958:	685b      	ldreq	r3, [r3, #4]
 800895a:	6063      	str	r3, [r4, #4]
 800895c:	bf04      	itt	eq
 800895e:	1852      	addeq	r2, r2, r1
 8008960:	6022      	streq	r2, [r4, #0]
 8008962:	6004      	str	r4, [r0, #0]
 8008964:	e7ec      	b.n	8008940 <_free_r+0x24>
 8008966:	4613      	mov	r3, r2
 8008968:	685a      	ldr	r2, [r3, #4]
 800896a:	b10a      	cbz	r2, 8008970 <_free_r+0x54>
 800896c:	42a2      	cmp	r2, r4
 800896e:	d9fa      	bls.n	8008966 <_free_r+0x4a>
 8008970:	6819      	ldr	r1, [r3, #0]
 8008972:	1858      	adds	r0, r3, r1
 8008974:	42a0      	cmp	r0, r4
 8008976:	d10b      	bne.n	8008990 <_free_r+0x74>
 8008978:	6820      	ldr	r0, [r4, #0]
 800897a:	4401      	add	r1, r0
 800897c:	1858      	adds	r0, r3, r1
 800897e:	4282      	cmp	r2, r0
 8008980:	6019      	str	r1, [r3, #0]
 8008982:	d1dd      	bne.n	8008940 <_free_r+0x24>
 8008984:	6810      	ldr	r0, [r2, #0]
 8008986:	6852      	ldr	r2, [r2, #4]
 8008988:	605a      	str	r2, [r3, #4]
 800898a:	4401      	add	r1, r0
 800898c:	6019      	str	r1, [r3, #0]
 800898e:	e7d7      	b.n	8008940 <_free_r+0x24>
 8008990:	d902      	bls.n	8008998 <_free_r+0x7c>
 8008992:	230c      	movs	r3, #12
 8008994:	602b      	str	r3, [r5, #0]
 8008996:	e7d3      	b.n	8008940 <_free_r+0x24>
 8008998:	6820      	ldr	r0, [r4, #0]
 800899a:	1821      	adds	r1, r4, r0
 800899c:	428a      	cmp	r2, r1
 800899e:	bf04      	itt	eq
 80089a0:	6811      	ldreq	r1, [r2, #0]
 80089a2:	6852      	ldreq	r2, [r2, #4]
 80089a4:	6062      	str	r2, [r4, #4]
 80089a6:	bf04      	itt	eq
 80089a8:	1809      	addeq	r1, r1, r0
 80089aa:	6021      	streq	r1, [r4, #0]
 80089ac:	605c      	str	r4, [r3, #4]
 80089ae:	e7c7      	b.n	8008940 <_free_r+0x24>
 80089b0:	bd38      	pop	{r3, r4, r5, pc}
 80089b2:	bf00      	nop
 80089b4:	20000228 	.word	0x20000228

080089b8 <_malloc_r>:
 80089b8:	b570      	push	{r4, r5, r6, lr}
 80089ba:	1ccd      	adds	r5, r1, #3
 80089bc:	f025 0503 	bic.w	r5, r5, #3
 80089c0:	3508      	adds	r5, #8
 80089c2:	2d0c      	cmp	r5, #12
 80089c4:	bf38      	it	cc
 80089c6:	250c      	movcc	r5, #12
 80089c8:	2d00      	cmp	r5, #0
 80089ca:	4606      	mov	r6, r0
 80089cc:	db01      	blt.n	80089d2 <_malloc_r+0x1a>
 80089ce:	42a9      	cmp	r1, r5
 80089d0:	d903      	bls.n	80089da <_malloc_r+0x22>
 80089d2:	230c      	movs	r3, #12
 80089d4:	6033      	str	r3, [r6, #0]
 80089d6:	2000      	movs	r0, #0
 80089d8:	bd70      	pop	{r4, r5, r6, pc}
 80089da:	f000 f9d4 	bl	8008d86 <__malloc_lock>
 80089de:	4a21      	ldr	r2, [pc, #132]	; (8008a64 <_malloc_r+0xac>)
 80089e0:	6814      	ldr	r4, [r2, #0]
 80089e2:	4621      	mov	r1, r4
 80089e4:	b991      	cbnz	r1, 8008a0c <_malloc_r+0x54>
 80089e6:	4c20      	ldr	r4, [pc, #128]	; (8008a68 <_malloc_r+0xb0>)
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	b91b      	cbnz	r3, 80089f4 <_malloc_r+0x3c>
 80089ec:	4630      	mov	r0, r6
 80089ee:	f000 f98f 	bl	8008d10 <_sbrk_r>
 80089f2:	6020      	str	r0, [r4, #0]
 80089f4:	4629      	mov	r1, r5
 80089f6:	4630      	mov	r0, r6
 80089f8:	f000 f98a 	bl	8008d10 <_sbrk_r>
 80089fc:	1c43      	adds	r3, r0, #1
 80089fe:	d124      	bne.n	8008a4a <_malloc_r+0x92>
 8008a00:	230c      	movs	r3, #12
 8008a02:	6033      	str	r3, [r6, #0]
 8008a04:	4630      	mov	r0, r6
 8008a06:	f000 f9bf 	bl	8008d88 <__malloc_unlock>
 8008a0a:	e7e4      	b.n	80089d6 <_malloc_r+0x1e>
 8008a0c:	680b      	ldr	r3, [r1, #0]
 8008a0e:	1b5b      	subs	r3, r3, r5
 8008a10:	d418      	bmi.n	8008a44 <_malloc_r+0x8c>
 8008a12:	2b0b      	cmp	r3, #11
 8008a14:	d90f      	bls.n	8008a36 <_malloc_r+0x7e>
 8008a16:	600b      	str	r3, [r1, #0]
 8008a18:	50cd      	str	r5, [r1, r3]
 8008a1a:	18cc      	adds	r4, r1, r3
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f000 f9b3 	bl	8008d88 <__malloc_unlock>
 8008a22:	f104 000b 	add.w	r0, r4, #11
 8008a26:	1d23      	adds	r3, r4, #4
 8008a28:	f020 0007 	bic.w	r0, r0, #7
 8008a2c:	1ac3      	subs	r3, r0, r3
 8008a2e:	d0d3      	beq.n	80089d8 <_malloc_r+0x20>
 8008a30:	425a      	negs	r2, r3
 8008a32:	50e2      	str	r2, [r4, r3]
 8008a34:	e7d0      	b.n	80089d8 <_malloc_r+0x20>
 8008a36:	428c      	cmp	r4, r1
 8008a38:	684b      	ldr	r3, [r1, #4]
 8008a3a:	bf16      	itet	ne
 8008a3c:	6063      	strne	r3, [r4, #4]
 8008a3e:	6013      	streq	r3, [r2, #0]
 8008a40:	460c      	movne	r4, r1
 8008a42:	e7eb      	b.n	8008a1c <_malloc_r+0x64>
 8008a44:	460c      	mov	r4, r1
 8008a46:	6849      	ldr	r1, [r1, #4]
 8008a48:	e7cc      	b.n	80089e4 <_malloc_r+0x2c>
 8008a4a:	1cc4      	adds	r4, r0, #3
 8008a4c:	f024 0403 	bic.w	r4, r4, #3
 8008a50:	42a0      	cmp	r0, r4
 8008a52:	d005      	beq.n	8008a60 <_malloc_r+0xa8>
 8008a54:	1a21      	subs	r1, r4, r0
 8008a56:	4630      	mov	r0, r6
 8008a58:	f000 f95a 	bl	8008d10 <_sbrk_r>
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d0cf      	beq.n	8008a00 <_malloc_r+0x48>
 8008a60:	6025      	str	r5, [r4, #0]
 8008a62:	e7db      	b.n	8008a1c <_malloc_r+0x64>
 8008a64:	20000228 	.word	0x20000228
 8008a68:	2000022c 	.word	0x2000022c

08008a6c <__ssputs_r>:
 8008a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a70:	688e      	ldr	r6, [r1, #8]
 8008a72:	429e      	cmp	r6, r3
 8008a74:	4682      	mov	sl, r0
 8008a76:	460c      	mov	r4, r1
 8008a78:	4690      	mov	r8, r2
 8008a7a:	4699      	mov	r9, r3
 8008a7c:	d837      	bhi.n	8008aee <__ssputs_r+0x82>
 8008a7e:	898a      	ldrh	r2, [r1, #12]
 8008a80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a84:	d031      	beq.n	8008aea <__ssputs_r+0x7e>
 8008a86:	6825      	ldr	r5, [r4, #0]
 8008a88:	6909      	ldr	r1, [r1, #16]
 8008a8a:	1a6f      	subs	r7, r5, r1
 8008a8c:	6965      	ldr	r5, [r4, #20]
 8008a8e:	2302      	movs	r3, #2
 8008a90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a94:	fb95 f5f3 	sdiv	r5, r5, r3
 8008a98:	f109 0301 	add.w	r3, r9, #1
 8008a9c:	443b      	add	r3, r7
 8008a9e:	429d      	cmp	r5, r3
 8008aa0:	bf38      	it	cc
 8008aa2:	461d      	movcc	r5, r3
 8008aa4:	0553      	lsls	r3, r2, #21
 8008aa6:	d530      	bpl.n	8008b0a <__ssputs_r+0x9e>
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	f7ff ff85 	bl	80089b8 <_malloc_r>
 8008aae:	4606      	mov	r6, r0
 8008ab0:	b950      	cbnz	r0, 8008ac8 <__ssputs_r+0x5c>
 8008ab2:	230c      	movs	r3, #12
 8008ab4:	f8ca 3000 	str.w	r3, [sl]
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008abe:	81a3      	strh	r3, [r4, #12]
 8008ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac8:	463a      	mov	r2, r7
 8008aca:	6921      	ldr	r1, [r4, #16]
 8008acc:	f7ff fc32 	bl	8008334 <memcpy>
 8008ad0:	89a3      	ldrh	r3, [r4, #12]
 8008ad2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ada:	81a3      	strh	r3, [r4, #12]
 8008adc:	6126      	str	r6, [r4, #16]
 8008ade:	6165      	str	r5, [r4, #20]
 8008ae0:	443e      	add	r6, r7
 8008ae2:	1bed      	subs	r5, r5, r7
 8008ae4:	6026      	str	r6, [r4, #0]
 8008ae6:	60a5      	str	r5, [r4, #8]
 8008ae8:	464e      	mov	r6, r9
 8008aea:	454e      	cmp	r6, r9
 8008aec:	d900      	bls.n	8008af0 <__ssputs_r+0x84>
 8008aee:	464e      	mov	r6, r9
 8008af0:	4632      	mov	r2, r6
 8008af2:	4641      	mov	r1, r8
 8008af4:	6820      	ldr	r0, [r4, #0]
 8008af6:	f000 f92d 	bl	8008d54 <memmove>
 8008afa:	68a3      	ldr	r3, [r4, #8]
 8008afc:	1b9b      	subs	r3, r3, r6
 8008afe:	60a3      	str	r3, [r4, #8]
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	441e      	add	r6, r3
 8008b04:	6026      	str	r6, [r4, #0]
 8008b06:	2000      	movs	r0, #0
 8008b08:	e7dc      	b.n	8008ac4 <__ssputs_r+0x58>
 8008b0a:	462a      	mov	r2, r5
 8008b0c:	f000 f93d 	bl	8008d8a <_realloc_r>
 8008b10:	4606      	mov	r6, r0
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d1e2      	bne.n	8008adc <__ssputs_r+0x70>
 8008b16:	6921      	ldr	r1, [r4, #16]
 8008b18:	4650      	mov	r0, sl
 8008b1a:	f7ff feff 	bl	800891c <_free_r>
 8008b1e:	e7c8      	b.n	8008ab2 <__ssputs_r+0x46>

08008b20 <_svfiprintf_r>:
 8008b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b24:	461d      	mov	r5, r3
 8008b26:	898b      	ldrh	r3, [r1, #12]
 8008b28:	061f      	lsls	r7, r3, #24
 8008b2a:	b09d      	sub	sp, #116	; 0x74
 8008b2c:	4680      	mov	r8, r0
 8008b2e:	460c      	mov	r4, r1
 8008b30:	4616      	mov	r6, r2
 8008b32:	d50f      	bpl.n	8008b54 <_svfiprintf_r+0x34>
 8008b34:	690b      	ldr	r3, [r1, #16]
 8008b36:	b96b      	cbnz	r3, 8008b54 <_svfiprintf_r+0x34>
 8008b38:	2140      	movs	r1, #64	; 0x40
 8008b3a:	f7ff ff3d 	bl	80089b8 <_malloc_r>
 8008b3e:	6020      	str	r0, [r4, #0]
 8008b40:	6120      	str	r0, [r4, #16]
 8008b42:	b928      	cbnz	r0, 8008b50 <_svfiprintf_r+0x30>
 8008b44:	230c      	movs	r3, #12
 8008b46:	f8c8 3000 	str.w	r3, [r8]
 8008b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4e:	e0c8      	b.n	8008ce2 <_svfiprintf_r+0x1c2>
 8008b50:	2340      	movs	r3, #64	; 0x40
 8008b52:	6163      	str	r3, [r4, #20]
 8008b54:	2300      	movs	r3, #0
 8008b56:	9309      	str	r3, [sp, #36]	; 0x24
 8008b58:	2320      	movs	r3, #32
 8008b5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b5e:	2330      	movs	r3, #48	; 0x30
 8008b60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b64:	9503      	str	r5, [sp, #12]
 8008b66:	f04f 0b01 	mov.w	fp, #1
 8008b6a:	4637      	mov	r7, r6
 8008b6c:	463d      	mov	r5, r7
 8008b6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b72:	b10b      	cbz	r3, 8008b78 <_svfiprintf_r+0x58>
 8008b74:	2b25      	cmp	r3, #37	; 0x25
 8008b76:	d13e      	bne.n	8008bf6 <_svfiprintf_r+0xd6>
 8008b78:	ebb7 0a06 	subs.w	sl, r7, r6
 8008b7c:	d00b      	beq.n	8008b96 <_svfiprintf_r+0x76>
 8008b7e:	4653      	mov	r3, sl
 8008b80:	4632      	mov	r2, r6
 8008b82:	4621      	mov	r1, r4
 8008b84:	4640      	mov	r0, r8
 8008b86:	f7ff ff71 	bl	8008a6c <__ssputs_r>
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	f000 80a4 	beq.w	8008cd8 <_svfiprintf_r+0x1b8>
 8008b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b92:	4453      	add	r3, sl
 8008b94:	9309      	str	r3, [sp, #36]	; 0x24
 8008b96:	783b      	ldrb	r3, [r7, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 809d 	beq.w	8008cd8 <_svfiprintf_r+0x1b8>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ba8:	9304      	str	r3, [sp, #16]
 8008baa:	9307      	str	r3, [sp, #28]
 8008bac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bb0:	931a      	str	r3, [sp, #104]	; 0x68
 8008bb2:	462f      	mov	r7, r5
 8008bb4:	2205      	movs	r2, #5
 8008bb6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008bba:	4850      	ldr	r0, [pc, #320]	; (8008cfc <_svfiprintf_r+0x1dc>)
 8008bbc:	f7f7 fb18 	bl	80001f0 <memchr>
 8008bc0:	9b04      	ldr	r3, [sp, #16]
 8008bc2:	b9d0      	cbnz	r0, 8008bfa <_svfiprintf_r+0xda>
 8008bc4:	06d9      	lsls	r1, r3, #27
 8008bc6:	bf44      	itt	mi
 8008bc8:	2220      	movmi	r2, #32
 8008bca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008bce:	071a      	lsls	r2, r3, #28
 8008bd0:	bf44      	itt	mi
 8008bd2:	222b      	movmi	r2, #43	; 0x2b
 8008bd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008bd8:	782a      	ldrb	r2, [r5, #0]
 8008bda:	2a2a      	cmp	r2, #42	; 0x2a
 8008bdc:	d015      	beq.n	8008c0a <_svfiprintf_r+0xea>
 8008bde:	9a07      	ldr	r2, [sp, #28]
 8008be0:	462f      	mov	r7, r5
 8008be2:	2000      	movs	r0, #0
 8008be4:	250a      	movs	r5, #10
 8008be6:	4639      	mov	r1, r7
 8008be8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bec:	3b30      	subs	r3, #48	; 0x30
 8008bee:	2b09      	cmp	r3, #9
 8008bf0:	d94d      	bls.n	8008c8e <_svfiprintf_r+0x16e>
 8008bf2:	b1b8      	cbz	r0, 8008c24 <_svfiprintf_r+0x104>
 8008bf4:	e00f      	b.n	8008c16 <_svfiprintf_r+0xf6>
 8008bf6:	462f      	mov	r7, r5
 8008bf8:	e7b8      	b.n	8008b6c <_svfiprintf_r+0x4c>
 8008bfa:	4a40      	ldr	r2, [pc, #256]	; (8008cfc <_svfiprintf_r+0x1dc>)
 8008bfc:	1a80      	subs	r0, r0, r2
 8008bfe:	fa0b f000 	lsl.w	r0, fp, r0
 8008c02:	4318      	orrs	r0, r3
 8008c04:	9004      	str	r0, [sp, #16]
 8008c06:	463d      	mov	r5, r7
 8008c08:	e7d3      	b.n	8008bb2 <_svfiprintf_r+0x92>
 8008c0a:	9a03      	ldr	r2, [sp, #12]
 8008c0c:	1d11      	adds	r1, r2, #4
 8008c0e:	6812      	ldr	r2, [r2, #0]
 8008c10:	9103      	str	r1, [sp, #12]
 8008c12:	2a00      	cmp	r2, #0
 8008c14:	db01      	blt.n	8008c1a <_svfiprintf_r+0xfa>
 8008c16:	9207      	str	r2, [sp, #28]
 8008c18:	e004      	b.n	8008c24 <_svfiprintf_r+0x104>
 8008c1a:	4252      	negs	r2, r2
 8008c1c:	f043 0302 	orr.w	r3, r3, #2
 8008c20:	9207      	str	r2, [sp, #28]
 8008c22:	9304      	str	r3, [sp, #16]
 8008c24:	783b      	ldrb	r3, [r7, #0]
 8008c26:	2b2e      	cmp	r3, #46	; 0x2e
 8008c28:	d10c      	bne.n	8008c44 <_svfiprintf_r+0x124>
 8008c2a:	787b      	ldrb	r3, [r7, #1]
 8008c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c2e:	d133      	bne.n	8008c98 <_svfiprintf_r+0x178>
 8008c30:	9b03      	ldr	r3, [sp, #12]
 8008c32:	1d1a      	adds	r2, r3, #4
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	9203      	str	r2, [sp, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	bfb8      	it	lt
 8008c3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c40:	3702      	adds	r7, #2
 8008c42:	9305      	str	r3, [sp, #20]
 8008c44:	4d2e      	ldr	r5, [pc, #184]	; (8008d00 <_svfiprintf_r+0x1e0>)
 8008c46:	7839      	ldrb	r1, [r7, #0]
 8008c48:	2203      	movs	r2, #3
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	f7f7 fad0 	bl	80001f0 <memchr>
 8008c50:	b138      	cbz	r0, 8008c62 <_svfiprintf_r+0x142>
 8008c52:	2340      	movs	r3, #64	; 0x40
 8008c54:	1b40      	subs	r0, r0, r5
 8008c56:	fa03 f000 	lsl.w	r0, r3, r0
 8008c5a:	9b04      	ldr	r3, [sp, #16]
 8008c5c:	4303      	orrs	r3, r0
 8008c5e:	3701      	adds	r7, #1
 8008c60:	9304      	str	r3, [sp, #16]
 8008c62:	7839      	ldrb	r1, [r7, #0]
 8008c64:	4827      	ldr	r0, [pc, #156]	; (8008d04 <_svfiprintf_r+0x1e4>)
 8008c66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c6a:	2206      	movs	r2, #6
 8008c6c:	1c7e      	adds	r6, r7, #1
 8008c6e:	f7f7 fabf 	bl	80001f0 <memchr>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	d038      	beq.n	8008ce8 <_svfiprintf_r+0x1c8>
 8008c76:	4b24      	ldr	r3, [pc, #144]	; (8008d08 <_svfiprintf_r+0x1e8>)
 8008c78:	bb13      	cbnz	r3, 8008cc0 <_svfiprintf_r+0x1a0>
 8008c7a:	9b03      	ldr	r3, [sp, #12]
 8008c7c:	3307      	adds	r3, #7
 8008c7e:	f023 0307 	bic.w	r3, r3, #7
 8008c82:	3308      	adds	r3, #8
 8008c84:	9303      	str	r3, [sp, #12]
 8008c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c88:	444b      	add	r3, r9
 8008c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c8c:	e76d      	b.n	8008b6a <_svfiprintf_r+0x4a>
 8008c8e:	fb05 3202 	mla	r2, r5, r2, r3
 8008c92:	2001      	movs	r0, #1
 8008c94:	460f      	mov	r7, r1
 8008c96:	e7a6      	b.n	8008be6 <_svfiprintf_r+0xc6>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	3701      	adds	r7, #1
 8008c9c:	9305      	str	r3, [sp, #20]
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	250a      	movs	r5, #10
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ca8:	3a30      	subs	r2, #48	; 0x30
 8008caa:	2a09      	cmp	r2, #9
 8008cac:	d903      	bls.n	8008cb6 <_svfiprintf_r+0x196>
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0c8      	beq.n	8008c44 <_svfiprintf_r+0x124>
 8008cb2:	9105      	str	r1, [sp, #20]
 8008cb4:	e7c6      	b.n	8008c44 <_svfiprintf_r+0x124>
 8008cb6:	fb05 2101 	mla	r1, r5, r1, r2
 8008cba:	2301      	movs	r3, #1
 8008cbc:	4607      	mov	r7, r0
 8008cbe:	e7f0      	b.n	8008ca2 <_svfiprintf_r+0x182>
 8008cc0:	ab03      	add	r3, sp, #12
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	4622      	mov	r2, r4
 8008cc6:	4b11      	ldr	r3, [pc, #68]	; (8008d0c <_svfiprintf_r+0x1ec>)
 8008cc8:	a904      	add	r1, sp, #16
 8008cca:	4640      	mov	r0, r8
 8008ccc:	f7fe f8ee 	bl	8006eac <_printf_float>
 8008cd0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008cd4:	4681      	mov	r9, r0
 8008cd6:	d1d6      	bne.n	8008c86 <_svfiprintf_r+0x166>
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	065b      	lsls	r3, r3, #25
 8008cdc:	f53f af35 	bmi.w	8008b4a <_svfiprintf_r+0x2a>
 8008ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ce2:	b01d      	add	sp, #116	; 0x74
 8008ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce8:	ab03      	add	r3, sp, #12
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	4622      	mov	r2, r4
 8008cee:	4b07      	ldr	r3, [pc, #28]	; (8008d0c <_svfiprintf_r+0x1ec>)
 8008cf0:	a904      	add	r1, sp, #16
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	f7fe fb90 	bl	8007418 <_printf_i>
 8008cf8:	e7ea      	b.n	8008cd0 <_svfiprintf_r+0x1b0>
 8008cfa:	bf00      	nop
 8008cfc:	08009254 	.word	0x08009254
 8008d00:	0800925a 	.word	0x0800925a
 8008d04:	0800925e 	.word	0x0800925e
 8008d08:	08006ead 	.word	0x08006ead
 8008d0c:	08008a6d 	.word	0x08008a6d

08008d10 <_sbrk_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	4c06      	ldr	r4, [pc, #24]	; (8008d2c <_sbrk_r+0x1c>)
 8008d14:	2300      	movs	r3, #0
 8008d16:	4605      	mov	r5, r0
 8008d18:	4608      	mov	r0, r1
 8008d1a:	6023      	str	r3, [r4, #0]
 8008d1c:	f7f9 ffae 	bl	8002c7c <_sbrk>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d102      	bne.n	8008d2a <_sbrk_r+0x1a>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	b103      	cbz	r3, 8008d2a <_sbrk_r+0x1a>
 8008d28:	602b      	str	r3, [r5, #0]
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	200004d0 	.word	0x200004d0

08008d30 <__ascii_mbtowc>:
 8008d30:	b082      	sub	sp, #8
 8008d32:	b901      	cbnz	r1, 8008d36 <__ascii_mbtowc+0x6>
 8008d34:	a901      	add	r1, sp, #4
 8008d36:	b142      	cbz	r2, 8008d4a <__ascii_mbtowc+0x1a>
 8008d38:	b14b      	cbz	r3, 8008d4e <__ascii_mbtowc+0x1e>
 8008d3a:	7813      	ldrb	r3, [r2, #0]
 8008d3c:	600b      	str	r3, [r1, #0]
 8008d3e:	7812      	ldrb	r2, [r2, #0]
 8008d40:	1c10      	adds	r0, r2, #0
 8008d42:	bf18      	it	ne
 8008d44:	2001      	movne	r0, #1
 8008d46:	b002      	add	sp, #8
 8008d48:	4770      	bx	lr
 8008d4a:	4610      	mov	r0, r2
 8008d4c:	e7fb      	b.n	8008d46 <__ascii_mbtowc+0x16>
 8008d4e:	f06f 0001 	mvn.w	r0, #1
 8008d52:	e7f8      	b.n	8008d46 <__ascii_mbtowc+0x16>

08008d54 <memmove>:
 8008d54:	4288      	cmp	r0, r1
 8008d56:	b510      	push	{r4, lr}
 8008d58:	eb01 0302 	add.w	r3, r1, r2
 8008d5c:	d807      	bhi.n	8008d6e <memmove+0x1a>
 8008d5e:	1e42      	subs	r2, r0, #1
 8008d60:	4299      	cmp	r1, r3
 8008d62:	d00a      	beq.n	8008d7a <memmove+0x26>
 8008d64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d68:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008d6c:	e7f8      	b.n	8008d60 <memmove+0xc>
 8008d6e:	4283      	cmp	r3, r0
 8008d70:	d9f5      	bls.n	8008d5e <memmove+0xa>
 8008d72:	1881      	adds	r1, r0, r2
 8008d74:	1ad2      	subs	r2, r2, r3
 8008d76:	42d3      	cmn	r3, r2
 8008d78:	d100      	bne.n	8008d7c <memmove+0x28>
 8008d7a:	bd10      	pop	{r4, pc}
 8008d7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d80:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008d84:	e7f7      	b.n	8008d76 <memmove+0x22>

08008d86 <__malloc_lock>:
 8008d86:	4770      	bx	lr

08008d88 <__malloc_unlock>:
 8008d88:	4770      	bx	lr

08008d8a <_realloc_r>:
 8008d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8c:	4607      	mov	r7, r0
 8008d8e:	4614      	mov	r4, r2
 8008d90:	460e      	mov	r6, r1
 8008d92:	b921      	cbnz	r1, 8008d9e <_realloc_r+0x14>
 8008d94:	4611      	mov	r1, r2
 8008d96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d9a:	f7ff be0d 	b.w	80089b8 <_malloc_r>
 8008d9e:	b922      	cbnz	r2, 8008daa <_realloc_r+0x20>
 8008da0:	f7ff fdbc 	bl	800891c <_free_r>
 8008da4:	4625      	mov	r5, r4
 8008da6:	4628      	mov	r0, r5
 8008da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008daa:	f000 f821 	bl	8008df0 <_malloc_usable_size_r>
 8008dae:	42a0      	cmp	r0, r4
 8008db0:	d20f      	bcs.n	8008dd2 <_realloc_r+0x48>
 8008db2:	4621      	mov	r1, r4
 8008db4:	4638      	mov	r0, r7
 8008db6:	f7ff fdff 	bl	80089b8 <_malloc_r>
 8008dba:	4605      	mov	r5, r0
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d0f2      	beq.n	8008da6 <_realloc_r+0x1c>
 8008dc0:	4631      	mov	r1, r6
 8008dc2:	4622      	mov	r2, r4
 8008dc4:	f7ff fab6 	bl	8008334 <memcpy>
 8008dc8:	4631      	mov	r1, r6
 8008dca:	4638      	mov	r0, r7
 8008dcc:	f7ff fda6 	bl	800891c <_free_r>
 8008dd0:	e7e9      	b.n	8008da6 <_realloc_r+0x1c>
 8008dd2:	4635      	mov	r5, r6
 8008dd4:	e7e7      	b.n	8008da6 <_realloc_r+0x1c>

08008dd6 <__ascii_wctomb>:
 8008dd6:	b149      	cbz	r1, 8008dec <__ascii_wctomb+0x16>
 8008dd8:	2aff      	cmp	r2, #255	; 0xff
 8008dda:	bf85      	ittet	hi
 8008ddc:	238a      	movhi	r3, #138	; 0x8a
 8008dde:	6003      	strhi	r3, [r0, #0]
 8008de0:	700a      	strbls	r2, [r1, #0]
 8008de2:	f04f 30ff 	movhi.w	r0, #4294967295
 8008de6:	bf98      	it	ls
 8008de8:	2001      	movls	r0, #1
 8008dea:	4770      	bx	lr
 8008dec:	4608      	mov	r0, r1
 8008dee:	4770      	bx	lr

08008df0 <_malloc_usable_size_r>:
 8008df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008df4:	1f18      	subs	r0, r3, #4
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	bfbc      	itt	lt
 8008dfa:	580b      	ldrlt	r3, [r1, r0]
 8008dfc:	18c0      	addlt	r0, r0, r3
 8008dfe:	4770      	bx	lr

08008e00 <_init>:
 8008e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e02:	bf00      	nop
 8008e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e06:	bc08      	pop	{r3}
 8008e08:	469e      	mov	lr, r3
 8008e0a:	4770      	bx	lr

08008e0c <_fini>:
 8008e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0e:	bf00      	nop
 8008e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e12:	bc08      	pop	{r3}
 8008e14:	469e      	mov	lr, r3
 8008e16:	4770      	bx	lr
